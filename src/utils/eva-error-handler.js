// ‚ö° Eva Platform - Error Handler & Logging System
// –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

/**
 * Eva Platform Error Handler
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */
class EvaErrorHandler {
  constructor() {
    try {
      this.auditLogger = new EvaAuditLogger();
      this.errorQueue = [];
      this.isOnline = navigator?.onLine ?? true;
      this.setupGlobalErrorHandlers();
      this.setupNetworkMonitoring();
    } catch (error) {
      console.error('Failed to initialize EvaErrorHandler:', error);
      // Ensure basic functionality even if initialization partially fails
      this.errorQueue = [];
      this.isOnline = true;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
   */
  setupGlobalErrorHandlers() {
    // Prevent duplicate registrations
    if (this.handlersRegistered) return;
    this.handlersRegistered = true;

    // Store references for cleanup
    this.errorHandler = (event) => {
      this.handleError(event.error, 'global_error', {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        message: event.message
      });
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ JavaScript –æ—à–∏–±–∫–∏
    window.addEventListener('error', this.errorHandler);

    // –ù–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ Promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      this.handleError(event.reason, 'unhandled_promise_rejection', {
        promise: event.promise
      });
    });

    // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ API –æ—à–∏–±–∫–∏
    window.addEventListener('eva-api-error', (event) => {
      this.handleError(event.detail.error, 'api_error', {
        endpoint: event.detail.endpoint,
        method: event.detail.method,
        // Sanitize patient ID for logs
        patientId: this.sanitizePatientId(event.detail.patientId)
      });
    });

    // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    window.addEventListener('eva-auth-error', (event) => {
      this.handleError(event.detail.error, 'auth_error', {
        userId: event.detail.userId,
        action: event.detail.action
      });
    });
  }

  // Add cleanup method
  cleanup() {
    if (this.errorHandler) {
      window.removeEventListener('error', this.errorHandler);
    }
    // Remove other listeners...
  }

  // Add sanitization method
  sanitizePatientId(patientId) {
    if (!patientId) return 'anonymous';
    // Hash or truncate patient ID for privacy
    return `patient_${patientId.substring(0, 4)}***`;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
   */
  handleError(error, context, additionalData = {}) {
    const errorInfo = {
      id: this.generateErrorId(),
      message: error?.message || 'Unknown error',
      stack: error?.stack,
      context: context,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href,
      userId: this.getCurrentUserId(),
      sessionId: this.getSessionId(),
      additional: additionalData,
      severity: this.determineSeverity(error, context)
    };

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ compliance
    this.auditLogger.logError(errorInfo);

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showUserNotification(errorInfo);

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω)
    if (this.isOnline) {
      this.reportToMonitoring(errorInfo);
    } else {
      this.queueErrorForLater(errorInfo);
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
    if (errorInfo.severity === 'critical') {
      this.handleCriticalError(errorInfo);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
   */
  // Add constants at class level
  static CONTEXTS = {
    PATIENT_DATA: 'patient_data',
    MEDICAL_RECORD: 'medical_record',
    AUTH_ERROR: 'auth_error',
    API_ERROR: 'api_error',
    // ... other contexts
  };

  static SEVERITY_LEVELS = {
    CRITICAL: 'critical',
    HIGH: 'high',
    MEDIUM: 'medium',
    LOW: 'low'
  };

  determineSeverity(error, context) {
    // Ensure context is a string
    const contextStr = String(context || '').toLowerCase();
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const criticalContexts = [
      EvaErrorHandler.CONTEXTS.PATIENT_DATA,
      EvaErrorHandler.CONTEXTS.MEDICAL_RECORD,
      EvaErrorHandler.CONTEXTS.AUTH_ERROR
    ];
    
    if (
      criticalContexts.some(ctx => contextStr === ctx) ||
      error?.message?.toLowerCase().includes('data loss')
    ) {
      return EvaErrorHandler.SEVERITY_LEVELS.CRITICAL;
    }
    
    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (
      context.includes('api_error') ||
      context.includes('navigation') ||
      error?.message?.includes('network')
    ) {
      return 'high';
    }
    
    // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (
      context.includes('ui_error') ||
      context.includes('validation')
    ) {
      return 'medium';
    }
    
    return 'low';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
   */
  handleCriticalError(errorInfo) {
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    this.notifyAdministrator(errorInfo);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
    this.savePatientDataEmergency();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showCriticalErrorModal(errorInfo);
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  showUserNotification(errorInfo) {
    const container = this.getOrCreateErrorContainer();
    
    const notification = document.createElement('div');
    notification.className = `eva-error-notification eva-error-${errorInfo.severity}`;
    notification.innerHTML = `
      <div class="eva-error-icon">
        ${this.getErrorIcon(errorInfo.severity)}
      </div>
      <div class="eva-error-content">
        <h3 class="eva-error-title">${this.getErrorTitle(errorInfo.severity)}</h3>
        <p class="eva-error-message">${this.getUserFriendlyMessage(errorInfo)}</p>
        <div class="eva-error-actions">
          <button class="eva-button eva-button--primary" onclick="this.closest('.eva-error-notification').remove()">
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
          ${errorInfo.severity === 'critical' ? `
            <button class="eva-button eva-button--secondary" onclick="window.location.reload()">
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </button>
          ` : ''}
        </div>
      </div>
    `;
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (errorInfo.severity !== 'critical') {
      setTimeout(() => {
        notification.remove();
      }, 5000);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
   */
  showCriticalErrorModal(errorInfo) {
    const modal = document.createElement('div');
    modal.className = 'eva-error-modal eva-error-modal--critical';
    modal.innerHTML = `
      <div class="eva-error-modal-backdrop"></div>
      <div class="eva-error-modal-content">
        <div class="eva-error-modal-header">
          <h2>üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
        </div>
        <div class="eva-error-modal-body">
          <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ.</p>
          <p>–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</p>
          <p><strong>ID –æ—à–∏–±–∫–∏:</strong> ${errorInfo.id}</p>
        </div>
        <div class="eva-error-modal-footer">
          <button class="eva-button eva-button--primary" onclick="window.location.reload()">
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
          </button>
          <button class="eva-button eva-button--secondary" onclick="this.reportErrorToSupport('${errorInfo.id}')">
            –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async reportToMonitoring(errorInfo) {
    try {
      // Sanitize error info before sending
      const sanitizedError = this.sanitizeErrorForReporting(errorInfo);

      // Add timeout using AbortController
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);

      await fetch('/api/monitoring/error', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Eva-Session': this.getSessionId(),
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify(sanitizedError),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
    } catch (monitoringError) {
      if (monitoringError.name === 'AbortError') {
        console.error('Monitoring request timed out');
      } else {
        console.error('Failed to report error to monitoring:', monitoringError);
      }
      this.queueErrorForLater(errorInfo);
    }
  }

  sanitizeErrorForReporting(errorInfo) {
    // Remove or hash sensitive data before sending to monitoring
    const sanitized = { ...errorInfo };
    if (sanitized.additional?.patientId) {
      sanitized.additional.patientId = this.sanitizePatientId(sanitized.additional.patientId);
    }
    return sanitized;
  }

  getAuthToken() {
    return localStorage.getItem('eva-auth-token') || '';
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  setupNetworkMonitoring() {
    window.addEventListener('online', () => {
      this.isOnline = true;
      this.processErrorQueue();
    });

    window.addEventListener('offline', () => {
      this.isOnline = false;
      this.showOfflineNotification();
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async processErrorQueue() {
    while (this.errorQueue.length > 0) {
      const errorInfo = this.errorQueue.shift();
      try {
        await this.reportToMonitoring(errorInfo);
      } catch (error) {
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        this.errorQueue.unshift(errorInfo);
        break;
      }
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –æ—Ñ—Ñ–ª–∞–π–Ω
   */
  showOfflineNotification() {
    const notification = document.createElement('div');
    notification.className = 'eva-offline-notification';
    notification.innerHTML = `
      <div class="eva-offline-content">
        <div class="eva-offline-icon">üì°</div>
        <div class="eva-offline-text">
          <h3>–†–∞–±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ</h3>
          <p>–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p>
        </div>
      </div>
    `;
    
    document.body.appendChild(notification);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  getUserFriendlyMessage(errorInfo) {
    switch (errorInfo.context) {
      case 'api_error':
        return '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
      case 'auth_error':
        return '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.';
      case 'patient_data':
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.';
      case 'medical_record':
        return '–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞–ø–∏—Å—å—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      case 'validation':
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.';
      default:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –æ—à–∏–±–∫–∏
   */
  getErrorIcon(severity) {
    switch (severity) {
      case 'critical': return 'üö®';
      case 'high': return '‚ö†Ô∏è';
      case 'medium': return 'üî∏';
      default: return '‚ÑπÔ∏è';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
   */
  getErrorTitle(severity) {
    switch (severity) {
      case 'critical': return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞';
      case 'high': return '–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
      case 'medium': return '–í–Ω–∏–º–∞–Ω–∏–µ';
      default: return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫
   */
  getOrCreateErrorContainer() {
    let container = document.getElementById('eva-error-container');
    if (!container) {
      container = document.createElement('div');
      container.id = 'eva-error-container';
      container.className = 'eva-error-container';
      document.body.appendChild(container);
    }
    return container;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –æ—à–∏–±–∫–∏
   */
  generateErrorId() {
    return `EVA-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCurrentUserId() {
    return localStorage.getItem('eva-user-id') || 'anonymous';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏
   */
  getSessionId() {
    return sessionStorage.getItem('eva-session-id') || 'no-session';
  }

  /**
   * –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  queueErrorForLater(errorInfo) {
    this.errorQueue.push(errorInfo);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    if (this.errorQueue.length > 50) {
      this.errorQueue.shift();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è persistence
    localStorage.setItem('eva-error-queue', JSON.stringify(this.errorQueue));
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
   */
  savePatientDataEmergency() {
    try {
      // Check and clean old emergency data first
      this.cleanOldEmergencyData();
      
      const forms = document.querySelectorAll('.eva-medical-form');
      const emergencyData = {};
      const timestamp = new Date().toISOString();
      
      forms.forEach((form, index) => {
        const formData = new FormData(form);
        emergencyData[`form-${index}`] = {};
        
        for (let [key, value] of formData.entries()) {
          emergencyData[`form-${index}`][key] = value;
        }
      });
      
      // Encrypt sensitive data before storing
      const encryptedData = {
        timestamp,
        data: this.encryptData(emergencyData),
        checksum: this.generateChecksum(emergencyData)
      };
      
      localStorage.setItem('eva-emergency-data', JSON.stringify(encryptedData));
      console.log('Emergency patient data saved');
    } catch (error) {
      console.error('Failed to save emergency patient data:', error);
    }
  }

  // Add encryption method (implement with proper crypto library)
  encryptData(data) {
    // TODO: Implement proper encryption using Web Crypto API or similar
    console.warn('Emergency data encryption not implemented - this is a security risk!');
    return btoa(JSON.stringify(data)); // Base64 is NOT encryption - replace this!
  }

  generateChecksum(data) {
    // Generate checksum for data integrity verification
    return JSON.stringify(data).length; // Replace with proper checksum
  }

  cleanOldEmergencyData() {
    const existing = localStorage.getItem('eva-emergency-data');
    if (existing) {
      try {
        const parsed = JSON.parse(existing);
        const age = Date.now() - new Date(parsed.timestamp).getTime();
        // Remove data older than 24 hours
        if (age > 24 * 60 * 60 * 1000) {
          localStorage.removeItem('eva-emergency-data');
        }
      } catch (e) {
        localStorage.removeItem('eva-emergency-data');
      }
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  async notifyAdministrator(errorInfo) {
    try {
      await fetch('/api/admin/critical-error', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Eva-Priority': 'critical'
        },
        body: JSON.stringify({
          error: errorInfo,
          timestamp: new Date().toISOString(),
          urgent: true
        })
      });
    } catch (error) {
      console.error('Failed to notify administrator:', error);
    }
  }
}

/**
 * Eva Audit Logger - –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ compliance
 */
class EvaAuditLogger {
  constructor() {
    this.logs = [];
    this.maxLogsInMemory = 1000;
    this.maxLogsInStorage = 1000; // Increase for compliance
    this.initializeFromStorage();
  }

  initializeFromStorage() {
    try {
      const stored = localStorage.getItem('eva-audit-logs');
      if (stored) {
        this.logs = JSON.parse(stored);
      }
    } catch (error) {
      console.error('Failed to load audit logs:', error);
      this.logs = [];
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   */
  logError(errorInfo) {
    const logEntry = {
      id: this.generateLogId(),
      type: 'error',
      timestamp: new Date().toISOString(),
      data: errorInfo,
      complianceLevel: this.getComplianceLevel(errorInfo),
      signature: this.generateLogSignature(errorInfo)
    };

    this.logs.push(logEntry);
    this.maintainLogSize();
    this.persistLog(logEntry);
    this.sendToComplianceServer(logEntry);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   */
  logMedicalEvent(eventType, patientId, data) {
    const logEntry = {
      type: 'medical_event',
      eventType: eventType,
      patientId: patientId,
      timestamp: new Date().toISOString(),
      data: data,
      complianceLevel: 'high'
    };

    this.logs.push(logEntry);
    this.maintainLogSize();
    this.persistLog(logEntry);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è compliance
   */
  getComplianceLevel(errorInfo) {
    if (
      errorInfo.context.includes('patient') ||
      errorInfo.context.includes('medical')
    ) {
      return 'high';
    }
    return 'medium';
  }

  generateLogId() {
    return `LOG-${Date.now()}-${Math.random()
      .toString(36)
      .substr(2, 9)}`;
  }

  generateLogSignature(data) {
    // Generate cryptographic signature for tamper detection
    // TODO: Implement proper HMAC or digital signature
    return 'signature-placeholder';
  }

  async sendToComplianceServer(logEntry) {
    try {
      // Send to secure compliance server for permanent storage
      await fetch('/api/compliance/audit-log', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Audit-Signature': logEntry.signature
        },
        body: JSON.stringify(logEntry)
      });
    } catch (error) {
      console.error('Failed to send audit log to compliance server:', error);
      // Queue for later sending
      this.queueAuditLog(logEntry);
    }
  }

  /**
   * –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤
   */
  maintainLogSize() {
    if (this.logs.length > this.maxLogsInMemory) {
      // Archive oldest 100 logs
      const toArchive = this.logs.splice(0, 100);
      this.archiveLogs(toArchive);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞
   */
  persistLog(logEntry) {
    try {
      const existingLogs = JSON.parse(
        localStorage.getItem('eva-audit-logs') || '[]'
      );
      existingLogs.push(logEntry);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ localStorage
      if (existingLogs.length > 100) {
        existingLogs.shift();
      }

      localStorage.setItem(
        'eva-audit-logs',
        JSON.stringify(existingLogs)
      );
    } catch (error) {
      console.error('Failed to persist audit log:', error);
    }
  }

  async archiveLogs(logs) {
    try {
      // Compress logs before archiving
      const compressed = this.compressLogs(logs);

      // Send to archive storage
      await fetch('/api/compliance/archive', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Encoding': 'gzip'
        },
        body: compressed
      });
    } catch (error) {
      console.error('Failed to archive logs:', error);
    }
  }

  compressLogs(logs) {
    // TODO: Implement actual compression (e.g., using pako library)
    return JSON.stringify(logs);
  }

  queueAuditLog(logEntry) {
    const queue = JSON.parse(
      localStorage.getItem('eva-audit-queue') || '[]'
    );
    queue.push(logEntry);
    localStorage.setItem(
      'eva-audit-queue',
      JSON.stringify(queue)
    );
  }
}

/**
 * Eva Performance Monitor
 */
class EvaPerformanceMonitor {
  constructor() {
    this.metrics = {
      pageLoadTime: 0,
      apiResponseTimes: [],
      errorRate: 0,
      userInteractions: 0
    };
    this.setupPerformanceMonitoring();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  setupPerformanceMonitoring() {
    // –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', () => {
      this.metrics.pageLoadTime = performance.now();
      this.reportMetric('page_load_time', this.metrics.pageLoadTime);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –≤—ã–∑–æ–≤–æ–≤
    this.interceptFetch();

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.trackUserInteractions();
  }

  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  interceptFetch() {
    const originalFetch = window.fetch;
    
    window.fetch = async (...args) => {
      const startTime = performance.now();
      
      try {
        const response = await originalFetch(...args);
        const endTime = performance.now();
        const responseTime = endTime - startTime;
        
        this.metrics.apiResponseTimes.push(responseTime);
        this.reportMetric('api_response_time', responseTime);
        
        return response;
      } catch (error) {
        this.metrics.errorRate++;
        this.reportMetric('api_error_rate', this.metrics.errorRate);
        throw error;
      }
    };
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  trackUserInteractions() {
    ['click', 'keydown', 'scroll'].forEach(eventType => {
      document.addEventListener(eventType, () => {
        this.metrics.userInteractions++;
      });
    });
  }

  /**
   * –û—Ç—á–µ—Ç –æ –º–µ—Ç—Ä–∏–∫–µ
   */
  reportMetric(metricName, value) {
    console.log(`Eva Performance Metric - ${metricName}: ${value}`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –±—ã –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (window.evaErrorHandler) {
      window.evaErrorHandler.auditLogger.logMedicalEvent('performance_metric', 'system', {
        metric: metricName,
        value: value,
        timestamp: new Date().toISOString()
      });
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
window.evaErrorHandler = new EvaErrorHandler();
window.evaPerformanceMonitor = new EvaPerformanceMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    EvaErrorHandler,
    EvaAuditLogger,
    EvaPerformanceMonitor
  };
}

console.log('‚úÖ Eva Platform Error Handler & Performance Monitor initialized');
