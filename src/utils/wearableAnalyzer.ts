import type { WearableData } from '@/pages/patient/WearableDevices';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–æ—Å–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
export interface WearableInsight {
  id: string;
  type: 'sleep_pattern' | 'heart_rate_variability' | 'activity_correlation' | 'temperature_tracking' | 'recovery_analysis';
  priority: 'low' | 'medium' | 'high';
  title: string;
  description: string;
  correlation?: number;
  confidence: number;
  actionable: boolean;
  recommendations?: string[];
  icon: string;
  trend?: 'improving' | 'stable' | 'declining';
}

export const performWearableAnalysis = async (
  wearableData: WearableData[],
  symptomEntries: any[]
): Promise<WearableInsight[]> => {
  const insights: WearableInsight[] = [];

  if (wearableData.length < 5) {
    return insights;
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–Ω–∞ –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –º–µ–Ω–æ–ø–∞—É–∑—ã
  const sleepAnalysis = analyzeSleepPatterns(wearableData, symptomEntries);
  insights.push(...sleepAnalysis);

  // –ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞
  const hrvAnalysis = analyzeHeartRateVariability(wearableData);
  insights.push(...hrvAnalysis);

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏
  const activityAnalysis = analyzeActivityCorrelations(wearableData, symptomEntries);
  insights.push(...activityAnalysis);

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const temperatureAnalysis = analyzeTemperaturePatterns(wearableData, symptomEntries);
  insights.push(...temperatureAnalysis);

  return insights.sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 };
    if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    }
    return b.confidence - a.confidence;
  });
};

const analyzeSleepPatterns = (
  wearableData: WearableData[],
  symptomEntries: any[]
): WearableInsight[] => {
  const insights: WearableInsight[] = [];

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –¥–∞—Ç—ã
  const commonDates = wearableData
    .map(w => w.date)
    .filter(date => symptomEntries.some(s => s.date === date))
    .sort();

  if (commonDates.length < 5) return insights;

  // –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ –ø—Ä–∏–ª–∏–≤–æ–≤
  const sleepHotFlashCorrelation = analyzeSleepHotFlashCorrelation(wearableData, symptomEntries, commonDates);
  
  if (Math.abs(sleepHotFlashCorrelation.correlation) > 0.3) {
    insights.push({
      id: 'sleep_hotflash_correlation',
      type: 'sleep_pattern',
      priority: Math.abs(sleepHotFlashCorrelation.correlation) > 0.5 ? 'high' : 'medium',
      title: '–°–≤—è–∑—å —Å–Ω–∞ –∏ –ø—Ä–∏–ª–∏–≤–æ–≤',
      description: `${sleepHotFlashCorrelation.correlation < 0 ? '–ü–ª–æ—Ö–æ–π' : '–•–æ—Ä–æ—à–∏–π'} —Å–æ–Ω –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å ${sleepHotFlashCorrelation.correlation < 0 ? '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º' : '—É–º–µ–Ω—å—à–µ–Ω–∏–µ–º'} –ø—Ä–∏–ª–∏–≤–æ–≤ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${Math.round(Math.abs(sleepHotFlashCorrelation.correlation) * 100)}%)`,
      correlation: sleepHotFlashCorrelation.correlation,
      confidence: Math.round(Math.abs(sleepHotFlashCorrelation.correlation) * 100),
      actionable: true,
      recommendations: sleepHotFlashCorrelation.recommendations,
      icon: 'üò¥',
      trend: sleepHotFlashCorrelation.trend
    });
  }

  // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑ —Å–Ω–∞
  const remSleepAnalysis = analyzeRemSleepDeficiency(wearableData);
  if (remSleepAnalysis.hasDeficiency) {
    insights.push({
      id: 'rem_sleep_deficiency',
      type: 'sleep_pattern',
      priority: 'high',
      title: '–î–µ—Ñ–∏—Ü–∏—Ç REM —Å–Ω–∞',
      description: `–§–∞–∑–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ ${remSleepAnalysis.averageRem}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞. –í –º–µ–Ω–æ–ø–∞—É–∑–µ REM —Å–æ–Ω –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è —Ä–µ–≥—É–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.`,
      confidence: 85,
      actionable: true,
      recommendations: [
        '–ò–∑–±–µ–≥–∞–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—è –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ (18-20¬∞C)',
        '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
        '–û–±—Å—É–¥–∏—Ç–µ —Å –≤—Ä–∞—á–æ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è REM —Å–Ω–∞'
      ],
      icon: 'üß†',
      trend: remSleepAnalysis.trend
    });
  }

  return insights;
};

const analyzeHeartRateVariability = (wearableData: WearableData[]): WearableInsight[] => {
  const insights: WearableInsight[] = [];

  const recentData = wearableData.slice(-14); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
  const hrvValues = recentData
    .map(d => d.heart_rate?.variability)
    .filter(hrv => hrv !== undefined) as number[];

  if (hrvValues.length < 7) return insights;

  const avgHrv = hrvValues.reduce((sum, hrv) => sum + hrv, 0) / hrvValues.length;
  const hrvTrend = calculateTrend(hrvValues);

  // –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∞ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (avgHrv < 30) {
    insights.push({
      id: 'low_hrv_stress',
      type: 'heart_rate_variability',
      priority: 'high',
      title: '–ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∞',
      description: `–°—Ä–µ–¥–Ω—è—è –í–°–† —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${Math.round(avgHrv)} –º—Å. –ù–∏–∑–∫–∞—è –í–°–† –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å –∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ–Ω–æ–ø–∞—É–∑–µ.`,
      confidence: 80,
      actionable: true,
      recommendations: [
        '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 5-10 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ –π–æ–≥–∞',
        '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ—Ñ–µ–∏–Ω –ø–æ—Å–ª–µ 14:00',
        '–û–±–µ—Å–ø–µ—á—å—Ç–µ 7-9 —á–∞—Å–æ–≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞'
      ],
      icon: '‚ù§Ô∏è',
      trend: hrvTrend
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const recoveryAnalysis = analyzeRecoveryPatterns(wearableData);
  if (recoveryAnalysis.needsAttention) {
    insights.push({
      id: 'poor_recovery',
      type: 'recovery_analysis',
      priority: 'medium',
      title: '–ó–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
      description: `–í–∞—à –ø—É–ª—å—Å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –º–µ–Ω–æ–ø–∞—É–∑–µ.`,
      confidence: 70,
      actionable: true,
      recommendations: [
        '–°–Ω–∏–∑—å—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ 10-15%',
        '–£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è —Ä–∞–∑–º–∏–Ω–∫–∏ –∏ –∑–∞–º–∏–Ω–∫–∏',
        '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–Ω–µ–π –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏',
        '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –Ω–∏–∑–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö (—Ö–æ–¥—å–±–∞, –ø–ª–∞–≤–∞–Ω–∏–µ)'
      ],
      icon: 'üîÑ',
      trend: recoveryAnalysis.trend
    });
  }

  return insights;
};

const analyzeActivityCorrelations = (
  wearableData: WearableData[],
  symptomEntries: any[]
): WearableInsight[] => {
  const insights: WearableInsight[] = [];

  if (wearableData.length < 7 || symptomEntries.length < 5) return insights;

  // –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const activityMoodCorrelation = analyzeActivityMoodCorrelation(wearableData, symptomEntries);
  
  if (Math.abs(activityMoodCorrelation.correlation) > 0.4) {
    insights.push({
      id: 'activity_mood_correlation',
      type: 'activity_correlation',
      priority: activityMoodCorrelation.correlation > 0 ? 'medium' : 'high',
      title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
      description: `–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${activityMoodCorrelation.correlation > 0 ? '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ' : '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ'} –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: ${Math.round(Math.abs(activityMoodCorrelation.correlation) * 100)}%)`,
      correlation: activityMoodCorrelation.correlation,
      confidence: Math.round(Math.abs(activityMoodCorrelation.correlation) * 100),
      actionable: true,
      recommendations: activityMoodCorrelation.recommendations,
      icon: 'üèÉ‚Äç‚ôÄÔ∏è',
      trend: activityMoodCorrelation.trend
    });
  }

  return insights;
};

const analyzeTemperaturePatterns = (
  wearableData: WearableData[],
  symptomEntries: any[]
): WearableInsight[] => {
  const insights: WearableInsight[] = [];

  const temperatureData = wearableData.filter(d => d.body_metrics?.body_temperature);
  if (temperatureData.length < 7) return insights;

  // –ê–Ω–∞–ª–∏–∑ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  const tempFluctuations = analyzeTemperatureFluctuations(temperatureData);
  
  if (tempFluctuations.hasSignificantFluctuations) {
    insights.push({
      id: 'temperature_fluctuations',
      type: 'temperature_tracking',
      priority: tempFluctuations.severity === 'high' ? 'high' : 'medium',
      title: '–ö–æ–ª–µ–±–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞',
      description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ (—Ä–∞–∑–±—Ä–æ—Å: ${tempFluctuations.range.toFixed(1)}¬∞C). –≠—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –º–µ–Ω–æ–ø–∞—É–∑—ã –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏.`,
      confidence: 75,
      actionable: true,
      recommendations: [
        '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø—Ä–∏–ª–∏–≤–æ–≤ (–æ—Å—Ç—Ä–∞—è –ø–∏—â–∞, –∞–ª–∫–æ–≥–æ–ª—å, —Å—Ç—Ä–µ—Å—Å)',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—É—é –æ–¥–µ–∂–¥—É',
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ –≥–æ—Ä—è—á–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ –±–∞–Ω—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
        '–û–±—Å—É–¥–∏—Ç–µ —Å –≤—Ä–∞—á–æ–º –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–∞–ø–∏—é'
      ],
      icon: 'üå°Ô∏è',
      trend: tempFluctuations.trend
    });
  }

  return insights;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

const calculateTrend = (values: number[]): 'improving' | 'stable' | 'declining' => {
  if (values.length < 3) return 'stable';
  
  const firstHalf = values.slice(0, Math.floor(values.length / 2));
  const secondHalf = values.slice(Math.floor(values.length / 2));
  
  const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;
  const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;
  
  const changePercent = Math.abs((secondAvg - firstAvg) / firstAvg) * 100;
  
  if (changePercent < 5) return 'stable';
  return secondAvg > firstAvg ? 'improving' : 'declining';
};

const analyzeSleepHotFlashCorrelation = (
  wearableData: WearableData[],
  symptomEntries: any[],
  commonDates: string[]
) => {
  const pairs = commonDates.map(date => {
    const wearableEntry = wearableData.find(w => w.date === date);
    const symptomEntry = symptomEntries.find(s => s.date === date);
    
    const sleepEfficiency = wearableEntry?.sleep?.sleep_efficiency || 0;
    const hotFlashes = symptomEntry?.symptoms?.hot_flashes?.severity || 0;
    
    return { sleepEfficiency, hotFlashes };
  }).filter(pair => pair.sleepEfficiency > 0);

  if (pairs.length < 5) {
    return { correlation: 0, trend: 'stable' as const, recommendations: [] };
  }

  const correlation = calculateCorrelation(
    pairs.map(p => p.sleepEfficiency),
    pairs.map(p => p.hotFlashes)
  );

  const recommendations = correlation < -0.3 ? [
    '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é —Å–ø–∞–ª—å–Ω—é (18-20¬∞C)',
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—ã—à–∞—â–∏–µ –ø–æ—Å—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏',
    '–ò–∑–±–µ–≥–∞–π—Ç–µ —Ç—è–∂–µ–ª–æ–π –ø–∏—â–∏ –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
    '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
    '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞'
  ] : [];

  return {
    correlation,
    trend: calculateTrend(pairs.map(p => p.sleepEfficiency)),
    recommendations
  };
};

const analyzeRemSleepDeficiency = (wearableData: WearableData[]) => {
  const sleepData = wearableData.filter(d => d.sleep?.rem_sleep_minutes);
  
  if (sleepData.length < 5) {
    return { hasDeficiency: false, averageRem: 0, trend: 'stable' as const };
  }

  const remPercentages = sleepData.map(d => {
    const total = d.sleep!.total_minutes;
    const rem = d.sleep!.rem_sleep_minutes;
    return (rem / total) * 100;
  });

  const averageRem = remPercentages.reduce((sum, pct) => sum + pct, 0) / remPercentages.length;
  
  return {
    hasDeficiency: averageRem < 15, // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π REM —Å–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 20-25%
    averageRem: Math.round(averageRem),
    trend: calculateTrend(remPercentages)
  };
};

const analyzeRecoveryPatterns = (wearableData: WearableData[]) => {
  const recentData = wearableData.slice(-7);
  const heartRateData = recentData.filter(d => d.heart_rate?.resting);

  if (heartRateData.length < 5) {
    return { needsAttention: false, trend: 'stable' as const };
  }

  const restingHRs = heartRateData.map(d => d.heart_rate!.resting);
  const avgRestingHR = restingHRs.reduce((sum, hr) => sum + hr, 0) / restingHRs.length;
  
  // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –≤ –ø–æ–∫–æ–µ –≤—ã—à–µ 75 —É–¥/–º–∏–Ω, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–ª–æ—Ö–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  return {
    needsAttention: avgRestingHR > 75,
    trend: calculateTrend(restingHRs)
  };
};

const analyzeActivityMoodCorrelation = (
  wearableData: WearableData[],
  symptomEntries: any[]
) => {
  const commonDates = wearableData
    .map(w => w.date)
    .filter(date => symptomEntries.some(s => s.date === date));

  const pairs = commonDates.map(date => {
    const wearableEntry = wearableData.find(w => w.date === date);
    const symptomEntry = symptomEntries.find(s => s.date === date);
    
    const steps = wearableEntry?.activity?.steps || 0;
    const mood = symptomEntry?.symptoms?.mood_changes?.severity || 0;
    
    return { steps, mood };
  }).filter(pair => pair.steps > 0);

  if (pairs.length < 5) {
    return { correlation: 0, trend: 'stable' as const, recommendations: [] };
  }

  const correlation = calculateCorrelation(
    pairs.map(p => p.steps),
    pairs.map(p => -p.mood) // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ —à–∞–≥–æ–≤ = –ª—É—á—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  );

  const recommendations = correlation > 0.3 ? [
    '–£–≤–µ–ª–∏—á—å—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    '–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 8000+ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å',
    '–î–æ–±–∞–≤—å—Ç–µ —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–≥—É–ª–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ'
  ] : [
    '–ù–∞–π–¥–∏—Ç–µ –≤–∏–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è',
    '–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö 10-–º–∏–Ω—É—Ç–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫',
    '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏'
  ];

  return {
    correlation,
    trend: calculateTrend(pairs.map(p => p.steps)),
    recommendations
  };
};

const analyzeTemperatureFluctuations = (temperatureData: WearableData[]) => {
  const temperatures = temperatureData.map(d => d.body_metrics!.body_temperature!);
  
  const minTemp = Math.min(...temperatures);
  const maxTemp = Math.max(...temperatures);
  const range = maxTemp - minTemp;
  
  return {
    hasSignificantFluctuations: range > 1.0, // –†–∞–∑–±—Ä–æ—Å –±–æ–ª—å—à–µ 1¬∞C —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º
    range,
    severity: range > 1.5 ? 'high' as const : 'medium' as const,
    trend: calculateTrend(temperatures)
  };
};

const calculateCorrelation = (x: number[], y: number[]): number => {
  if (x.length !== y.length || x.length === 0) return 0;
  
  const n = x.length;
  const sumX = x.reduce((sum, val) => sum + val, 0);
  const sumY = y.reduce((sum, val) => sum + val, 0);
  const sumXY = x.reduce((sum, val, i) => sum + val * y[i], 0);
  const sumXX = x.reduce((sum, val) => sum + val * val, 0);
  const sumYY = y.reduce((sum, val) => sum + val * val, 0);
  
  const numerator = n * sumXY - sumX * sumY;
  const denominator = Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY));
  
  return denominator === 0 ? 0 : numerator / denominator;
};