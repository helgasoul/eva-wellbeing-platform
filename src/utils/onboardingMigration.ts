/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –º–µ–∂–¥—É localStorage –∏ Supabase
 */

export interface LegacyOnboardingData {
  completed?: boolean;
  completedAt?: string;
  menopausePhase?: string;
  age?: number;
  basicInfo?: any;
  formData?: any;
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏–∑ localStorage
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
 */
export const migrateOnboardingData = (): {
  onboardingCompleted: boolean;
  onboardingData?: any;
  migrationPerformed: boolean;
} => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    const completedFlag = localStorage.getItem('onboardingCompleted');
    if (completedFlag === 'true') {
      console.log('‚úÖ Found onboardingCompleted flag in localStorage');
      
      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      const onboardingDataStr = localStorage.getItem('onboardingData');
      let onboardingData = null;
      
      if (onboardingDataStr) {
        try {
          onboardingData = JSON.parse(onboardingDataStr);
          console.log('‚úÖ Migrated onboarding data from localStorage');
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to parse onboardingData from localStorage');
        }
      }
      
      return {
        onboardingCompleted: true,
        onboardingData,
        migrationPerformed: true
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const oldUserData = localStorage.getItem('eva_user_data');
    if (oldUserData) {
      try {
        const userData = JSON.parse(oldUserData);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        if (userData.onboarding_completed || 
            userData.age || 
            userData.menopausePhase || 
            userData.basicInfo) {
          
          console.log('‚úÖ Migrating onboarding from legacy user data');
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          localStorage.setItem('onboardingCompleted', 'true');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          const migratedData = {
            completedAt: userData.completedAt || new Date().toISOString(),
            menopausePhase: userData.menopausePhase,
            formData: userData.basicInfo || userData.formData || {},
            migratedFrom: 'legacy_user_data'
          };
          
          localStorage.setItem('onboardingData', JSON.stringify(migratedData));
          
          return {
            onboardingCompleted: true,
            onboardingData: migratedData,
            migrationPerformed: true
          };
        }
      } catch (error) {
        console.error('‚ùå Error parsing legacy user data:', error);
        localStorage.removeItem('eva_user_data');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ bloom-onboarding-data
    const bloomOnboardingData = localStorage.getItem('bloom-onboarding-data');
    if (bloomOnboardingData) {
      try {
        const data = JSON.parse(bloomOnboardingData);
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω—ã–µ, —Å—á–∏—Ç–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
        if (data.basicInfo && data.symptoms && Object.keys(data).length >= 3) {
          console.log('‚úÖ Migrating from bloom-onboarding-data');
          
          localStorage.setItem('onboardingCompleted', 'true');
          
          const migratedData = {
            completedAt: new Date().toISOString(),
            formData: data,
            migratedFrom: 'bloom_onboarding'
          };
          
          localStorage.setItem('onboardingData', JSON.stringify(migratedData));
          
          return {
            onboardingCompleted: true,
            onboardingData: migratedData,
            migrationPerformed: true
          };
        }
      } catch (error) {
        console.error('‚ùå Error parsing bloom onboarding data:', error);
      }
    }

    // –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    return {
      onboardingCompleted: false,
      migrationPerformed: false
    };

  } catch (error) {
    console.error('‚ùå Critical error in onboarding migration:', error);
    return {
      onboardingCompleted: false,
      migrationPerformed: false
    };
  }
};

/**
 * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const cleanupLegacyData = () => {
  try {
    const keysToClean = [
      'eva_user_data',
      'bloom-onboarding-data',
      'eva_onboarding_data'
    ];
    
    keysToClean.forEach(key => {
      if (localStorage.getItem(key)) {
        localStorage.removeItem(key);
        console.log(`üßπ Cleaned up legacy key: ${key}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error cleaning up legacy data:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
 */
export const checkMigrationNeeded = (user: any): boolean => {
  if (!user) return false;
  
  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å onboardingCompleted –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
  if (user.onboardingCompleted !== undefined) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
  const hasLegacyData = Boolean(
    localStorage.getItem('onboardingCompleted') ||
    localStorage.getItem('eva_user_data') ||
    localStorage.getItem('bloom-onboarding-data')
  );
  
  return hasLegacyData;
};