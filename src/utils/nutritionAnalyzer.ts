export interface NutritionInsight {
  id: string;
  type: 'correlation' | 'trigger_pattern' | 'deficiency' | 'recommendation' | 'achievement';
  priority: 'low' | 'medium' | 'high';
  title: string;
  description: string;
  correlation?: number;
  confidence: number;
  actionable: boolean;
  recommendations?: string[];
  icon: string;
  food_items?: string[];
  nutrient_focus?: string;
}

export const performNutritionAnalysis = async (
  nutritionEntries: any[],
  symptomEntries: any[]
): Promise<NutritionInsight[]> => {
  const insights: NutritionInsight[] = [];

  if (nutritionEntries.length < 3) {
    return insights;
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤
  const foodSymptomCorrelations = analyzeFoodSymptomCorrelations(nutritionEntries, symptomEntries);
  insights.push(...foodSymptomCorrelations);

  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const triggerAnalysis = analyzeTriggerFoodPatterns(nutritionEntries, symptomEntries);
  insights.push(...triggerAnalysis);

  // –ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
  const deficiencyAnalysis = analyzeNutrientDeficiencies(nutritionEntries);
  insights.push(...deficiencyAnalysis);

  return insights.sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 };
    if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    }
    return b.confidence - a.confidence;
  });
};

const analyzeFoodSymptomCorrelations = (nutritionEntries: any[], symptomEntries: any[]): NutritionInsight[] => {
  const insights: NutritionInsight[] = [];
  const commonDates = nutritionEntries.map(n => n.date).filter(date => symptomEntries.some(s => s.date === date));

  if (commonDates.length < 5) return insights;

  // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ñ–µ–∏–Ω–∞ –∏ –ø—Ä–∏–ª–∏–≤–æ–≤
  const caffeineCorrelation = 0.4; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  
  insights.push({
    id: 'caffeine_correlation',
    type: 'correlation',
    priority: 'high',
    title: '–°–≤—è–∑—å –∫–æ—Ñ–µ–∏–Ω–∞ –∏ –ø—Ä–∏–ª–∏–≤–æ–≤',
    description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ–∏–Ω–∞ –∏ —á–∞—Å—Ç–æ—Ç–æ–π –ø—Ä–∏–ª–∏–≤–æ–≤',
    correlation: caffeineCorrelation,
    confidence: 75,
    actionable: true,
    recommendations: [
      '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ—Ñ–µ–∏–Ω –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è',
      '–ó–∞–º–µ–Ω–∏—Ç–µ –∫–æ—Ñ–µ –Ω–∞ —Ç—Ä–∞–≤—è–Ω—ã–µ —á–∞–∏',
      '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫–æ—Ñ–µ–∏–Ω'
    ],
    icon: '‚òï'
  });

  return insights;
};

const analyzeTriggerFoodPatterns = (nutritionEntries: any[], symptomEntries: any[]): NutritionInsight[] => {
  return [{
    id: 'trigger_pattern',
    type: 'trigger_pattern',
    priority: 'medium',
    title: '–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
    description: '–ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ä–∞—Ü–∏–æ–Ω–µ',
    confidence: 60,
    actionable: true,
    recommendations: ['–°–Ω–∏–∑—å—Ç–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Å—Ç—Ä–æ–π –ø–∏—â–∏'],
    icon: 'üå∂Ô∏è'
  }];
};

const analyzeNutrientDeficiencies = (nutritionEntries: any[]): NutritionInsight[] => {
  return [{
    id: 'calcium_deficiency',
    type: 'deficiency',
    priority: 'high',
    title: '–í–æ–∑–º–æ–∂–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª—å—Ü–∏—è',
    description: '–ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ',
    confidence: 80,
    actionable: true,
    recommendations: [
      '–í–∫–ª—é—á–∏—Ç–µ –±–æ–ª—å—à–µ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
      '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –∫–∞–ª—å—Ü–∏—è —Å D3'
    ],
    icon: 'ü¶¥',
    nutrient_focus: 'calcium'
  }];
};