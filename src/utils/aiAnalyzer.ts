import { format, subDays, parseISO } from 'date-fns';

interface HealthInsight {
  id: string;
  type: 'pattern' | 'correlation' | 'prediction' | 'recommendation' | 'achievement';
  priority: 'low' | 'medium' | 'high';
  title: string;
  description: string;
  actionable: boolean;
  actions?: string[];
  confidence: number; // 0-100%
  trend?: 'improving' | 'stable' | 'declining';
  icon: string;
}

interface HealthScore {
  overall: number; // 0-100
  categories: {
    symptoms: number;
    sleep: number;
    mood: number;
    energy: number;
  };
  trend: 'improving' | 'stable' | 'declining';
  weeklyChange: number;
}

interface SymptomTrend {
  symptom: string;
  current_week: number;
  previous_week: number;
  trend: 'improving' | 'worsening' | 'stable';
  pattern: string;
  recommendations: string[];
}

interface Prediction {
  type: string;
  target: string;
  value: number;
  confidence: number;
  description: string;
}

interface AnalysisResult {
  healthScore: HealthScore;
  insights: HealthInsight[];
  trends: SymptomTrend[];
  predictions: Prediction[];
}

export const performAIAnalysis = (
  onboarding: any,
  symptoms: any[],
  chat: any[],
  period: 'week' | 'month' | 'quarter'
): AnalysisResult => {
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
  const daysToAnalyze = period === 'week' ? 7 : period === 'month' ? 30 : 90;
  const cutoffDate = format(subDays(new Date(), daysToAnalyze), 'yyyy-MM-dd');
  const recentSymptoms = symptoms.filter(s => s.date >= cutoffDate);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º health score
  const healthScore = calculateHealthScore(recentSymptoms, onboarding);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
  const insights = generateInsights(recentSymptoms, onboarding, chat);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
  const trends = analyzeSymptomTrends(recentSymptoms);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
  const predictions = generatePredictions(recentSymptoms, onboarding);

  return {
    healthScore,
    insights,
    trends,
    predictions
  };
};

const calculateHealthScore = (symptoms: any[], onboarding: any): HealthScore => {
  if (symptoms.length === 0) {
    return {
      overall: 70,
      categories: { symptoms: 70, sleep: 70, mood: 70, energy: 70 },
      trend: 'stable',
      weeklyChange: 0
    };
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤
  const avgHotFlashes = symptoms.reduce((sum, s) => sum + (s.hotFlashes?.count || 0), 0) / symptoms.length;
  const symptomsScore = Math.max(0, 100 - (avgHotFlashes * 10));

  // –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞
  const avgSleepQuality = symptoms.reduce((sum, s) => sum + (s.sleep?.quality || 3), 0) / symptoms.length;
  const sleepScore = (avgSleepQuality / 5) * 100;

  // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const avgMood = symptoms.reduce((sum, s) => sum + (s.mood?.overall || 3), 0) / symptoms.length;
  const moodScore = (avgMood / 5) * 100;

  // –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–∏–∏
  const avgEnergy = symptoms.reduce((sum, s) => sum + (s.energy || 3), 0) / symptoms.length;
  const energyScore = (avgEnergy / 5) * 100;

  const overall = Math.round((symptomsScore + sleepScore + moodScore + energyScore) / 4);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
  const recentWeek = symptoms.slice(-7);
  const previousWeek = symptoms.slice(-14, -7);
  
  let trend: 'improving' | 'stable' | 'declining' = 'stable';
  let weeklyChange = 0;

  if (recentWeek.length > 0 && previousWeek.length > 0) {
    const recentAvg = recentWeek.reduce((sum, s) => sum + (s.mood?.overall || 3), 0) / recentWeek.length;
    const previousAvg = previousWeek.reduce((sum, s) => sum + (s.mood?.overall || 3), 0) / previousWeek.length;
    
    weeklyChange = Math.round((recentAvg - previousAvg) * 20);
    
    if (weeklyChange > 5) trend = 'improving';
    else if (weeklyChange < -5) trend = 'declining';
  }

  return {
    overall,
    categories: {
      symptoms: Math.round(symptomsScore),
      sleep: Math.round(sleepScore),
      mood: Math.round(moodScore),
      energy: Math.round(energyScore)
    },
    trend,
    weeklyChange
  };
};

const generateInsights = (symptoms: any[], onboarding: any, chat: any[]): HealthInsight[] => {
  const insights: HealthInsight[] = [];

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏–ª–∏–≤–æ–≤
  if (symptoms.length > 0) {
    const hotFlashDays = symptoms.filter(s => s.hotFlashes?.count > 0);
    if (hotFlashDays.length > symptoms.length * 0.6) {
      insights.push({
        id: 'hot_flash_pattern',
        type: 'pattern',
        priority: 'high',
        title: '–ß–∞—Å—Ç—ã–µ –ø—Ä–∏–ª–∏–≤—ã',
        description: `–£ –≤–∞—Å –ø—Ä–∏–ª–∏–≤—ã ${Math.round((hotFlashDays.length / symptoms.length) * 100)}% –¥–Ω–µ–π. –≠—Ç–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è –≤–∞—à–µ–π —Ñ–∞–∑—ã –º–µ–Ω–æ–ø–∞—É–∑—ã.`,
        actionable: true,
        actions: [
          '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—Ä–∏–ª–∏–≤–æ–≤',
          '–ò–∑–±–µ–≥–∞–π—Ç–µ –æ—Å—Ç—Ä–æ–π –ø–∏—â–∏ –∏ –∫–æ—Ñ–µ–∏–Ω–∞',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏',
          '–û–±—Å—É–¥–∏—Ç–µ —Å –≤—Ä–∞—á–æ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–µ—á–µ–Ω–∏—è'
        ],
        confidence: 85,
        trend: 'stable',
        icon: 'üî•'
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞
  const sleepIssues = symptoms.filter(s => s.sleep?.quality <= 2);
  if (sleepIssues.length > 3) {
    insights.push({
      id: 'sleep_quality',
      type: 'correlation',
      priority: 'high',
      title: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º',
      description: `–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ —Å–Ω–∏–∂–µ–Ω–æ –≤ ${sleepIssues.length} –∏–∑ ${symptoms.length} –¥–Ω–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –º–µ–Ω–æ–ø–∞—É–∑—ã.`,
      actionable: true,
      actions: [
        '–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
        '–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∞–ª—å–Ω—é'
      ],
      confidence: 78,
      icon: 'üò¥'
    });
  }

  // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤
  const moodSymptomCorrelation = analyzeMoodSymptomCorrelation(symptoms);
  if (moodSymptomCorrelation.correlation > 0.6) {
    insights.push({
      id: 'mood_symptom_correlation',
      type: 'correlation',
      priority: 'medium',
      title: '–°–≤—è–∑—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤',
      description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ ${moodSymptomCorrelation.symptom}. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: ${Math.round(moodSymptomCorrelation.correlation * 100)}%.`,
      actionable: true,
      actions: [
        '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º',
        '–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–û–±—â–µ–Ω–∏–µ —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏',
        '–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É'
      ],
      confidence: 72,
      icon: 'üîó'
    });
  }

  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const recentGoodDays = symptoms.slice(-7).filter(s => s.mood?.overall >= 4);
  if (recentGoodDays.length >= 5) {
    insights.push({
      id: 'positive_trend',
      type: 'achievement',
      priority: 'low',
      title: '–•–æ—Ä–æ—à–∞—è –Ω–µ–¥–µ–ª—è!',
      description: `${recentGoodDays.length} –∏–∑ 7 –¥–Ω–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è —Ö–æ—Ä–æ—à–æ. –û—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞!`,
      actionable: true,
      actions: [
        '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ',
        '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ',
        '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–º –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ'
      ],
      confidence: 90,
      icon: 'üèÜ'
    });
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∑—ã –º–µ–Ω–æ–ø–∞—É–∑—ã
  if (onboarding?.basicInfo?.hasStoppedPeriods) {
    insights.push({
      id: 'menopause_phase_advice',
      type: 'recommendation',
      priority: 'medium',
      title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π —Ñ–∞–∑—ã',
      description: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ—Å—Ç–º–µ–Ω–æ–ø–∞—É–∑–µ. –í–∞–∂–Ω–æ —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –æ—Å—Ç–µ–æ–ø–æ—Ä–æ–∑–∞ –∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.',
      actionable: true,
      actions: [
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Å—Ç–µ–π',
        '–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª—å—Ü–∏—è –∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D',
        '–ö–∞—Ä–¥–∏–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
        '–û–±—Å—É–¥–∏—Ç–µ —Å –≤—Ä–∞—á–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ó–ì–¢'
      ],
      confidence: 88,
      icon: 'üí°'
    });
  }

  return insights;
};

const analyzeMoodSymptomCorrelation = (symptoms: any[]) => {
  // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏
  if (symptoms.length < 3) {
    return { correlation: 0, symptom: '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' };
  }

  const moodScores = symptoms.map(s => s.mood?.overall || 3);
  const hotFlashCounts = symptoms.map(s => s.hotFlashes?.count || 0);

  // –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ü–∏—Ä—Å–æ–Ω–∞
  const correlation = calculateCorrelation(moodScores, hotFlashCounts);
  
  return {
    correlation: Math.abs(correlation),
    symptom: '–ø—Ä–∏–ª–∏–≤–∞–º–∏'
  };
};

const calculateCorrelation = (x: number[], y: number[]): number => {
  const n = x.length;
  if (n === 0) return 0;

  const sumX = x.reduce((a, b) => a + b, 0);
  const sumY = y.reduce((a, b) => a + b, 0);
  const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
  const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
  const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);

  const numerator = n * sumXY - sumX * sumY;
  const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));

  return denominator === 0 ? 0 : numerator / denominator;
};

const analyzeSymptomTrends = (symptoms: any[]): SymptomTrend[] => {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
  const trends: SymptomTrend[] = [];

  if (symptoms.length < 7) return trends;

  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const recentWeek = symptoms.slice(-7);
  const previousWeek = symptoms.slice(-14, -7);

  if (previousWeek.length === 0) return trends;

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–ª–∏–≤–æ–≤
  const recentHotFlashes = recentWeek.reduce((sum, s) => sum + (s.hotFlashes?.count || 0), 0) / recentWeek.length;
  const previousHotFlashes = previousWeek.reduce((sum, s) => sum + (s.hotFlashes?.count || 0), 0) / previousWeek.length;
  
  trends.push({
    symptom: '–ü—Ä–∏–ª–∏–≤—ã',
    current_week: Math.round(recentHotFlashes * 10) / 10,
    previous_week: Math.round(previousHotFlashes * 10) / 10,
    trend: recentHotFlashes > previousHotFlashes ? 'worsening' : 
           recentHotFlashes < previousHotFlashes ? 'improving' : 'stable',
    pattern: getSymptomPattern(recentWeek.map(s => s.hotFlashes?.count || 0)),
    recommendations: getHotFlashRecommendations(recentHotFlashes, previousHotFlashes)
  });

  // –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞
  const recentSleep = recentWeek.reduce((sum, s) => sum + (s.sleep?.quality || 3), 0) / recentWeek.length;
  const previousSleep = previousWeek.reduce((sum, s) => sum + (s.sleep?.quality || 3), 0) / previousWeek.length;
  
  trends.push({
    symptom: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞',
    current_week: Math.round(recentSleep * 10) / 10,
    previous_week: Math.round(previousSleep * 10) / 10,
    trend: recentSleep > previousSleep ? 'improving' : 
           recentSleep < previousSleep ? 'worsening' : 'stable',
    pattern: getSymptomPattern(recentWeek.map(s => s.sleep?.quality || 3)),
    recommendations: getSleepRecommendations(recentSleep, previousSleep)
  });

  return trends;
};

const getSymptomPattern = (values: number[]): string => {
  if (values.length < 3) return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö';
  
  const isIncreasing = values.slice(1).every((val, i) => val >= values[i]);
  const isDecreasing = values.slice(1).every((val, i) => val <= values[i]);
  
  if (isIncreasing) return '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ';
  if (isDecreasing) return '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ';
  
  const variance = values.reduce((sum, val) => {
    const mean = values.reduce((a, b) => a + b) / values.length;
    return sum + Math.pow(val - mean, 2);
  }, 0) / values.length;
  
  return variance > 1 ? '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ' : '–°—Ç–∞–±–∏–ª—å–Ω–æ';
};

const getHotFlashRecommendations = (recent: number, previous: number): string[] => {
  if (recent > previous) {
    return [
      '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤',
      '–ò–∑–±–µ–≥–∞–π—Ç–µ –æ—Å—Ç—Ä–æ–π –ø–∏—â–∏',
      '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
      '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –ø—Ä–∏ —É—Å–∏–ª–µ–Ω–∏–∏'
    ];
  } else if (recent < previous) {
    return [
      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é',
      '–û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç',
      '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —É—Å–ø–µ—Ö–æ–º —Å –≤—Ä–∞—á–æ–º'
    ];
  }
  return ['–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏', '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'];
};

const getSleepRecommendations = (recent: number, previous: number): string[] => {
  if (recent < previous) {
    return [
      '–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞',
      '–ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ—Ñ–µ–∏–Ω–∞ –≤–µ—á–µ—Ä–æ–º',
      '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É',
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é'
    ];
  } else if (recent > previous) {
    return [
      '–û—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞!',
      '–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏',
      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'
    ];
  }
  return ['–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–Ω–∞'];
};

const generatePredictions = (symptoms: any[], onboarding: any): Prediction[] => {
  // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
  const predictions: Prediction[] = [];

  if (symptoms.length < 5) return predictions;

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–ª–∏–≤–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  const recentHotFlashes = symptoms.slice(-3).map(s => s.hotFlashes?.count || 0);
  const avgRecent = recentHotFlashes.reduce((a, b) => a + b, 0) / recentHotFlashes.length;
  
  predictions.push({
    type: 'daily',
    target: 'hot_flashes',
    value: Math.round(avgRecent),
    confidence: 65,
    description: `–ó–∞–≤—Ç—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ ${Math.round(avgRecent)} –ø—Ä–∏–ª–∏–≤–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤`
  });

  return predictions;
};