
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useNavigate } from 'react-router-dom';
import { User, AuthContextType, LoginCredentials, RegisterData, UserRole, MultiStepRegistrationData } from '@/types/auth';
import { getRoleDashboardPath } from '@/types/roles';
import { toast } from '@/hooks/use-toast';
import { DataFlowValidator } from '@/services/dataFlowValidator';

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ credentials
const ADMIN_CREDENTIALS = {
  email: 'admin@eva-platform.com',
  password: 'EvaAdmin2025!'
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [originalUser, setOriginalUser] = useState<User | null>(null); // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
  const [isTestingRole, setIsTestingRole] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  // Check for existing user on mount and redirect based on onboarding status
  useEffect(() => {
    const savedUser = localStorage.getItem('eva-user');
    if (savedUser) {
      try {
        const parsedUser = JSON.parse(savedUser);
        setUser(parsedUser);
        
        // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (parsedUser.role === UserRole.PATIENT) {
          if (parsedUser.onboardingCompleted) {
            console.log('‚úÖ User authenticated with completed onboarding - redirecting to dashboard');
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –º–æ–∂–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ –¥–∞—à–±–æ—Ä–¥
            // –†–µ–¥–∏—Ä–µ–∫—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          } else {
            console.log('üîÑ User authenticated but onboarding not completed - need onboarding');
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ OnboardingGuard
          }
        }
      } catch (error) {
        console.error('Error parsing saved user:', error);
        localStorage.removeItem('eva-user');
      }
    }
  }, []);

  const login = async (credentials: LoginCredentials): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));

      let mockUser: User;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ credentials
      if (credentials.email === ADMIN_CREDENTIALS.email && 
          credentials.password === ADMIN_CREDENTIALS.password) {
        mockUser = {
          id: 'admin-001',
          email: ADMIN_CREDENTIALS.email,
          firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          lastName: 'Eva Platform',
          role: UserRole.ADMIN,
          createdAt: new Date()
        };
      } else {
        // Mock –æ–±—ã—á–Ω—ã–π login
        mockUser = {
          id: Math.random().toString(36).substr(2, 9),
          email: credentials.email,
          firstName: credentials.email.includes('doctor') ? '–î–æ–∫—Ç–æ—Ä' : '–ê–Ω–Ω–∞',
          lastName: credentials.email.includes('doctor') ? '–ü–µ—Ç—Ä–æ–≤–∞' : '–ò–≤–∞–Ω–æ–≤–∞',
          role: credentials.email.includes('doctor') ? UserRole.DOCTOR : UserRole.PATIENT,
          createdAt: new Date(),
          // ‚úÖ –ù–û–í–û–ï: –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
          onboardingCompleted: credentials.email.includes('completed'),
          registrationCompleted: true
        };
      }

      setUser(mockUser);
      
      // Save to localStorage if remember me is checked
      if (credentials.rememberMe) {
        localStorage.setItem('eva-user', JSON.stringify(mockUser));
      }

      toast({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        description: mockUser.role === UserRole.ADMIN ? 
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Eva!' : 
          '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
      });

      // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –†–µ–¥–∏—Ä–µ–∫—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      if (mockUser.role === UserRole.PATIENT) {
        if (mockUser.onboardingCompleted) {
          navigate('/patient/dashboard');
        } else {
          navigate('/patient/onboarding');
        }
      } else {
        const dashboardPath = getRoleDashboardPath(mockUser.role);
        navigate(dashboardPath);
      }
    } catch (error) {
      const errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É';
      setError(errorMessage);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: errorMessage,
        variant: 'destructive',
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (data: RegisterData): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2500));

      // Mock successful registration
      const mockUser: User = {
        id: Math.random().toString(36).substr(2, 9),
        email: data.email,
        firstName: data.firstName,
        lastName: data.lastName,
        role: data.role,
        createdAt: new Date(),
        // ‚úÖ –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        registrationCompleted: true,
        onboardingCompleted: false // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
      };

      setUser(mockUser);
      localStorage.setItem('eva-user', JSON.stringify(mockUser));

      toast({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva!',
        description: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      });

      // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –†–µ–¥–∏—Ä–µ–∫—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (mockUser.role === UserRole.PATIENT) {
        // –ù–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        navigate('/patient/onboarding');
      } else {
        const dashboardPath = getRoleDashboardPath(mockUser.role);
        navigate(dashboardPath);
      }
    } catch (error) {
      const errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞';
      setError(errorMessage);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: errorMessage,
        variant: 'destructive',
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const forgotPassword = async (email: string): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));

      toast({
        title: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        description: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${email}`,
      });
    } catch (error) {
      const errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞';
      setError(errorMessage);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: errorMessage,
        variant: 'destructive',
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('eva-user');
    navigate('/');
    toast({
      title: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
      description: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
  const switchRole = (newRole: UserRole) => {
    if (!user || user.role !== UserRole.ADMIN) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–æ–ª–∏',
        variant: 'destructive',
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (!isTestingRole) {
      setOriginalUser(user);
      setIsTestingRole(true);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é
    const testUser: User = {
      ...user,
      role: newRole,
      firstName: newRole === UserRole.PATIENT ? '–¢–µ—Å—Ç –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞' : 
                newRole === UserRole.DOCTOR ? '–¢–µ—Å—Ç –í—Ä–∞—á' : user.firstName,
      lastName: newRole === UserRole.PATIENT ? '–ê–¥–º–∏–Ω –†–µ–∂–∏–º' : 
               newRole === UserRole.DOCTOR ? '–ê–¥–º–∏–Ω –†–µ–∂–∏–º' : user.lastName,
    };

    setUser(testUser);

    toast({
      title: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å: ${newRole === UserRole.PATIENT ? '–ü–∞—Ü–∏–µ–Ω—Ç–∫–∞' : '–í—Ä–∞—á'}`,
      description: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    });

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
    const dashboardPath = getRoleDashboardPath(newRole);
    navigate(dashboardPath);
  };

  // Complete multi-step registration
  const completeRegistration = async (data: MultiStepRegistrationData): Promise<User> => {
    setIsLoading(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Create new user from multi-step registration data
      const newUser: User = {
        id: Math.random().toString(36).substr(2, 9),
        email: data.step1.email,
        firstName: data.firstName,
        lastName: data.lastName,
        role: UserRole.PATIENT, // Multi-step registration is for patients
        phone: data.step1.phone,
        emailVerified: data.step1.emailVerified,
        phoneVerified: data.step1.phoneVerified,
        registrationCompleted: true,
        onboardingCompleted: false,
        createdAt: new Date()
      };

      setUser(newUser);
      localStorage.setItem('eva-user', JSON.stringify(newUser));

      return newUser;
    } catch (error) {
      const errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const returnToOriginalRole = () => {
    if (!originalUser || !isTestingRole) {
      return;
    }

    setUser(originalUser);
    setIsTestingRole(false);
    setOriginalUser(null);

    toast({
      title: '–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      description: '–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω',
    });

    navigate('/admin/dashboard');
  };

  // ‚úÖ –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUser = async (updates: Partial<User>): Promise<void> => {
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    try {
      setIsLoading(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const updatedUser = { ...user, ...updates };
      setUser(updatedUser);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('eva-user', JSON.stringify(updatedUser));
      
      console.log('‚úÖ User updated successfully:', updates);
      
    } catch (error) {
      console.error('‚ùå Error updating user:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  const completeOnboarding = async (onboardingData: any): Promise<void> => {
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    try {
      setIsLoading(true);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      const onboardingUpdate: Partial<User> = {
        onboardingCompleted: true,
        onboardingData: {
          ...onboardingData,
          completedAt: new Date().toISOString()
        }
      };
      
      // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (onboardingData.formData?.geolocation) {
        console.log('üíæ Saving geolocation data from onboarding');
        localStorage.setItem('eva-user-location', JSON.stringify(onboardingData.formData.geolocation));
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      await updateUser(onboardingUpdate);
      
      toast({
        title: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
      });
      
      console.log('‚úÖ Onboarding completed successfully', {
        userId: user.id,
        hasGeolocation: !!onboardingData.formData?.geolocation,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      console.error('‚ùå Error completing onboarding:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
        variant: 'destructive',
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ data flow
  const dataFlowValidator = new DataFlowValidator();

  const validateUserDataIntegrity = () => {
    return dataFlowValidator.runFullDiagnostics();
  };

  const getDataFlowStatus = () => {
    const diagnostics = dataFlowValidator.runFullDiagnostics();
    return diagnostics.stages;
  };

  const repairDataFlow = async (): Promise<boolean> => {
    return await dataFlowValidator.repairDataFlow();
  };

  const exportUserDataDump = () => {
    return dataFlowValidator.exportUserDataDump();
  };

  const value: AuthContextType = {
    user,
    login,
    register,
    completeRegistration,
    updateUser,
    completeOnboarding,
    logout,
    forgotPassword,
    isLoading,
    error,
    switchRole,
    returnToOriginalRole,
    isTestingRole,
    validateUserDataIntegrity,
    getDataFlowStatus,
    repairDataFlow,
    exportUserDataDump,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
