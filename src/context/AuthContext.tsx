
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useNavigate } from 'react-router-dom';
import { User, AuthContextType, LoginCredentials, RegisterData, MultiStepRegistrationData } from '@/types/auth';
import { UserRole } from '@/types/roles';
import { getRoleDashboardPath } from '@/types/roles';
import { toast } from '@/hooks/use-toast';
import { DataFlowValidator } from '@/services/dataFlowValidator';
import { authService } from '@/services/authService';
import { onboardingService } from '@/services/onboardingService';
import { supabase } from '@/integrations/supabase/client';
import { AuthErrorBoundary } from '@/components/auth/AuthErrorBoundary';
import { DataBridge } from '@/services/DataBridge';

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ credentials
const ADMIN_CREDENTIALS = {
  email: 'admin@eva-platform.com',
  password: 'EvaAdmin2025!'
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [originalUser, setOriginalUser] = useState<User | null>(null); // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
  const [isTestingRole, setIsTestingRole] = useState(false);
  const [isLoading, setIsLoading] = useState(true); // ‚úÖ –ù–∞—á–∏–Ω–∞–µ–º —Å true –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const dataBridge = DataBridge.getInstance();

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–æ–≤ –∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        setIsLoading(true);
        
        // ‚úÖ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ë–≠–ö–ê–ü–û–í: –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
        const startAutoBackup = () => {
          setInterval(() => {
            const authState = {
              user: user,
              timestamp: new Date().toISOString(),
              url: window.location.pathname
            };
            localStorage.setItem('eva_auth_backup', JSON.stringify(authState));
            localStorage.setItem('eva_last_backup', Date.now().toString());
          }, 30000);
        };

        // ‚úÖ EMERGENCY RECOVERY: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        const checkEmergencyRecovery = () => {
          const lastError = localStorage.getItem('eva_last_error');
          const authBackup = localStorage.getItem('eva_auth_backup');
          
          if (lastError && authBackup) {
            try {
              const backup = JSON.parse(authBackup);
              const errorTime = parseInt(lastError);
              const backupTime = new Date(backup.timestamp).getTime();
              
              // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ –∏ –µ—Å—Ç—å –±—ç–∫–∞–ø - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
              if (Date.now() - errorTime < 300000 && backupTime > errorTime) { // 5 –º–∏–Ω—É—Ç
                console.log('üö® Emergency recovery available, backup from:', backup.timestamp);
                localStorage.setItem('eva_recovery_available', 'true');
                return backup;
              }
            } catch (e) {
              console.warn('Could not parse backup data');
            }
          }
          return null;
        };

        // ‚úÖ –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        const performSystemChecks = () => {
          const checks = {
            hasSupabaseClient: !!supabase,
            hasAuthService: !!authService,
            hasLocalStorage: typeof(Storage) !== "undefined",
            hasSessionStorage: typeof(sessionStorage) !== "undefined",
            timestamp: new Date().toISOString()
          };
          
          localStorage.setItem('eva_system_checks', JSON.stringify(checks));
          
          // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency —Ä–µ–∂–∏–º
          if (!checks.hasSupabaseClient || !checks.hasAuthService) {
            console.error('üö® Critical system components unavailable!');
            localStorage.setItem('eva_emergency_mode', 'active');
            return false;
          }
          
          return true;
        };

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const systemHealthy = performSystemChecks();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        const recoveryData = checkEmergencyRecovery();
        
        if (!systemHealthy) {
          // EMERGENCY MODE: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback
          console.log('üö® Activating emergency mode');
          const emergencyUser = {
            id: 'emergency-' + Date.now(),
            email: 'emergency@user.local',
            firstName: 'Emergency',
            lastName: 'User',
            role: UserRole.PATIENT,
            createdAt: new Date(),
            registrationCompleted: true,
            onboardingCompleted: false
          } as User;
          setUser(emergencyUser);
          setIsLoading(false);
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        const { user: currentUser } = await authService.getCurrentUser();
        
        if (currentUser) {
          setUser(currentUser);
          console.log('‚úÖ User authenticated via Supabase:', currentUser.email);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
          try {
            await onboardingService.migrateFromLocalStorage(currentUser.id);
          } catch (migrationError) {
            console.warn('Migration warning:', migrationError);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
          }
          
        } else if (recoveryData?.user) {
          // RECOVERY MODE: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
          console.log('üîÑ Restoring from emergency backup');
          setUser(recoveryData.user);
          localStorage.removeItem('eva_last_error');
          
        } else {
          // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –º–∏–≥—Ä–∞—Ü–∏–∏
          const localUser = localStorage.getItem('eva_user_data');
          const evaUser = localStorage.getItem('eva-user');
          
          if (localUser || evaUser) {
            try {
              const userData = JSON.parse(localUser || evaUser || '{}');
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
              const tempUser = {
                id: userData.id || 'temp-' + Date.now(),
                email: userData.email,
                firstName: userData.first_name || userData.firstName || '',
                lastName: userData.last_name || userData.lastName || '',
                role: (userData.role as UserRole) || UserRole.PATIENT,
                createdAt: new Date(userData.createdAt || Date.now()),
                registrationCompleted: userData.registrationCompleted || false,
                onboardingCompleted: userData.onboarding_completed || userData.onboardingCompleted || false
              } as User;
              setUser(tempUser);
              console.log('üîÑ Using localStorage user data for recovery');
            } catch (error) {
              console.error('Error parsing localStorage:', error);
              localStorage.removeItem('eva_user_data');
              localStorage.removeItem('eva-user');
            }
          }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–±—ç–∫–∞–ø –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        startAutoBackup();
        
      } catch (error) {
        console.error('üö® Auth initialization error:', error);
        localStorage.setItem('eva_last_error', Date.now().toString());
        
        // CRITICAL FALLBACK: –î–∞–∂–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ–≤–∞–ª–µ —Å–æ–∑–¥–∞–µ–º emergency –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const emergencyUser = {
          id: 'critical-fallback-' + Date.now(),
          email: 'fallback@user.local',
          firstName: 'Recovery',
          lastName: 'Mode',
          role: UserRole.PATIENT,
          createdAt: new Date(),
          registrationCompleted: true,
          onboardingCompleted: false
        } as User;
        setUser(emergencyUser);
        
      } finally {
        setIsLoading(false);
      }
    };

    initializeAuth();

    // ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π
    const { data: { subscription } } = authService.onAuthStateChange(async (authenticatedUser) => {
      if (authenticatedUser && authenticatedUser.role === UserRole.PATIENT) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const { migrateOnboardingData } = await import('@/utils/onboardingMigration');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        const migrationResult = migrateOnboardingData();
        
        if (migrationResult.migrationPerformed && migrationResult.onboardingCompleted) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          const updatedUser = {
            ...authenticatedUser,
            onboardingCompleted: true,
            onboardingData: migrationResult.onboardingData
          };
          
          setUser(updatedUser);
          console.log('‚úÖ Auth state changed with onboarding migration');
        } else {
          setUser(authenticatedUser);
          console.log('‚úÖ Auth state changed - user logged in:', authenticatedUser.email);
        }
      } else {
        setUser(authenticatedUser);
        if (authenticatedUser) {
          console.log('‚úÖ Auth state changed - user logged in:', authenticatedUser.email);
        } else {
          console.log('üîÑ Auth state changed - user logged out');
        }
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const login = async (credentials: LoginCredentials): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ credentials –¥–ª—è –¥–µ–º–æ
      if (credentials.email === ADMIN_CREDENTIALS.email && 
          credentials.password === ADMIN_CREDENTIALS.password) {
        const mockUser: User = {
          id: 'admin-001',
          email: ADMIN_CREDENTIALS.email,
          firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          lastName: 'Eva Platform',
          role: UserRole.ADMIN,
          createdAt: new Date(),
          registrationCompleted: true,
          onboardingCompleted: true
        };

        setUser(mockUser);
        
        if (credentials.rememberMe) {
          localStorage.setItem('eva-user', JSON.stringify(mockUser));
        }

        toast({
          title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Eva!',
        });

        navigate('/admin/dashboard');
        return;
      }

      // ‚úÖ –û–°–ù–û–í–ù–û–ô –ü–û–¢–û–ö: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
      const { user: authenticatedUser, error: authError } = await authService.login(credentials);

      if (authError) {
        setError(authError);
        toast({
          title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
          description: authError,
          variant: 'destructive',
        });
        throw new Error(authError);
      }

      if (!authenticatedUser) {
        const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É';
        setError(errorMessage);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: errorMessage,
          variant: 'destructive',
        });
        throw new Error(errorMessage);
      }

      setUser(authenticatedUser);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (credentials.rememberMe) {
        localStorage.setItem('eva-user', JSON.stringify(authenticatedUser));
      }

      toast({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        description: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
      });

      // ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      if (authenticatedUser.role === UserRole.PATIENT) {
        if (authenticatedUser.onboardingCompleted) {
          navigate('/patient/dashboard');
        } else {
          navigate('/patient/onboarding');
        }
      } else {
        const dashboardPath = getRoleDashboardPath(authenticatedUser.role);
        navigate(dashboardPath);
      }

    } catch (error: any) {
      console.error('Login error:', error);
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (data: RegisterData): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // ‚úÖ –ù–û–í–û–ï: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
      const { user: newUser, error: authError } = await authService.register(data);

      if (authError) {
        setError(authError);
        toast({
          title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          description: authError,
          variant: 'destructive',
        });
        throw new Error(authError);
      }

      if (!newUser) {
        const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
        setError(errorMessage);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: errorMessage,
          variant: 'destructive',
        });
        throw new Error(errorMessage);
      }

      setUser(newUser);
      localStorage.setItem('eva-user', JSON.stringify(newUser));

      toast({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bloom!',
        description: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      });

      // ‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏
      if (newUser.role === UserRole.PATIENT) {
        navigate('/patient/onboarding');
      } else {
        const dashboardPath = getRoleDashboardPath(newUser.role);
        navigate(dashboardPath);
      }

    } catch (error: any) {
      console.error('Registration error:', error);
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ
    } finally {
      setIsLoading(false);
    }
  };

  const forgotPassword = async (email: string): Promise<void> => {
    setIsLoading(true);
    setError(null);

    try {
      // ‚úÖ –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Supabase
      const { error: resetError } = await authService.resetPassword(email);

      if (resetError) {
        setError(resetError);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: resetError,
          variant: 'destructive',
        });
        throw new Error(resetError);
      }

      toast({
        title: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        description: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${email}`,
      });

    } catch (error: any) {
      console.error('Forgot password error:', error);
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ
    } finally {
      setIsLoading(false);
    }
  };

  const updatePassword = async (newPassword: string, accessToken?: string, refreshToken?: string): Promise<{ user: User | null }> => {
    setIsLoading(true);
    setError(null);

    try {
      const { error: updateError } = await authService.updatePassword(newPassword, accessToken, refreshToken);

      if (updateError) {
        setError(updateError);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: updateError,
          variant: 'destructive',
        });
        throw new Error(updateError);
      }

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { user: updatedUser } = await authService.getCurrentUser();
      
      if (updatedUser) {
        setUser(updatedUser);
      }

      return { user: updatedUser };

    } catch (error: any) {
      console.error('Update password error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async () => {
    try {
      // ‚úÖ –ù–û–í–û–ï: –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
      const { error } = await authService.logout();
      
      if (error) {
        console.error('Logout error:', error);
      }

      setUser(null);
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ localStorage –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      localStorage.removeItem('eva-user');
      localStorage.removeItem('eva_user_data');
      localStorage.removeItem('eva_onboarding_data');
      navigate('/');
      
      toast({
        title: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
        description: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
      });

    } catch (error) {
      console.error('Logout error:', error);
      // –í—Å—ë —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUser(null);
      localStorage.removeItem('eva-user');
      localStorage.removeItem('eva_user_data');
      localStorage.removeItem('eva_onboarding_data');
      navigate('/');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
  const switchRole = (newRole: UserRole) => {
    if (!user || user.role !== UserRole.ADMIN) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–æ–ª–∏',
        variant: 'destructive',
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (!isTestingRole) {
      setOriginalUser(user);
      setIsTestingRole(true);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é
    const testUser: User = {
      ...user,
      role: newRole,
      firstName: newRole === UserRole.PATIENT ? '–¢–µ—Å—Ç –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞' : 
                newRole === UserRole.DOCTOR ? '–¢–µ—Å—Ç –í—Ä–∞—á' : user.firstName,
      lastName: newRole === UserRole.PATIENT ? '–ê–¥–º–∏–Ω –†–µ–∂–∏–º' : 
               newRole === UserRole.DOCTOR ? '–ê–¥–º–∏–Ω –†–µ–∂–∏–º' : user.lastName,
    };

    setUser(testUser);

    toast({
      title: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å: ${newRole === UserRole.PATIENT ? '–ü–∞—Ü–∏–µ–Ω—Ç–∫–∞' : '–í—Ä–∞—á'}`,
      description: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    });

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
    const dashboardPath = getRoleDashboardPath(newRole);
    navigate(dashboardPath);
  };

  // Complete multi-step registration
  const completeRegistration = async (data: MultiStepRegistrationData): Promise<User> => {
    setIsLoading(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Create new user from multi-step registration data
      const newUser: User = {
        id: Math.random().toString(36).substr(2, 9),
        email: data.step1.email,
        firstName: data.firstName,
        lastName: data.lastName,
        role: UserRole.PATIENT, // Multi-step registration is for patients
        phone: data.step1.phone,
        emailVerified: data.step1.emailVerified,
        phoneVerified: data.step1.phoneVerified,
        registrationCompleted: true,
        onboardingCompleted: false,
        createdAt: new Date()
      };

      setUser(newUser);
      localStorage.setItem('eva-user', JSON.stringify(newUser));

      return newUser;
    } catch (error) {
      const errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const returnToOriginalRole = () => {
    if (!originalUser || !isTestingRole) {
      return;
    }

    setUser(originalUser);
    setIsTestingRole(false);
    setOriginalUser(null);

    toast({
      title: '–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      description: '–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω',
    });

    navigate('/admin/dashboard');
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const updateUser = (updates: Partial<User>) => {
    if (!user) {
      console.warn('‚ö†Ô∏è updateUser: No authenticated user');
      return;
    }

    console.log('üîÑ Updating user with:', updates);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const updatedUser = { ...user, ...updates };
    setUser(updatedUser);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º localStorage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    localStorage.setItem('eva-user', JSON.stringify(updatedUser));
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
    if (user.id && !user.id.startsWith('temp-')) {
      authService.updateProfile(user.id, updates).catch(error => {
        console.error('‚ùå Failed to sync user update to Supabase:', error);
      });
    }
    
    console.log('‚úÖ User updated locally:', updatedUser);
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const saveUserData = async (key: string, data: any) => {
    try {
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userKey = key.includes('_') ? key : `${key}_${user.id}`;
      
      await dataBridge.saveData(userKey, data);
      
      // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (key === 'user_data' || key === 'eva_user_data') {
        setUser(prev => ({ ...prev, ...data }));
      }
      
      console.log(`‚úÖ AuthContext: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${key}`);
    } catch (error) {
      console.error(`‚ùå AuthContext: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, error);
      throw error;
    }
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserData = async (key: string) => {
    try {
      if (!user) {
        console.log('AuthContext: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return null;
      }

      const userKey = key.includes('_') ? key : `${key}_${user.id}`;
      const data = await dataBridge.loadData(userKey);
      
      console.log(`üì• AuthContext: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${key}`);
      return data;
    } catch (error) {
      console.error(`‚ùå AuthContext: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, error);
      return null;
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserDataSummary = async () => {
    try {
      if (!user) return null;
      
      return await dataBridge.getUserDataSummary(user.id);
    } catch (error) {
      console.error('‚ùå AuthContext: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
      return null;
    }
  };

  // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Supabase
  const completeOnboarding = async (onboardingData: any): Promise<void> => {
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    try {
      setIsLoading(true);
      
      // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –º–µ–Ω–æ–ø–∞—É–∑—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      let analysis = null;
      if (onboardingData.phaseResult && onboardingData.recommendations) {
        analysis = {
          menopause_phase: onboardingData.phaseResult.phase,
          phase_confidence: onboardingData.phaseResult.confidence || 0.8,
          risk_factors: onboardingData.phaseResult.riskFactors || {},
          recommendations: onboardingData.recommendations
        };
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ Supabase
      const { error } = await onboardingService.completeOnboarding(
        user.id, 
        onboardingData.formData || {}, 
        analysis || undefined
      );
      
      if (error) {
        throw new Error(error);
      }
      
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (onboardingData.formData?.geolocation) {
        console.log('üíæ Saving geolocation data from onboarding');
        localStorage.setItem('eva-user-location', JSON.stringify(onboardingData.formData.geolocation));
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const onboardingUpdate: Partial<User> = {
        onboardingCompleted: true,
        onboardingData: {
          ...onboardingData,
          completedAt: new Date().toISOString()
        }
      };
      
      const updatedUser = { ...user, ...onboardingUpdate };
      setUser(updatedUser);
      localStorage.setItem('eva-user', JSON.stringify(updatedUser));
      
      toast({
        title: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bloom! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
      });
      
      console.log('‚úÖ Onboarding completed successfully', {
        userId: user.id,
        hasGeolocation: !!onboardingData.formData?.geolocation,
        hasAnalysis: !!analysis,
        timestamp: new Date().toISOString()
      });
      
    } catch (error: any) {
      console.error('‚ùå Error completing onboarding:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
        variant: 'destructive',
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ data flow
  const dataFlowValidator = new DataFlowValidator();

  const validateUserDataIntegrity = () => {
    return dataFlowValidator.runFullDiagnostics();
  };

  const getDataFlowStatus = () => {
    const diagnostics = dataFlowValidator.runFullDiagnostics();
    return diagnostics.stages;
  };

  const repairDataFlow = async (): Promise<boolean> => {
    return await dataFlowValidator.repairDataFlow();
  };

  const exportUserDataDump = () => {
    return dataFlowValidator.exportUserDataDump();
  };

  const value: AuthContextType = {
    user,
    login,
    register,
    completeRegistration,
    updateUser,
    completeOnboarding,
    logout,
    forgotPassword,
    updatePassword,
    isLoading,
    error,
    switchRole,
    returnToOriginalRole,
    isTestingRole,
    // DataBridge –º–µ—Ç–æ–¥—ã
    saveUserData,
    loadUserData,
    getUserDataSummary,
    validateUserDataIntegrity,
    getDataFlowStatus,
    repairDataFlow,
    exportUserDataDump,
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
    needsMigration: user?.id?.startsWith('temp-') || false,
    isAuthenticated: !!user
  };

  return (
    <AuthErrorBoundary>
      <AuthContext.Provider value={value}>
        {children}
      </AuthContext.Provider>
    </AuthErrorBoundary>
  );
};
