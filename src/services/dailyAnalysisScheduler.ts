import { supabase } from '@/integrations/supabase/client';

export interface DailyAnalysisScheduler {
  scheduleUserAnalysis: (userId: string) => Promise<void>;
  runDailyAnalysisForAllUsers: () => Promise<void>;
  initializeDailySchedule: () => void;
}

class DailyAnalysisSchedulerService implements DailyAnalysisScheduler {
  private isInitialized = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  initializeDailySchedule(): void {
    if (this.isInitialized) return;
    
    console.log('üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.checkAndRunTodaysAnalysis();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 6:00
    this.scheduleDailyExecution();
    
    this.isInitialized = true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
   */
  private async checkAndRunTodaysAnalysis(): Promise<void> {
    try {
      const today = new Date().toISOString().split('T')[0];
      const currentUser = (await supabase.auth.getUser()).data.user;
      
      if (!currentUser) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–µ–≥–æ–¥–Ω—è
      const { data: existingAnalysis } = await supabase
        .from('ai_analysis_sessions')
        .select('id')
        .eq('user_id', currentUser.id)
        .eq('session_type', 'daily_health_analysis')
        .eq('analysis_date', today)
        .single();

      if (!existingAnalysis) {
        console.log('üß† –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...');
        await this.scheduleUserAnalysis(currentUser.id);
      } else {
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ 6:00 —É—Ç—Ä–∞
   */
  private scheduleDailyExecution(): void {
    const now = new Date();
    const nextRun = new Date();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 6:00 —É—Ç—Ä–∞
    nextRun.setHours(6, 0, 0, 0);
    
    // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 6 —É—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (nextRun <= now) {
      nextRun.setDate(nextRun.getDate() + 1);
    }
    
    const timeUntilNextRun = nextRun.getTime() - now.getTime();
    
    console.log(`‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${nextRun.toLocaleString()}`);
    
    setTimeout(() => {
      this.runDailyAnalysisForAllUsers();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      setInterval(() => {
        this.runDailyAnalysisForAllUsers();
      }, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
      
    }, timeUntilNextRun);
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async scheduleUserAnalysis(userId: string): Promise<void> {
    try {
      console.log(`üî¨ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      
      // –í—ã–∑—ã–≤–∞–µ–º edge —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const { data, error } = await supabase.functions.invoke('daily-health-analysis', {
        body: { 
          userId, 
          analysisDate: new Date().toISOString().split('T')[0] 
        }
      });

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        return;
      }

      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, data);

      // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Ü–∏–∫–ª–∞ —Å Claude
      await this.updateCycleCorrelations(userId);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é Claude
   */
  private async updateCycleCorrelations(userId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ Supabase
      const cycleEntries = JSON.parse(localStorage.getItem(`cycle_entries_${userId}`) || '[]');
      const symptomEntries = JSON.parse(localStorage.getItem(`symptom_entries_${userId}`) || '[]');
      const nutritionEntries = JSON.parse(localStorage.getItem(`nutrition_entries_${userId}`) || '[]');
      const activityEntries = JSON.parse(localStorage.getItem(`activity_entries_${userId}`) || '[]');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
      const { data: supabaseSymptoms } = await supabase
        .from('symptom_entries')
        .select('*')
        .eq('user_id', userId)
        .gte('entry_date', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0])
        .order('entry_date', { ascending: false });

      const { data: supabaseNutrition } = await supabase
        .from('nutrition_entries')
        .select('*')
        .eq('user_id', userId)
        .gte('date', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0])
        .order('date', { ascending: false });

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const allSymptoms = [...symptomEntries, ...(supabaseSymptoms || [])];
      const allNutrition = [...nutritionEntries, ...(supabaseNutrition || [])];

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π Claude
      const { data: correlationData, error: correlationError } = await supabase.functions.invoke('claude-cycle-analysis', {
        body: {
          cycleEntries,
          symptomEntries: allSymptoms,
          nutritionEntries: allNutrition,
          activityEntries,
          userProfile: this.getUserProfile(userId)
        }
      });

      if (correlationError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π Claude:', correlationError);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      if (correlationData && correlationData.success) {
        const analysisResults = {
          cycle: correlationData.analysis.cycle_analysis,
          nutrition: correlationData.analysis.nutrition_correlations,
          activity: correlationData.analysis.activity_correlations,
          insights: correlationData.analysis.integrated_insights,
          recommendations: correlationData.analysis.personalized_recommendations,
          lastUpdated: new Date().toISOString()
        };

        localStorage.setItem(`daily_cycle_analysis_${userId}`, JSON.stringify(analysisResults));
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Ü–∏–∫–ª–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getUserProfile(userId: string) {
    try {
      const onboardingData = localStorage.getItem('bloom-onboarding-data');
      if (onboardingData) {
        const data = JSON.parse(onboardingData);
        return {
          age: data.age,
          menopausePhase: data.menopausePhase,
          symptoms: data.symptoms,
          goals: data.goals,
          medicalHistory: data.medicalHistory
        };
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    return null;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async runDailyAnalysisForAllUsers(): Promise<void> {
    try {
      console.log('üåÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentUser = (await supabase.auth.getUser()).data.user;
      
      if (currentUser) {
        await this.scheduleUserAnalysis(currentUser.id);
      }
      
      console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getLatestAnalysisResults(userId: string): Promise<any> {
    try {
      const cachedResults = localStorage.getItem(`daily_cycle_analysis_${userId}`);
      if (cachedResults) {
        const results = JSON.parse(cachedResults);
        const lastUpdated = new Date(results.lastUpdated);
        const hoursAgo = (Date.now() - lastUpdated.getTime()) / (1000 * 60 * 60);
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if (hoursAgo < 24) {
          return results;
        }
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      await this.scheduleUserAnalysis(userId);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ null
      return cachedResults ? JSON.parse(cachedResults) : null;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const dailyAnalysisScheduler = new DailyAnalysisSchedulerService();