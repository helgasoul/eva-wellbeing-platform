interface VerificationResponse {
  success: boolean;
  message: string;
  error?: string;
}

interface VerificationService {
  sendEmailCode(email: string): Promise<VerificationResponse>;
  verifyEmailCode(email: string, code: string): Promise<VerificationResponse>;
  sendPhoneCode(phone: string): Promise<VerificationResponse>;
  verifyPhoneCode(phone: string, code: string): Promise<VerificationResponse>;
}

// –î–µ–º–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
class MockVerificationService implements VerificationService {
  private sentCodes: Record<string, string> = {};

  async sendEmailCode(email: string): Promise<VerificationResponse> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    this.sentCodes[email] = code;

    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ email-—Å–µ—Ä–≤–∏—Å–∞
    console.log(`üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ${email}: ${code}`);

    return {
      success: true,
      message: `–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`
    };
  }

  async verifyEmailCode(email: string, code: string): Promise<VerificationResponse> {
    await new Promise(resolve => setTimeout(resolve, 500));

    const sentCode = this.sentCodes[email];
    
    if (!sentCode) {
      return {
        success: false,
        message: '–ö–æ–¥ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        error: 'CODE_NOT_SENT'
      };
    }

    if (sentCode === code || code === '123456') { // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      delete this.sentCodes[email];
      
      return {
        success: true,
        message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      };
    }

    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      error: 'INVALID_CODE'
    };
  }

  async sendPhoneCode(phone: string): Promise<VerificationResponse> {
    await new Promise(resolve => setTimeout(resolve, 1000));

    const code = Math.floor(1000 + Math.random() * 9000).toString();
    this.sentCodes[phone] = code;

    console.log(`üì± SMS –∫–æ–¥ –¥–ª—è ${phone}: ${code}`);

    return {
      success: true,
      message: `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`
    };
  }

  async verifyPhoneCode(phone: string, code: string): Promise<VerificationResponse> {
    await new Promise(resolve => setTimeout(resolve, 500));

    const sentCode = this.sentCodes[phone];
    
    if (!sentCode) {
      return {
        success: false,
        message: '–ö–æ–¥ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        error: 'CODE_NOT_SENT'
      };
    }

    if (sentCode === code || code === '1234') { // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
      delete this.sentCodes[phone];
      
      return {
        success: true,
        message: '–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      };
    }

    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      error: 'INVALID_CODE'
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const verificationService = new MockVerificationService();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export const isValidPhone = (phone: string): boolean => {
  const phoneRegex = /^\+?[1-9]\d{10,14}$/;
  return phoneRegex.test(phone.replace(/\s/g, ''));
};

export const formatPhone = (phone: string): string => {
  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.startsWith('8') && cleaned.length === 11) {
    return '+7' + cleaned.slice(1);
  }
  if (cleaned.startsWith('7') && cleaned.length === 11) {
    return '+' + cleaned;
  }
  return phone;
};