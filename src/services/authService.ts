// ‚úÖ –≠–¢–ê–ü 4: –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Supabase + Audit Logging
import { supabase } from '@/integrations/supabase/client';
import { User as SupabaseUser } from '@supabase/supabase-js';
import { User, LoginCredentials, RegisterData } from '@/types/auth';
import { UserRole } from '@/types/roles';
import { authAuditService } from './authAuditService';
import { rateLimitService } from './rateLimitService';
import { passwordPolicyService } from './passwordPolicyService';

export interface AuthResponse {
  user: User | null;
  error: string | null;
  rateLimited?: boolean;
  retryAfter?: number;
}

class AuthService {
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Supabase User –≤ –Ω–∞—à User —Ç–∏–ø
  private transformSupabaseUser(supabaseUser: SupabaseUser, profileData?: any): User {
    return {
      id: supabaseUser.id,
      email: supabaseUser.email!,
      firstName: profileData?.first_name || '',
      lastName: profileData?.last_name || '',
      role: (profileData?.user_role as UserRole) || UserRole.PATIENT,
      phone: profileData?.phone,
      emailVerified: supabaseUser.email_confirmed_at ? true : false,
      phoneVerified: profileData?.phone_verified || false,
      registrationCompleted: profileData?.registration_completed || false,
      onboardingCompleted: profileData?.onboarding_completed || false,
      avatar: profileData?.avatar_url,
      createdAt: new Date(supabaseUser.created_at)
    };
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(userData: RegisterData): Promise<AuthResponse> {
    try {
      console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è:', userData.email);

      // Validate password against policy
      const passwordValidation = await passwordPolicyService.validatePassword(userData.password, {
        email: userData.email,
        firstName: userData.firstName,
        lastName: userData.lastName
      });

      if (!passwordValidation.isValid) {
        return {
          user: null,
          error: passwordValidation.errors[0] || '–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
      const rateLimitResult = await rateLimitService.checkRateLimit('register', userData.email);
      if (!rateLimitResult.allowed) {
        await authAuditService.logRegistrationAttempt(
          userData.email,
          false,
          'Rate limit exceeded',
          undefined,
          userData.role
        );
        return {
          user: null,
          error: `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${Math.ceil(rateLimitResult.retryAfter! / 60)} –º–∏–Ω—É—Ç.`,
          rateLimited: true,
          retryAfter: rateLimitResult.retryAfter
        };
      }

      const { data, error } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          emailRedirectTo: `${window.location.origin}/`,
          data: {
            first_name: userData.firstName,
            last_name: userData.lastName,
            role: userData.role,
          },
        },
      });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await authAuditService.logRegistrationAttempt(
          userData.email, 
          false, 
          error.message, 
          undefined, 
          userData.role
        );
        return { user: null, error: error.message };
      }

      if (!data.user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω');
        await authAuditService.logRegistrationAttempt(
          userData.email, 
          false, 
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω', 
          undefined, 
          userData.role
        );
        return { user: null, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
      }

      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, ID:', data.user.id);

      // –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
      // –ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000));

      const { data: profileData } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', data.user.id)
        .maybeSingle();

      const user = this.transformSupabaseUser(data.user, {
        first_name: profileData?.first_name || userData.firstName,
        last_name: profileData?.last_name || userData.lastName,
        role: profileData?.role || userData.role,
        onboarding_completed: profileData?.onboarding_completed || false,
        registration_completed: true
      });

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', user.email);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º rate limit
      await authAuditService.logRegistrationAttempt(
        user.email, 
        true, 
        undefined, 
        user.id, 
        user.role
      );
      await rateLimitService.recordAttempt('register', true, userData.email);
      
      return { user, error: null };

    } catch (error: any) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      await authAuditService.logRegistrationAttempt(
        userData.email, 
        false, 
        error.message
      );
      return { user: null, error: error.message };
    }
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –¥–ª—è:', credentials.email);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
      const rateLimitResult = await rateLimitService.checkRateLimit('login', credentials.email);
      if (!rateLimitResult.allowed) {
        await authAuditService.logLoginAttempt(credentials.email, false, 'Rate limit exceeded');
        return {
          user: null,
          error: `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${Math.ceil(rateLimitResult.retryAfter! / 60)} –º–∏–Ω—É—Ç.`,
          rateLimited: true,
          retryAfter: rateLimitResult.retryAfter
        };
      }
      
      // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email: credentials.email,
        password: credentials.password,
      });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase:', error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
        await authAuditService.logLoginAttempt(credentials.email, false, error.message);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (error.message === 'Invalid login credentials') {
          return { 
            user: null, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å.' 
          };
        }
        
        return { 
          user: null, 
          error: `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}` 
        };
      }

      if (!data.user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        await authAuditService.logLoginAttempt(credentials.email, false, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        return { 
          user: null, 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        };
      }

      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user.id);

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const { data: profileData, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', data.user.id)
        .maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle –≤–º–µ—Å—Ç–æ single –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

      if (profileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
        return { 
          user: null, 
          error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${profileError.message}` 
        };
      }

      let finalProfileData = profileData;

      if (!profileData) {
        console.error('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const { data: newProfile, error: createError } = await supabase
          .from('user_profiles')
          .insert({
            id: data.user.id,
            email: data.user.email,
            first_name: data.user.user_metadata?.first_name || '',
            last_name: data.user.user_metadata?.last_name || '',
            role: data.user.user_metadata?.role || 'patient',
            onboarding_completed: false
          })
          .select()
          .single();

        if (createError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:', createError);
          return { 
            user: null, 
            error: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' 
          };
        }

        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', newProfile);
        finalProfileData = newProfile;
      }

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', finalProfileData);

      // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = this.transformSupabaseUser(data.user, finalProfileData);

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!user.registrationCompleted && user.email && user.firstName) {
        console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        await this.updateProfile(user.id, { registrationCompleted: true });
        user.registrationCompleted = true;
      }

      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º rate limit
      await authAuditService.logLoginAttempt(credentials.email, true, undefined, user.id);
      await rateLimitService.recordAttempt('login', true, credentials.email);
      
      return { user, error: null };

    } catch (error: any) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞:', error);
      await authAuditService.logLoginAttempt(credentials.email, false, error.message);
      return { 
        user: null, 
        error: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}` 
      };
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<{ error: string | null }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const { data: { session } } = await supabase.auth.getSession();
      const userId = session?.user?.id;
      const email = session?.user?.email;
      
      const { error } = await supabase.auth.signOut();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
      if (userId) {
        await authAuditService.logLogout(userId, email);
      }
      
      return { error: error?.message || null };
    } catch (error: any) {
      console.error('Logout error:', error);
      return { error: error.message || '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser(): Promise<AuthResponse> {
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();

      if (sessionError) {
        return { user: null, error: sessionError.message };
      }

      if (!session?.user) {
        return { user: null, error: null };
      }

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const { data: profileData, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', session.user.id)
        .single();

      if (profileError) {
        console.error('Profile fetch error:', profileError);
        return { user: null, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è' };
      }

      // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = this.transformSupabaseUser(session.user, profileData);

      return { user, error: null };

    } catch (error: any) {
      console.error('Get current user error:', error);
      return { user: null, error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateProfile(userId: string, updates: Partial<User>): Promise<{ error: string | null }> {
    try {
      const profileUpdates: any = {};

      if (updates.firstName) profileUpdates.first_name = updates.firstName;
      if (updates.lastName) profileUpdates.last_name = updates.lastName;
      if (updates.phone) profileUpdates.phone = updates.phone;
      if (updates.avatar) profileUpdates.avatar_url = updates.avatar;
      if (updates.onboardingCompleted !== undefined) {
        profileUpdates.onboarding_completed = updates.onboardingCompleted;
      }
      if (updates.registrationCompleted !== undefined) {
        profileUpdates.registration_completed = updates.registrationCompleted;
      }

      const { error } = await supabase
        .from('user_profiles')
        .update(profileUpdates)
        .eq('id', userId);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const changedFields = Object.keys(updates);
      await authAuditService.logProfileUpdate(
        userId, 
        changedFields, 
        !error, 
        error?.message
      );

      return { error: error?.message || null };

    } catch (error: any) {
      console.error('Update profile error:', error);
      return { error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' };
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  async resetPassword(email: string): Promise<{ error: string | null; rateLimited?: boolean; retryAfter?: number }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
      const rateLimitResult = await rateLimitService.checkRateLimit('passwordReset', email);
      if (!rateLimitResult.allowed) {
        await authAuditService.logPasswordReset(email, false, 'Rate limit exceeded');
        return {
          error: `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${Math.ceil(rateLimitResult.retryAfter! / 60)} –º–∏–Ω—É—Ç.`,
          rateLimited: true,
          retryAfter: rateLimitResult.retryAfter
        };
      }

      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º rate limit
      await authAuditService.logPasswordReset(email, !error, error?.message);
      await rateLimitService.recordAttempt('passwordReset', !error, email);

      return { error: error?.message || null };

    } catch (error: any) {
      console.error('Reset password error:', error);
      await authAuditService.logPasswordReset(email, false, error.message);
      return { error: error.message || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  async updatePassword(newPassword: string, accessToken?: string, refreshToken?: string): Promise<{ error: string | null }> {
    try {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã (–∏–∑ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
      if (accessToken && refreshToken) {
        const { error: sessionError } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken
        });

        if (sessionError) {
          return { error: sessionError.message };
        }
      }

      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const { data: { session } } = await supabase.auth.getSession();
      const userId = session?.user?.id;
      
      if (userId) {
        await authAuditService.logPasswordUpdate(userId, !error, error?.message);
      }

      return { error: error?.message || null };

    } catch (error: any) {
      console.error('Update password error:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
      const { data: { session } } = await supabase.auth.getSession();
      const userId = session?.user?.id;
      if (userId) {
        await authAuditService.logPasswordUpdate(userId, false, error.message);
      }
      
      return { error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' };
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  onAuthStateChange(callback: (user: User | null) => void) {
    return supabase.auth.onAuthStateChange(async (event, session) => {
      if (session?.user) {
        const { user } = await this.getCurrentUser();
        callback(user);
      } else {
        callback(null);
      }
    });
  }
}

export const authService = new AuthService();