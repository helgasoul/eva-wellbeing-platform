import { BasicRecommendation, BasicRecommendationContext } from './basicRecommendationEngine';

interface AdvancedRecommendation extends BasicRecommendation {
  conditions: RecommendationCondition[];
  targetAudience: string[];
  effectiveness: number;
  category: 'meal' | 'hydration' | 'symptom' | 'deficiency' | 'lifestyle' | 'weather';
  timeRestrictions?: {
    minHour: number;
    maxHour: number;
  };
}

interface RecommendationCondition {
  type: 'time' | 'symptom' | 'meal_gap' | 'hydration' | 'weather' | 'subscription';
  value: any;
  operator: 'equals' | 'greater_than' | 'less_than' | 'contains';
}

interface AdvancedRecommendationContext extends BasicRecommendationContext {
  userProfile: {
    age: number;
    menopausePhase: string;
    subscriptionTier: string;
    deficiencies: string[];
  };
  weatherData?: {
    temperature: number;
    humidity: number;
  };
  recentSymptoms: Array<{
    name: string;
    severity: number;
    timestamp: Date;
  }>;
}

export class AdvancedRecommendationEngine {
  private static advancedRules: AdvancedRecommendation[] = [
    {
      id: 'menopause_specific_breakfast',
      conditions: [
        { type: 'time', value: { hour: 8 }, operator: 'greater_than' },
        { type: 'symptom', value: '–ü—Ä–∏–ª–∏–≤—ã', operator: 'contains' }
      ],
      targetAudience: ['perimenopause', 'menopause'],
      effectiveness: 85,
      category: 'meal',
      timeRestrictions: { minHour: 7, maxHour: 11 },
      type: 'meal_reminder',
      priority: 'high',
      title: '–ó–∞–≤—Ç—Ä–∞–∫ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–∏–ª–∏–≤–æ–≤',
      message: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –ø–æ–º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –ø—Ä–∏–ª–∏–≤—ã',
      recommendation: '–û–º–ª–µ—Ç —Å —Å–µ–º–µ–Ω–∞–º–∏ –ª—å–Ω–∞ –±–æ–≥–∞—Ç —Ñ–∏—Ç–æ—ç—Å—Ç—Ä–æ–≥–µ–Ω–∞–º–∏ –∏ —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–∏–ª–∏–≤—ã –Ω–∞ 30%',
      action: '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å',
      icon: 'ü•ó',
      benefit: '–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–∏–≤–æ–≤ –Ω–∞ 30%',
      triggerTime: new Date()
    },

    {
      id: 'premium_deficiency_alert',
      conditions: [
        { type: 'subscription', value: 'plus', operator: 'equals' }
      ],
      targetAudience: ['plus', 'optimum'],
      effectiveness: 92,
      category: 'deficiency',
      type: 'symptom_tip',
      priority: 'high',
      title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤',
      message: '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–µ—Ñ–∏—Ü–∏—Ç—ã',
      recommendation: '–í–∏—Ç–∞–º–∏–Ω D –Ω–∏–∂–µ –Ω–æ—Ä–º—ã - –¥–æ–±–∞–≤—å—Ç–µ –∂–∏—Ä–Ω—É—é —Ä—ã–±—É 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      action: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω',
      icon: 'üß™',
      benefit: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      triggerTime: new Date()
    },

    {
      id: 'weather_adaptation',
      conditions: [
        { type: 'weather', value: { humidity: 60 }, operator: 'greater_than' }
      ],
      targetAudience: ['all'],
      effectiveness: 70,
      category: 'weather',
      type: 'symptom_tip',
      priority: 'medium',
      title: '–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –ø–æ–≥–æ–¥–µ',
      message: '–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã',
      recommendation: '–ü–µ–π—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é –≤–æ–¥—É —Å –æ–≥—É—Ä—Ü–æ–º –∏ –º—è—Ç–æ–π',
      action: '–£–∑–Ω–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç',
      icon: 'üåßÔ∏è',
      benefit: '–°–Ω–∏–∂–µ–Ω–∏–µ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞',
      triggerTime: new Date()
    },

    {
      id: 'sleep_optimization',
      conditions: [
        { type: 'time', value: { hour: 20 }, operator: 'greater_than' },
        { type: 'symptom', value: '–ù–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞', operator: 'contains' }
      ],
      targetAudience: ['all'],
      effectiveness: 78,
      category: 'lifestyle',
      timeRestrictions: { minHour: 19, maxHour: 22 },
      type: 'symptom_tip',
      priority: 'high',
      title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É',
      message: '–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É',
      recommendation: '–ú–∞–≥–Ω–∏–π –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –Ω–∞ 40%',
      action: '–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–∏–µ–º–µ',
      icon: 'üò¥',
      benefit: '–£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞ –Ω–∞ 40%',
      triggerTime: new Date()
    },

    {
      id: 'stress_nutrition',
      conditions: [
        { type: 'symptom', value: '–°—Ç—Ä–µ—Å—Å', operator: 'contains' }
      ],
      targetAudience: ['all'],
      effectiveness: 73,
      category: 'symptom',
      type: 'symptom_tip',
      priority: 'medium',
      title: '–ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ',
      message: '–°—Ç—Ä–µ—Å—Å –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
      recommendation: '–¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ (70%+ –∫–∞–∫–∞–æ) —Å–Ω–∏–∂–∞–µ—Ç –∫–æ—Ä—Ç–∏–∑–æ–ª',
      action: '–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω',
      icon: 'üç´',
      benefit: '–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞',
      triggerTime: new Date()
    },

    {
      id: 'hydration_smart',
      conditions: [
        { type: 'hydration', value: 4, operator: 'less_than' },
        { type: 'time', value: { hour: 16 }, operator: 'greater_than' }
      ],
      targetAudience: ['all'],
      effectiveness: 85,
      category: 'hydration',
      type: 'hydration',
      priority: 'medium',
      title: '–£–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ',
      message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã',
      recommendation: '–î–æ–±–∞–≤—å—Ç–µ –ª–∏–º–æ–Ω –∏ –∏–º–±–∏—Ä—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤',
      action: '–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω',
      icon: 'üíß',
      benefit: '–£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      triggerTime: new Date()
    }
  ];

  static generateAdvancedRecommendations(context: AdvancedRecommendationContext): AdvancedRecommendation[] {
    const recommendations: AdvancedRecommendation[] = [];
    const currentHour = context.currentTime.getHours();

    for (const rule of this.advancedRules) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      if (rule.timeRestrictions) {
        if (currentHour < rule.timeRestrictions.minHour || currentHour > rule.timeRestrictions.maxHour) {
          continue;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
      if (!rule.targetAudience.includes('all') && 
          !rule.targetAudience.includes(context.userProfile.menopausePhase) &&
          !rule.targetAudience.includes(context.userProfile.subscriptionTier)) {
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
      if (this.evaluateConditions(rule.conditions, context)) {
        recommendations.push({
          ...rule,
          triggerTime: new Date()
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    return recommendations.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
      if (priorityDiff !== 0) return priorityDiff;
      return b.effectiveness - a.effectiveness;
    });
  }

  private static evaluateConditions(conditions: RecommendationCondition[], context: AdvancedRecommendationContext): boolean {
    return conditions.every(condition => {
      switch (condition.type) {
        case 'time':
          const currentHour = context.currentTime.getHours();
          return currentHour >= condition.value.hour;
        
        case 'symptom':
          return context.primarySymptoms.includes(condition.value);
        
        case 'meal_gap':
          if (!context.lastMealTime) return false;
          const hoursSinceLastMeal = (context.currentTime.getTime() - context.lastMealTime.getTime()) / (1000 * 60 * 60);
          return hoursSinceLastMeal > condition.value;
        
        case 'hydration':
          switch (condition.operator) {
            case 'less_than':
              return context.waterIntake < condition.value;
            case 'greater_than':
              return context.waterIntake > condition.value;
            default:
              return false;
          }
        
        case 'weather':
          return context.weatherData && context.weatherData.humidity > condition.value.humidity;
        
        case 'subscription':
          return context.userProfile.subscriptionTier === condition.value;
        
        default:
          return false;
      }
    });
  }
}

export type { AdvancedRecommendation, AdvancedRecommendationContext, RecommendationCondition };