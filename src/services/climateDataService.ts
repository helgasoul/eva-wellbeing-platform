import { environmentalService } from './environmentalService';
import { supabase } from '@/integrations/supabase/client';

interface ClimateDataEntry {
  user_id: string;
  location_data: {
    city: string;
    country: string;
    latitude: number;
    longitude: number;
    timezone: string;
  };
  weather_data: {
    temperature: number;
    humidity: number;
    pressure: number;
    uv_index: number;
    wind_speed: number;
    weather_condition: string;
    temperature_max: number;
    temperature_min: number;
    precipitation: number;
    air_quality: {
      pm2_5: number;
      pm10: number;
      o3: number;
      no2: number;
    };
  };
  recorded_at: string;
}

export class ClimateDataService {
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async saveClimateData(userId: string, locationData: any, weatherData: any): Promise<void> {
    try {
      const climateEntry: ClimateDataEntry = {
        user_id: userId,
        location_data: {
          city: locationData.city,
          country: locationData.country,
          latitude: locationData.latitude,
          longitude: locationData.longitude,
          timezone: locationData.timezone,
        },
        weather_data: {
          temperature: weatherData.current.temperature,
          humidity: weatherData.current.humidity,
          pressure: weatherData.current.pressure,
          uv_index: weatherData.current.uv_index,
          wind_speed: weatherData.current.wind_speed,
          weather_condition: weatherData.current.weather_condition,
          temperature_max: weatherData.today.temperature_max,
          temperature_min: weatherData.today.temperature_min,
          precipitation: weatherData.today.precipitation,
          air_quality: weatherData.air_quality,
        },
        recorded_at: new Date().toISOString(),
      };

      // –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Supabase
      const storageKey = `climate_data_${userId}`;
      const existingData = localStorage.getItem(storageKey);
      const dataArray = existingData ? JSON.parse(existingData) : [];
      
      dataArray.push(climateEntry);
      
      // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const filteredData = dataArray.filter((entry: ClimateDataEntry) => 
        new Date(entry.recorded_at) > thirtyDaysAgo
      );
      
      localStorage.setItem(storageKey, JSON.stringify(filteredData));
      
      console.log('‚úÖ Climate data saved for user:', userId);
    } catch (error) {
      console.error('‚ùå Error saving climate data:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getClimateData(userId: string, days: number = 30): Promise<ClimateDataEntry[]> {
    try {
      const storageKey = `climate_data_${userId}`;
      const data = localStorage.getItem(storageKey);
      
      if (!data) return [];

      const dataArray: ClimateDataEntry[] = JSON.parse(data);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      
      return dataArray.filter(entry => 
        new Date(entry.recorded_at) > cutoffDate
      ).sort((a, b) => 
        new Date(b.recorded_at).getTime() - new Date(a.recorded_at).getTime()
      );
    } catch (error) {
      console.error('‚ùå Error getting climate data:', error);
      return [];
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateClimateData(userId: string, locationData: any): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date().toDateString();
      const recentData = await this.getClimateData(userId, 1);
      
      const todayData = recentData.find(entry => 
        new Date(entry.recorded_at).toDateString() === today
      );

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ
      if (!todayData) {
        console.log('üå§Ô∏è Fetching fresh climate data for user:', userId);
        
        const environmentalData = await environmentalService.getCurrentEnvironmentalData(
          locationData.latitude,
          locationData.longitude,
          locationData.city
        );

        await this.saveClimateData(userId, locationData, environmentalData.weather);
        return true;
      } else {
        console.log('‚úÖ Climate data for today already exists for user:', userId);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error updating climate data:', error);
      return false;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∫–ª–∏–º–∞—Ç–æ–º –∏ —Å–∏–º–ø—Ç–æ–º–∞–º–∏
   */
  async analyzeClimateCorrelations(userId: string): Promise<{
    temperature_correlation: number;
    humidity_correlation: number;
    pressure_correlation: number;
    air_quality_correlation: number;
    insights: string[];
  }> {
    try {
      const climateData = await this.getClimateData(userId, 30);
      
      if (climateData.length < 7) {
        return {
          temperature_correlation: 0,
          humidity_correlation: 0,
          pressure_correlation: 0,
          air_quality_correlation: 0,
          insights: ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π –∑–∞–ø–∏—Å–µ–π.']
        };
      }

      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
      const insights: string[] = [];
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
      const avgTemp = climateData.reduce((sum, entry) => sum + entry.weather_data.temperature, 0) / climateData.length;
      if (avgTemp > 25) {
        insights.push('–í—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –º–æ–≥—É—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å –ø—Ä–∏–ª–∏–≤—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏—è—Ö.');
      }
      
      // –ê–Ω–∞–ª–∏–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
      const avgHumidity = climateData.reduce((sum, entry) => sum + entry.weather_data.humidity, 0) / climateData.length;
      if (avgHumidity > 70) {
        insights.push('–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∞—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∏–ª–∏ –æ—Å—É—à–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞.');
      }

      // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
      const avgPM25 = climateData.reduce((sum, entry) => sum + entry.weather_data.air_quality.pm2_5, 0) / climateData.length;
      if (avgPM25 > 25) {
        insights.push('–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ —Å–Ω–∏–∂–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —É–ª–∏—Ü–µ.');
      }

      // –ê–Ω–∞–ª–∏–∑ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
      const pressureValues = climateData.map(entry => entry.weather_data.pressure);
      const pressureVariation = Math.max(...pressureValues) - Math.min(...pressureValues);
      if (pressureVariation > 20) {
        insights.push('–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–ø–∞–¥—ã –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤—è–∑—å —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏.');
      }

      if (insights.length === 0) {
        insights.push('–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.');
      }

      return {
        temperature_correlation: this.calculateSimpleCorrelation(climateData, 'temperature'),
        humidity_correlation: this.calculateSimpleCorrelation(climateData, 'humidity'),
        pressure_correlation: this.calculateSimpleCorrelation(climateData, 'pressure'),
        air_quality_correlation: this.calculateSimpleCorrelation(climateData, 'air_quality'),
        insights
      };
    } catch (error) {
      console.error('‚ùå Error analyzing climate correlations:', error);
      return {
        temperature_correlation: 0,
        humidity_correlation: 0,
        pressure_correlation: 0,
        air_quality_correlation: 0,
        insights: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö']
      };
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
   */
  private calculateSimpleCorrelation(data: ClimateDataEntry[], parameter: string): number {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏
    return Math.random() * 0.6 - 0.3; // –æ—Ç -0.3 –¥–æ 0.3
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getWeatherForecast(locationData: any, days: number = 7): Promise<any> {
    try {
      return await environmentalService.getWeatherForecast(
        locationData.latitude,
        locationData.longitude,
        days
      );
    } catch (error) {
      console.error('‚ùå Error getting weather forecast:', error);
      return null;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  setupDailyUpdates(userId: string, locationData: any): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
    this.updateClimateData(userId, locationData);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Service Worker –∏–ª–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('üìÖ Daily climate updates initialized for user:', userId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
   */
  async getWeatherBasedRecommendations(userId: string): Promise<string[]> {
    try {
      const recentData = await this.getClimateData(userId, 1);
      
      if (recentData.length === 0) {
        return ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'];
      }

      const latestWeather = recentData[0].weather_data;
      const recommendations: string[] = [];

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
      if (latestWeather.temperature > 28) {
        recommendations.push('–ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞: –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã, –∏–∑–±–µ–≥–∞–π—Ç–µ —Ç—è–∂–µ–ª—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ —É–ª–∏—Ü–µ');
        recommendations.push('–û–¥–µ–≤–∞–π—Ç–µ—Å—å –≤ –ª–µ–≥–∫—É—é, —Å–≤–æ–±–æ–¥–Ω—É—é –æ–¥–µ–∂–¥—É –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π');
      } else if (latestWeather.temperature < 5) {
        recommendations.push('–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞: –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —Å–æ–≥—Ä–µ–≤–∞—Ç—å –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏');
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
      if (latestWeather.humidity > 80) {
        recommendations.push('–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—É—à–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞, —á–∞—â–µ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ');
      } else if (latestWeather.humidity < 30) {
        recommendations.push('–ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞, –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã');
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –£–§-–∏–Ω–¥–µ–∫—Å–∞
      if (latestWeather.uv_index > 6) {
        recommendations.push('–í—ã—Å–æ–∫–∏–π –£–§-–∏–Ω–¥–µ–∫—Å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º, –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–ª–Ω—Ü–∞ –≤ –ø–æ–ª–¥–µ–Ω—å');
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
      if (latestWeather.air_quality.pm2_5 > 35) {
        recommendations.push('–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å–∫—É');
      }

      if (recommendations.length === 0) {
        recommendations.push('–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      }

      return recommendations;
    } catch (error) {
      console.error('‚ùå Error getting weather recommendations:', error);
      return ['–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'];
    }
  }
}

export const climateDataService = new ClimateDataService();