/**
 * Legacy Auth Service –¥–ª—è JIT –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –∏—Ö –≤ Supabase
 */

interface LegacyUser {
  id: string;
  email: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  phone?: string;
  onboarding_completed?: boolean;
  created_at?: string;
  profile_data?: Record<string, any>;
}

interface LegacyAuthResult {
  success: boolean;
  user?: LegacyUser;
  error?: string;
}

class LegacyAuthService {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
   * –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
   * - API –≤—ã–∑–æ–≤ –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
   * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ñ–∞–π–ª–∞—Ö localStorage (–∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
   */
  async authenticateUser(email: string, password: string): Promise<LegacyAuthResult> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º legacy –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è:', email);

      // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const legacyData = this.checkLocalStorageAuth(email, password);
      if (legacyData.success) {
        return legacyData;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –∫ legacy API
      const legacyApiResult = await this.checkLegacyAPI(email, password);
      if (legacyApiResult.success) {
        return legacyApiResult;
      }

      return {
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ legacy —Å–∏—Å—Ç–µ–º–µ'
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ legacy –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
   */
  private checkLocalStorageAuth(email: string, password: string): LegacyAuthResult {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏)
      const localUserData = localStorage.getItem('eva_user_data');
      if (!localUserData) {
        return { success: false, error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage' };
      }

      const userData = JSON.parse(localUserData);
      if (userData.email !== email) {
        return { success: false, error: 'Email –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç' };
      }

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ email
      const onboardingData = localStorage.getItem('eva_onboarding_data');
      let parsedOnboarding = null;
      if (onboardingData) {
        try {
          parsedOnboarding = JSON.parse(onboardingData);
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞');
        }
      }

      return {
        success: true,
        user: {
          id: `legacy_${userData.email}`,
          email: userData.email,
          first_name: userData.first_name,
          last_name: userData.last_name,
          role: userData.role || 'patient',
          phone: userData.phone,
          onboarding_completed: userData.onboarding_completed || false,
          created_at: new Date().toISOString(),
          profile_data: parsedOnboarding
        }
      };

    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ legacy API
   * –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç–∞—Ä–æ–º—É API
   */
  private async checkLegacyAPI(email: string, password: string): Promise<LegacyAuthResult> {
    // Placeholder –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞
    // –í –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:
    /*
    const response = await fetch('https://legacy-api.example.com/auth', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });

    if (response.ok) {
      const userData = await response.json();
      return {
        success: true,
        user: {
          id: userData.id,
          email: userData.email,
          first_name: userData.firstName,
          last_name: userData.lastName,
          role: userData.role,
          // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
        }
      };
    }
    */

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      success: false,
      error: 'Legacy API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Supabase
   */
  prepareMigrationData(legacyUser: LegacyUser) {
    return {
      email: legacyUser.email,
      metadata: {
        first_name: legacyUser.first_name || '',
        last_name: legacyUser.last_name || '',
        role: legacyUser.role || 'patient',
        phone: legacyUser.phone,
        legacy_id: legacyUser.id,
        migrated_at: new Date().toISOString(),
        onboarding_completed: legacyUser.onboarding_completed || false
      },
      profileData: legacyUser.profile_data
    };
  }
}

export const legacyAuthService = new LegacyAuthService();