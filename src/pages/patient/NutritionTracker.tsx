import React, { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { TodayNutritionContent } from '@/components/nutrition/TodayNutritionContent';
import { NutritionTrendsContent } from '@/components/nutrition/NutritionTrendsContent';
import { NutritionInsightsContent } from '@/components/nutrition/NutritionInsightsContent';
import { healthDataService } from '@/services/healthDataService';
import type { 
  FoodEntry, 
  MealData, 
  SupplementEntry
} from '@/types/nutritionCompat';
import { 
  convertNutritionEntryToFoodEntry,
  convertFoodEntryToNutritionEntries
} from '@/types/nutritionCompat';
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';

export default function NutritionTracker() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [entries, setEntries] = useState<FoodEntry[]>([]);
  const [currentEntry, setCurrentEntry] = useState<FoodEntry | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState<'today' | 'trends' | 'insights'>('today');

  const breadcrumbs = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/patient/dashboard' },
    { label: '–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è' }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
  useEffect(() => {
    if (user?.id) {
      loadNutritionData();
    }
  }, [user?.id]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  useEffect(() => {
    const dayEntry = entries.find(entry => entry.date === selectedDate);
    setCurrentEntry(dayEntry || null);
  }, [selectedDate, entries]);

  const loadNutritionData = async () => {
    if (!user?.id) return;
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const endDate = new Date().toISOString().split('T')[0];
      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      
      const nutritionEntries = await healthDataService.getNutritionEntries(user.id, {
        start: startDate,
        end: endDate
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ FoodEntry
      const entriesByDate = nutritionEntries.reduce((acc, entry) => {
        if (!acc[entry.entry_date]) {
          acc[entry.entry_date] = [];
        }
        acc[entry.entry_date].push(entry);
        return acc;
      }, {} as Record<string, any[]>);

      const foodEntries: FoodEntry[] = Object.entries(entriesByDate).map(([date, dateEntries]) => {
        return convertNutritionEntryToFoodEntry(dateEntries);
      });

      setEntries(foodEntries);
    } catch (error) {
      console.error('Error loading nutrition data:', error);
      
      // Fallback –∫ localStorage
      const saved = localStorage.getItem(`nutrition_entries_${user.id}`);
      if (saved) {
        try {
          const parsed = JSON.parse(saved);
          setEntries(parsed);
        } catch (parseError) {
          console.error('Error parsing local nutrition data:', parseError);
        }
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        variant: "destructive"
      });
    }
  };

  const saveEntry = async (entry: FoodEntry) => {
    if (!user?.id) return;

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FoodEntry –æ–±—Ä–∞—Ç–Ω–æ –≤ NutritionEntry –∑–∞–ø–∏—Å–∏
      const nutritionEntries = convertFoodEntryToNutritionEntries(entry);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ Supabase
      for (const nutritionEntry of nutritionEntries) {
        await healthDataService.saveNutritionEntry(user.id, nutritionEntry);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const updatedEntries = entries.filter(e => e.date !== entry.date);
      updatedEntries.push(entry);
      updatedEntries.sort((a, b) => b.date.localeCompare(a.date));
      
      setEntries(updatedEntries);
      setCurrentEntry(entry);
      setIsEditing(false);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      localStorage.setItem(`nutrition_entries_${user.id}`, JSON.stringify(updatedEntries));

      toast({
        title: "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        description: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±–ª–∞–∫–µ"
      });
    } catch (error) {
      console.error('Error saving nutrition entry:', error);
      
      // Fallback –∫ localStorage
      const updatedEntries = entries.filter(e => e.date !== entry.date);
      updatedEntries.push(entry);
      updatedEntries.sort((a, b) => b.date.localeCompare(a.date));
      
      setEntries(updatedEntries);
      setCurrentEntry(entry);
      setIsEditing(false);
      localStorage.setItem(`nutrition_entries_${user.id}`, JSON.stringify(updatedEntries));

      toast({
        title: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ",
        description: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
        variant: "destructive"
      });
    }
  };

  return (
    <PatientLayout breadcrumbs={breadcrumbs}>
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50">
        <div className="max-w-6xl mx-auto p-6">
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-8">
            <h1 className="text-3xl font-playfair font-bold gentle-text flex items-center">
              ü•ó –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
            </h1>
            <p className="soft-text mt-2">
              –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–ª–∏—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–∏–º–ø—Ç–æ–º—ã –º–µ–Ω–æ–ø–∞—É–∑—ã
            </p>
          </div>

          {/* –¢–∞–±—ã */}
          <div className="flex bg-white rounded-xl p-1 shadow-warm mb-6 max-w-md">
            {(['today', 'trends', 'insights'] as const).map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={cn(
                  "flex-1 px-4 py-2 rounded-lg text-sm font-medium transition-colors",
                  activeTab === tab
                    ? "bg-gradient-to-r from-primary to-primary-glow text-white shadow-warm"
                    : "gentle-text interactive-hover"
                )}
              >
                {tab === 'today' ? 'üìÖ –°–µ–≥–æ–¥–Ω—è' : 
                 tab === 'trends' ? 'üìà –¢—Ä–µ–Ω–¥—ã' : 'üß† –ò–Ω—Å–∞–π—Ç—ã'}
              </button>
            ))}
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–∞–±–∞–º */}
          {activeTab === 'today' && (
            <TodayNutritionContent 
              selectedDate={selectedDate}
              onDateChange={setSelectedDate}
              entry={currentEntry}
              onEntryUpdate={saveEntry}
              isEditing={isEditing}
              onEditToggle={setIsEditing}
              entries={entries}
            />
          )}

          {activeTab === 'trends' && (
            <NutritionTrendsContent entries={entries} />
          )}

          {activeTab === 'insights' && (
            <NutritionInsightsContent entries={entries} />
          )}
        </div>
      </div>
    </PatientLayout>
  );
}

export type { FoodEntry, MealData, SupplementEntry };