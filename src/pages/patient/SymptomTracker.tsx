import React, { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { DateSelector } from '@/components/symptom-tracker/DateSelector';
import { SymptomEntryForm } from '@/components/symptom-tracker/SymptomEntryForm';
import { SymptomEntryView } from '@/components/symptom-tracker/SymptomEntryView';
import { RecentEntries } from '@/components/symptom-tracker/RecentEntries';
import { healthDataService } from '@/services/healthDataService';
import type { SymptomEntry } from '@/types/healthData';
import { useToast } from '@/hooks/use-toast';

const SymptomTracker: React.FC = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [entries, setEntries] = useState<SymptomEntry[]>([]);
  const [currentEntry, setCurrentEntry] = useState<SymptomEntry | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const breadcrumbs = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/patient/dashboard' },
    { label: '–î–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤' }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (user?.id) {
      loadEntries();
    }
  }, [user?.id]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  useEffect(() => {
    if (user?.id) {
      loadCurrentEntry();
    }
  }, [selectedDate, user?.id]);

  const loadEntries = async () => {
    if (!user?.id) return;
    
    setIsLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      const endDate = new Date().toISOString().split('T')[0];
      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      
      const data = await healthDataService.getSymptomEntries(user.id, {
        start: startDate,
        end: endDate
      });
      
      setEntries(data);
    } catch (error) {
      console.error('Error loading symptom entries:', error);
      
      // Fallback –∫ localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const saved = localStorage.getItem(`symptom_entries_${user.id}`);
      if (saved) {
        try {
          const localData = JSON.parse(saved);
          setEntries(localData);
        } catch (parseError) {
          console.error('Error parsing local data:', parseError);
        }
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const loadCurrentEntry = async () => {
    if (!user?.id) return;
    
    try {
      const entry = await healthDataService.getSymptomEntry(user.id, selectedDate);
      setCurrentEntry(entry);
      setIsEditing(false);
    } catch (error) {
      console.error('Error loading current entry:', error);
      // Fallback –∫ –ø–æ–∏—Å–∫—É –≤ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const entry = entries.find(e => e.entry_date === selectedDate);
      setCurrentEntry(entry || null);
    }
  };

  const saveEntry = async (entryData: Omit<SymptomEntry, 'id' | 'user_id' | 'created_at' | 'updated_at'>) => {
    if (!user?.id) return;
    
    setIsLoading(true);
    try {
      const savedEntry = await healthDataService.saveSymptomEntry(user.id, entryData);
      
      if (savedEntry) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const updatedEntries = entries.filter(e => e.entry_date !== savedEntry.entry_date);
        updatedEntries.push(savedEntry);
        updatedEntries.sort((a, b) => b.entry_date.localeCompare(a.entry_date));
        
        setEntries(updatedEntries);
        setCurrentEntry(savedEntry);
        setIsEditing(false);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        localStorage.setItem(`symptom_entries_${user.id}`, JSON.stringify(updatedEntries));

        toast({
          title: "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
          description: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±–ª–∞–∫–µ"
        });
      }
    } catch (error) {
      console.error('Error saving symptom entry:', error);
      
      // Fallback –∫ localStorage
      const localEntry: SymptomEntry = {
        id: Date.now().toString(),
        user_id: user.id,
        ...entryData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      const updated = entries.filter(e => e.entry_date !== localEntry.entry_date);
      updated.push(localEntry);
      updated.sort((a, b) => b.entry_date.localeCompare(a.entry_date));
      
      setEntries(updated);
      setCurrentEntry(localEntry);
      setIsEditing(false);
      localStorage.setItem(`symptom_entries_${user.id}`, JSON.stringify(updated));

      toast({
        title: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ",
        description: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <PatientLayout title="bloom - –î–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤" breadcrumbs={breadcrumbs}>
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bloom-card p-6">
          <h1 className="text-3xl font-playfair font-bold text-foreground mb-2">
            –î–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤ üìä
          </h1>
          <p className="text-muted-foreground">
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ
          </p>
        </div>

        {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <DateSelector 
              selectedDate={selectedDate}
              onDateChange={setSelectedDate}
              entries={entries}
            />
          </div>
          
          <div className="bloom-card p-4">
            <h3 className="font-semibold text-foreground mb-3">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
            <div className="space-y-2">
              <button 
                onClick={() => setIsEditing(true)}
                disabled={isLoading}
                className="w-full bg-primary text-primary-foreground py-2 px-4 rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50"
              >
                {currentEntry ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å' : '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'}
              </button>
              
              <button className="w-full bg-secondary text-secondary-foreground py-2 px-4 rounded-lg hover:bg-secondary/80 transition-colors">
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–¥—ã
              </button>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {isEditing ? (
          <SymptomEntryForm
            date={selectedDate}
            entry={currentEntry}
            onSave={saveEntry}
            onCancel={() => setIsEditing(false)}
          />
        ) : (
          <SymptomEntryView
            entry={currentEntry}
            date={selectedDate}
            onEdit={() => setIsEditing(true)}
          />
        )}

        {/* –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏ */}
        <RecentEntries
          entries={entries.slice(0, 7)}
          onDateSelect={setSelectedDate}
        />
      </div>
    </PatientLayout>
  );
};

export default SymptomTracker;