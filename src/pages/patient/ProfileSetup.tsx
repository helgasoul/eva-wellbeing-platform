import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { MapPin, Settings, Shield, CheckCircle } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import GeolocationStep from '@/components/onboarding/steps/GeolocationStep';
import { supabase } from '@/integrations/supabase/client';
import { weatherService } from '@/services/weatherService';

export const ProfileSetup: React.FC = () => {
  const { user, updateUser } = useAuth();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState<'welcome' | 'geolocation' | 'complete'>('welcome');
  const [isLoading, setIsLoading] = useState(false);

  const handleStartSetup = () => {
    setCurrentStep('geolocation');
  };

  const handleGeolocationComplete = async (data: { location: any, weather: any }) => {
    try {
      setIsLoading(true);
      const { location, weather } = data;
      
      const geolocationData = {
        location,
        weather,
        recordedAt: new Date().toISOString()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (user?.id) {
        const { error: locationError } = await supabase
          .from('user_locations')
          .upsert({
            user_id: user.id,
            location_data: location,
            is_active: true
          });

        if (locationError) {
          console.error('Error saving user location:', locationError);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await weatherService.saveWeatherData(user.id, location, weather);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await updateUser({ 
          locationData: geolocationData
        } as any);
        
        console.log('‚úÖ Location and weather data saved for user:', user.id);
      }

      setCurrentStep('complete');
      
      toast({
        title: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!',
        description: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–º–∞—Ç–∞.',
      });

    } catch (error) {
      console.error('Error handling geolocation completion:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–æ –ø–æ–∑–∂–µ.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSkipGeolocation = () => {
    console.log('üìç User skipped geolocation setup');
    navigate('/patient/dashboard');
  };

  const handleComplete = () => {
    navigate('/patient/dashboard');
  };

  if (currentStep === 'geolocation') {
    return (
      <div className="min-h-screen bloom-gradient flex items-center justify-center p-4">
        <div className="w-full max-w-2xl">
          <GeolocationStep
            onChange={handleGeolocationComplete}
            onSkip={handleSkipGeolocation}
          />
        </div>
      </div>
    );
  }

  if (currentStep === 'complete') {
    return (
      <div className="min-h-screen bloom-gradient flex items-center justify-center p-4">
        <Card className="w-full max-w-md text-center">
          <CardHeader>
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-10 h-10 text-green-600" />
            </div>
            <CardTitle className="text-2xl font-playfair">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</CardTitle>
            <CardDescription>
              –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={handleComplete} className="bloom-button w-full">
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bloom-gradient flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl font-playfair mb-4">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</CardTitle>
          <CardDescription className="text-lg">
            –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è */}
          <div className="flex items-start gap-4 p-4 border rounded-lg">
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <MapPin className="w-6 h-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-foreground mb-2">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
              <p className="text-muted-foreground text-sm mb-3">
                –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∫–ª–∏–º–∞—Ç–∞ –∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
              </p>
              <div className="text-xs text-muted-foreground">
                ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
                <br />
                ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                <br />
                ‚Ä¢ –£—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–∏–º–ø—Ç–æ–º—ã
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="flex items-start gap-4 p-4 border rounded-lg opacity-50">
            <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
              <Settings className="w-6 h-6 text-gray-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-foreground mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
              <p className="text-muted-foreground text-sm mb-3">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ)
              </p>
              <div className="text-xs text-muted-foreground">
                ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –¥–æ–±–∞–≤–æ–∫
                <br />
                ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏
                <br />
                ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
              </div>
            </div>
          </div>

          {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
          <div className="flex items-start gap-4 p-4 border rounded-lg bg-green-50">
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <Shield className="w-6 h-6 text-green-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-foreground mb-2">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</h3>
              <p className="text-muted-foreground text-sm">
                –í—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
              </p>
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button 
              variant="outline" 
              onClick={handleSkipGeolocation}
              className="flex-1"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            </Button>
            <Button 
              onClick={handleStartSetup}
              className="bloom-button flex-1"
            >
              –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ProfileSetup;