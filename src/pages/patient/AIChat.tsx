
import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '@/context/AuthContext';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { MessageSquare, Send, Bot, User, Heart, Zap, Moon, Activity } from 'lucide-react';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

const AIChat: React.FC = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const breadcrumbs = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/patient/dashboard' },
    { label: '–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva' }
  ];

  // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫
  const quickActions = [
    { icon: Heart, text: '–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏?', category: 'symptoms' },
    { icon: Moon, text: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º', category: 'sleep' },
    { icon: Activity, text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', category: 'exercise' },
    { icon: Zap, text: '–£–ø–∞–¥–æ–∫ —Å–∏–ª –∏ —ç–Ω–µ—Ä–≥–∏–∏', category: 'energy' }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  useEffect(() => {
    const savedMessages = localStorage.getItem(`ai_chat_${user?.id}`);
    if (savedMessages) {
      try {
        const parsed = JSON.parse(savedMessages);
        setMessages(parsed.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        })));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
      }
    } else {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'ai',
        content: '–ü—Ä–∏–≤–µ—Ç! –Ø Eva, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
    }
  }, [user?.id]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  useEffect(() => {
    if (messages.length > 0 && user?.id) {
      localStorage.setItem(`ai_chat_${user.id}`, JSON.stringify(messages));
    }
  }, [messages, user?.id]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = async (content?: string) => {
    const messageText = content || inputMessage.trim();
    if (!messageText) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: messageText,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    setTimeout(() => {
      const aiResponse = generateAIResponse(messageText);
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: aiResponse,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1000);
  };

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    const onboardingData = localStorage.getItem(`bloom-onboarding-data`);
    const symptomsData = localStorage.getItem(`symptom_entries_${user?.id}`);
    
    if (lowerMessage.includes('–ø—Ä–∏–ª–∏–≤') || lowerMessage.includes('–∂–∞—Ä')) {
      return `–ü—Ä–∏–ª–∏–≤—ã - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –º–µ–Ω–æ–ø–∞—É–∑—ã. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:

üå°Ô∏è **–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**
‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: –≤–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 8
‚Ä¢ –ü—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å –Ω–∞ —à–µ—é –∏ –∑–∞–ø—è—Å—Ç—å—è
‚Ä¢ –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π

ü•ó **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:**
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: –æ—Å—Ç—Ä–∞—è –ø–∏—â–∞, –∫–æ—Ñ–µ–∏–Ω, –∞–ª–∫–æ–≥–æ–ª—å
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è

–ï—Å–ª–∏ –ø—Ä–∏–ª–∏–≤—ã —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≥–∏–Ω–µ–∫–æ–ª–æ–≥—É-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏.`;
    }

    if (lowerMessage.includes('—Å–æ–Ω') || lowerMessage.includes('–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞')) {
      return `–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã –æ—á–µ–Ω—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω—ã. –î–∞–≤–∞–π—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞:

üåô **–ì–∏–≥–∏–µ–Ω–∞ —Å–Ω–∞:**
‚Ä¢ –õ–æ–∂–∏—Ç–µ—Å—å –∏ –≤—Å—Ç–∞–≤–∞–π—Ç–µ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–π (18-20¬∞C)
‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ —ç–∫—Ä–∞–Ω—ã –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞

üçÉ **–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏:**
‚Ä¢ –†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π –ø–µ—Ä–µ–¥ —Å–Ω–æ–º
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –º—ã—à–µ—á–Ω–æ–π —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏
‚Ä¢ –ê—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏—è —Å –ª–∞–≤–∞–Ω–¥–æ–π

üèÉ‚Äç‚ôÄÔ∏è **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –Ω–æ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 4 —á–∞—Å–∞ –¥–æ —Å–Ω–∞
‚Ä¢ –ô–æ–≥–∞ –∏–ª–∏ —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥ –≤–µ—á–µ—Ä–æ–º

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.`;
    }

    if (lowerMessage.includes('–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ') || lowerMessage.includes('–¥–µ–ø—Ä–µ—Å—Å–∏—è') || lowerMessage.includes('—Ç—Ä–µ–≤–æ–≥–∞')) {
      return `–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –≤ —ç—Ç–æ–º:

üíô **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å —Å –±–ª–∏–∑–∫–∏–º–∏ –æ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∂–µ–Ω—â–∏–Ω
‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π

üßò‚Äç‚ôÄÔ∏è **–ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏:**
‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ 10-15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ–Ω (7-9 —á–∞—Å–æ–≤)

üå± **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å:**
‚Ä¢ –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è (–ö–ü–¢ –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞)
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Å–∏—Ö–∏–∞—Ç—Ä–æ–º
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–∞–ø–∏—é —Å –≤—Ä–∞—á–æ–º

–ü–æ–º–Ω–∏—Ç–µ: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø–æ–º–æ—â—å—é - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Å–∏–ª—ã, –∞ –Ω–µ —Å–ª–∞–±–æ—Å—Ç–∏.`;
    }

    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    return `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–æ—Å—Ç—ã–º. 

–ö–∞–∂–¥–∞—è –∂–µ–Ω—â–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —ç—Ç–æ –ø–æ-—Å–≤–æ–µ–º—É, –∏ –≤–∞—à –æ–ø—ã—Ç —É–Ω–∏–∫–∞–ª–µ–Ω. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.

üíù –ü–æ–º–Ω–∏—Ç–µ: –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–π —à–∞–≥, –∑–∞–±–æ—Ç—è—Å—å –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ!`;
  };

  const handleQuickAction = (action: any) => {
    handleSendMessage(action.text);
  };

  const clearChat = () => {
    const welcomeMessage: ChatMessage = {
      id: 'welcome-new',
      type: 'ai',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø Eva, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  };

  return (
    <PatientLayout title="bloom - –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva" breadcrumbs={breadcrumbs}>
      <div className="max-w-4xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bloom-card p-6">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-gradient-to-br from-bloom-golden to-bloom-caramel rounded-full animate-gentle-float">
              <MessageSquare className="h-8 w-8 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-playfair font-bold text-foreground">
                –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva ü§ñ
              </h1>
              <p className="text-muted-foreground">
                –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã
              </p>
            </div>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <Card className="bloom-card">
          <CardHeader>
            <CardTitle className="text-foreground">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {quickActions.map((action, index) => (
                <Button
                  key={index}
                  variant="outline"
                  onClick={() => handleQuickAction(action)}
                  className="h-auto p-4 text-left justify-start gentle-border interactive-hover bg-gradient-to-r from-white to-bloom-vanilla"
                >
                  <action.icon className="h-5 w-5 text-primary mr-3 flex-shrink-0" />
                  <span className="text-foreground">{action.text}</span>
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –ß–∞—Ç */}
        <Card className="bloom-card h-96">
          <CardHeader className="border-b border-primary/20">
            <div className="flex justify-between items-center">
              <CardTitle className="text-foreground flex items-center space-x-2">
                <Bot className="h-5 w-5 text-primary" />
                <span>–ß–∞—Ç —Å Eva</span>
              </CardTitle>
              <Button variant="outline" size="sm" onClick={clearChat}>
                –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
              </Button>
            </div>
          </CardHeader>
          
          <CardContent className="p-0 h-64 overflow-y-auto">
            <div className="p-4 space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.type === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-muted text-foreground'
                    }`}
                  >
                    <div className="flex items-start space-x-2">
                      {message.type === 'ai' && (
                        <Bot className="h-4 w-4 mt-1 flex-shrink-0" />
                      )}
                      {message.type === 'user' && (
                        <User className="h-4 w-4 mt-1 flex-shrink-0" />
                      )}
                      <div className="flex-1">
                        <div className="whitespace-pre-wrap text-sm">
                          {message.content}
                        </div>
                        <div className="text-xs opacity-70 mt-1">
                          {message.timestamp.toLocaleTimeString()}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className="flex justify-start">
                  <div className="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-muted text-foreground">
                    <div className="flex items-center space-x-2">
                      <Bot className="h-4 w-4" />
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </CardContent>
          
          <div className="border-t border-primary/20 p-4">
            <div className="flex space-x-2">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                className="flex-1"
                disabled={isTyping}
              />
              <Button
                onClick={() => handleSendMessage()}
                disabled={!inputMessage.trim() || isTyping}
                className="px-6"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </PatientLayout>
  );
};

export default AIChat;
