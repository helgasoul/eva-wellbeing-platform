import React, { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { MessageSquare, Heart, Zap, Moon, Activity } from 'lucide-react';
import { ClaudeChatService, UserLimitStatus } from '@/services/claudeChatService';
import { LimitStatusBar } from '@/components/ai-chat/LimitStatusBar';
import { ChatInterface } from '@/components/ai-chat/ChatInterface';

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
}

const AIChat: React.FC = () => {
  const { user } = useAuth();
  const [chatService] = useState(() => new ClaudeChatService());
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [limitStatus, setLimitStatus] = useState<UserLimitStatus | null>(null);

  const breadcrumbs = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/patient/dashboard' },
    { label: '–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva' }
  ];

  // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫
  const quickActions = [
    { icon: Heart, text: '–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏?', category: 'symptoms' },
    { icon: Moon, text: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º', category: 'sleep' },
    { icon: Activity, text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', category: 'exercise' },
    { icon: Zap, text: '–£–ø–∞–¥–æ–∫ —Å–∏–ª –∏ —ç–Ω–µ—Ä–≥–∏–∏', category: 'energy' }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
  useEffect(() => {
    loadChatHistory();
    updateLimitStatus();
  }, []);

  const loadChatHistory = () => {
    const saved = localStorage.getItem(`ai_chat_${user?.id}`);
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setMessages(parsed);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        addWelcomeMessage();
      }
    } else {
      addWelcomeMessage();
    }
  };

  const addWelcomeMessage = () => {
    const welcomeMessage: ChatMessage = {
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø Eva, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?',
      timestamp: new Date().toISOString()
    };
    setMessages([welcomeMessage]);
  };

  const updateLimitStatus = () => {
    if (user?.id) {
      const status = chatService.getUserLimitStatus(user.id);
      setLimitStatus(status);
    }
  };

  const sendMessage = async () => {
    if (!inputMessage.trim() || !user?.id || isLoading) return;

    const userMessage: ChatMessage = {
      role: 'user',
      content: inputMessage,
      timestamp: new Date().toISOString()
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setInputMessage('');
    setIsLoading(true);

    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', inputMessage);
    console.log('User ID:', user.id);

    try {
      const response = await chatService.sendMessage(
        user.id, 
        inputMessage, 
        messages
      );

      if (response.success && response.message) {
        const assistantMessage: ChatMessage = {
          role: 'assistant',
          content: response.message,
          timestamp: response.metadata?.responseTime || new Date().toISOString()
        };

        const finalMessages = [...updatedMessages, assistantMessage];
        setMessages(finalMessages);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        localStorage.setItem(`ai_chat_${user.id}`, JSON.stringify(finalMessages));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (response.metadata?.medicalDisclaimer) {
          setTimeout(() => {
            const disclaimerMessage: ChatMessage = {
              role: 'assistant',
              content: '‚ö†Ô∏è –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.',
              timestamp: new Date().toISOString()
            };
            setMessages(prev => [...prev, disclaimerMessage]);
          }, 1000);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorMessage: ChatMessage = {
          role: 'assistant',
          content: response.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          timestamp: new Date().toISOString()
        };
        setMessages(prev => [...prev, errorMessage]);
      }
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      updateLimitStatus();
    }
  };

  const handleQuickAction = (action: any) => {
    setInputMessage(action.text);
  };

  const clearChat = () => {
    setMessages([]);
    localStorage.removeItem(`ai_chat_${user?.id}`);
    addWelcomeMessage();
  };

  return (
    <PatientLayout title="bloom - –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva" breadcrumbs={breadcrumbs}>
      <div className="max-w-4xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö */}
        <div className="bloom-card p-6">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-gradient-to-br from-bloom-golden to-bloom-caramel rounded-full animate-gentle-float">
              <MessageSquare className="h-8 w-8 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-playfair font-bold text-foreground">
                –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva ü§ñ
              </h1>
              <p className="text-muted-foreground">
                –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã
              </p>
            </div>
          </div>
          
          {/* –°—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤ */}
          {limitStatus && (
            <LimitStatusBar limitStatus={limitStatus} />
          )}
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <Card className="bloom-card">
          <CardHeader>
            <CardTitle className="text-foreground">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {quickActions.map((action, index) => (
                <Button
                  key={index}
                  variant="outline"
                  onClick={() => handleQuickAction(action)}
                  className="h-auto p-4 text-left justify-start gentle-border interactive-hover bg-gradient-to-r from-white to-bloom-vanilla"
                >
                  <action.icon className="h-5 w-5 text-primary mr-3 flex-shrink-0" />
                  <span className="text-foreground">{action.text}</span>
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
        <ChatInterface
          messages={messages}
          inputMessage={inputMessage}
          isLoading={isLoading}
          onInputChange={setInputMessage}
          onSendMessage={sendMessage}
          canSend={limitStatus ? limitStatus.remainingRequests > 0 : true}
        />

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card className="bloom-card">
          <CardContent className="p-4">
            <div className="text-center text-sm text-muted-foreground">
              <p className="mb-2">
                üí° <strong>–°–æ–≤–µ—Ç:</strong> –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
              </p>
              <p>
                üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </PatientLayout>
  );
};

export default AIChat;