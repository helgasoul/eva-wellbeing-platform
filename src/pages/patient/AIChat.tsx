import React, { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { generateId, showNotification } from '@/utils/dataUtils';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { MessageSquare, Heart, Zap, Moon, Activity } from 'lucide-react';
import { ClaudeChatService, UserLimitStatus } from '@/services/claudeChatService';
import { LimitStatusBar } from '@/components/ai-chat/LimitStatusBar';
import { ChatInterface } from '@/components/ai-chat/ChatInterface';
import { DailyAnalysisPanel } from '@/components/ai-chat/DailyAnalysisPanel';
import { MonthlyAnalysisPanel } from '@/components/ai-chat/MonthlyAnalysisPanel';

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
}

const AIChat: React.FC = () => {
  const { user, saveUserData, loadUserData, getUserDataSummary } = useAuth();
  const [chatService] = useState(() => new ClaudeChatService());
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [limitStatus, setLimitStatus] = useState<UserLimitStatus | null>(null);

  const breadcrumbs = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/patient/dashboard' },
    { label: '–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Eva' }
  ];

  // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫
  const quickActions = [
    { icon: Heart, text: '–ö–∞–∫ –º—è–≥–∫–æ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏?', category: 'symptoms' },
    { icon: Moon, text: '–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–æ–Ω –∏ –≤—ã—Å—ã–ø–∞—Ç—å—Å—è?', category: 'sleep' },
    { icon: Activity, text: '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?', category: 'exercise' },
    { icon: Zap, text: '–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?', category: 'energy' }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
  useEffect(() => {
    loadChatHistory();
    updateLimitStatus();
  }, [user?.id]);

  const loadChatHistory = async () => {
    if (!user?.id) return;
    
    try {
      console.log('üîÑ AIChat: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...');
      
      const chatHistory = await loadUserData('ai_chat_history');
      if (chatHistory && Array.isArray(chatHistory)) {
        setMessages(chatHistory);
        console.log(`‚úÖ AIChat: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chatHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      } else {
        console.log('üì• AIChat: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
        addWelcomeMessage();
      }
    } catch (error) {
      console.error('‚ùå AIChat: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É localStorage
      const saved = localStorage.getItem(`ai_chat_${user.id}`);
      if (saved) {
        try {
          const parsed = JSON.parse(saved);
          setMessages(parsed);
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', parseError);
          addWelcomeMessage();
        }
      } else {
        addWelcomeMessage();
      }
    }
  };

  const addWelcomeMessage = async () => {
    const welcomeMessage: ChatMessage = {
      role: 'assistant',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—É—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã. –í—ã –Ω–µ –æ–¥–Ω–∏ ‚Äî –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ. üå∏\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç.',
      timestamp: new Date().toISOString()
    };
    setMessages([welcomeMessage]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (user?.id) {
      try {
        await saveUserData('ai_chat_history', [welcomeMessage]);
      } catch (error) {
        console.error('Error saving welcome message:', error);
      }
    }
  };

  const updateLimitStatus = () => {
    if (user?.id) {
      const status = chatService.getUserLimitStatus(user.id);
      setLimitStatus(status);
    }
  };

  const sendMessage = async () => {
    if (!inputMessage.trim() || !user?.id || isLoading) return;

    try {
      setIsLoading(true);
      console.log('üîÑ AIChat: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');

      // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage: ChatMessage = {
        role: 'user',
        content: inputMessage.trim(),
        timestamp: new Date().toISOString()
      };

      const updatedMessages = [...messages, userMessage];
      setMessages(updatedMessages);
      setInputMessage('');

      // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      const userDataSummary = await getUserDataSummary();
      
      // –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const contextPrompt = createPersonalizedPrompt(userMessage.content, userDataSummary);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å–µ—Ä–≤–∏—Å—É
      const response = await chatService.sendMessage(
        user.id, 
        contextPrompt, 
        messages
      );

      if (response.success && response.message) {
        const assistantMessage: ChatMessage = {
          role: 'assistant',
          content: response.message,
          timestamp: response.metadata?.responseTime || new Date().toISOString()
        };

        const finalMessages = [...updatedMessages, assistantMessage];
        setMessages(finalMessages);

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ DataBridge
        await saveUserData('ai_chat_history', finalMessages);

        console.log('‚úÖ AIChat: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (response.metadata?.medicalDisclaimer) {
          setTimeout(async () => {
            const disclaimerMessage: ChatMessage = {
              role: 'assistant',
              content: '‚ö†Ô∏è –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.',
              timestamp: new Date().toISOString()
            };
            const messagesWithDisclaimer = [...finalMessages, disclaimerMessage];
            setMessages(messagesWithDisclaimer);
            await saveUserData('ai_chat_history', messagesWithDisclaimer);
          }, 1000);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorMessage: ChatMessage = {
          role: 'assistant',
          content: response.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          timestamp: new Date().toISOString()
        };
        const messagesWithError = [...updatedMessages, errorMessage];
        setMessages(messagesWithError);
        await saveUserData('ai_chat_history', messagesWithError);
      }
    } catch (error) {
      console.error('‚ùå AIChat: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
      showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    } finally {
      setIsLoading(false);
      updateLimitStatus();
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  const createPersonalizedPrompt = (message: string, userSummary: any): string => {
    let context = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n`;
    
    if (userSummary?.userData) {
      context += `- –ò–º—è: ${userSummary.userData.firstName}\n`;
      context += `- –§–∞–∑–∞ –º–µ–Ω–æ–ø–∞—É–∑—ã: ${userSummary.userData.menopausePhase || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n`;
    }
    
    if (userSummary?.onboardingData) {
      context += `- –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–∞\n`;
      context += `- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã: ${JSON.stringify(userSummary.onboardingData.symptoms || {})}\n`;
    }
    
    if (userSummary?.symptomEntries) {
      context += `- –ó–∞–ø–∏—Å–µ–π —Å–∏–º–ø—Ç–æ–º–æ–≤: ${userSummary.symptomEntries.length}\n`;
    }
    
    context += `\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}\n`;
    context += `\n–û—Ç–≤–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, —É—á–∏—Ç—ã–≤–∞—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.`;
    
    return context;
  };

  const handleQuickAction = (action: any) => {
    setInputMessage(action.text);
  };

  const clearChat = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
      return;
    }

    try {
      setMessages([]);
      await saveUserData('ai_chat_history', []);
      // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ä—ã–π localStorage
      localStorage.removeItem(`ai_chat_${user?.id}`);
      await addWelcomeMessage();
      console.log('‚úÖ AIChat: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞');
      showNotification('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
    } catch (error) {
      console.error('‚ùå AIChat: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞:', error);
      showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞', 'error');
    }
  };

  return (
    <PatientLayout title="bloom - Eva, –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫" breadcrumbs={breadcrumbs}>
      <div className="max-w-4xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö */}
        <div className="bg-gradient-to-br from-background via-primary/5 to-accent/10 p-8 rounded-3xl shadow-elegant border border-primary/10">
          <div className="flex items-center space-x-6">
            <div className="relative">
              <div className="w-16 h-16 bg-gradient-to-br from-primary/20 via-accent/20 to-secondary/20 rounded-full flex items-center justify-center animate-gentle-float backdrop-blur-sm">
                <span className="text-3xl">üå∏</span>
              </div>
              <div className="absolute -top-1 -right-1 w-6 h-6 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center">
                <span className="text-xs text-white">‚ú®</span>
              </div>
            </div>
            <div className="flex-1">
              <h1 className="text-4xl font-playfair font-bold text-foreground mb-2">
                Eva, –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ üå∏
              </h1>
              <p className="text-muted-foreground text-lg leading-relaxed">
                –†–∞–¥–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è! –Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—É—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.
              </p>
              <p className="text-primary/80 text-sm mt-2 italic">
                –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç.
              </p>
            </div>
          </div>
          
          {/* –°—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤ */}
          {limitStatus && (
            <LimitStatusBar limitStatus={limitStatus} />
          )}
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <Card className="bg-gradient-to-br from-card/90 to-accent/5 backdrop-blur-sm border-primary/10 shadow-elegant rounded-2xl">
          <CardHeader className="pb-4">
            <CardTitle className="text-foreground flex items-center gap-2">
              <span className="text-2xl">üíù</span>
              <span className="font-playfair">–ú–æ–∏ –±—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã</span>
            </CardTitle>
            <p className="text-muted-foreground text-sm">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –≤–∞—à–µ–º—É —Å–µ—Ä–¥—Ü—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {quickActions.map((action, index) => (
                <Button
                  key={index}
                  variant="outline"
                  onClick={() => handleQuickAction(action)}
                  className="h-auto p-6 text-left justify-start border-primary/20 bg-gradient-to-br from-background/80 to-primary/5 hover:from-primary/10 hover:to-accent/10 transition-all duration-300 hover:scale-105 hover:shadow-soft rounded-2xl group"
                >
                  <div className="w-12 h-12 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full flex items-center justify-center mr-4 group-hover:scale-110 transition-transform duration-300">
                    <action.icon className="h-6 w-6 text-primary" />
                  </div>
                  <div className="flex-1">
                    <span className="text-foreground font-medium leading-relaxed">{action.text}</span>
                  </div>
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –ü–∞–Ω–µ–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ */}
        <DailyAnalysisPanel />

        {/* –ü–∞–Ω–µ–ª—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ */}
        <MonthlyAnalysisPanel />

        {/* –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
        <ChatInterface
          messages={messages}
          inputMessage={inputMessage}
          isLoading={isLoading}
          onInputChange={setInputMessage}
          onSendMessage={sendMessage}
          canSend={limitStatus ? limitStatus.remainingRequests > 0 : true}
        />

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card className="bg-gradient-to-br from-card/90 to-accent/5 backdrop-blur-sm border-primary/10 shadow-soft rounded-2xl">
          <CardContent className="p-6">
            <div className="text-center space-y-4">
              <div className="flex items-center justify-center gap-2 mb-4">
                <span className="text-2xl">üå∑</span>
                <p className="text-foreground font-medium">
                  –ù–µ –Ω–∞—à–ª–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å? –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç ‚Äî —è –ø–æ–¥–¥–µ—Ä–∂—É –≤–∞—Å.
                </p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="p-4 bg-gradient-to-br from-primary/5 to-accent/5 rounded-2xl border border-primary/10">
                  <p className="flex items-start gap-2">
                    <span className="text-primary">üíù</span>
                    <span className="text-muted-foreground">
                      <strong className="text-foreground">–ì–æ–≤–æ—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–æ:</strong> –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö ‚Äî —è –æ—Ç–≤–µ—á—É –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
                    </span>
                  </p>
                </div>
                
                <div className="p-4 bg-gradient-to-br from-secondary/5 to-accent/5 rounded-2xl border border-secondary/10">
                  <p className="flex items-start gap-2">
                    <span className="text-secondary">üîê</span>
                    <span className="text-muted-foreground">
                      <strong className="text-foreground">–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</strong> –í—Å–µ –Ω–∞—à–∏ –±–µ—Å–µ–¥—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –∏ –∑–∞—â–∏—â–µ–Ω—ã
                    </span>
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </PatientLayout>
  );
};

export default AIChat;