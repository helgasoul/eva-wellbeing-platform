
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { OnboardingProgress } from '@/components/onboarding/OnboardingProgress';
import { StepWrapper } from '@/components/onboarding/StepWrapper';
import { OnboardingResults } from '@/components/onboarding/OnboardingResults';
import { WelcomeStep } from '@/components/onboarding/steps/WelcomeStep';
import { BasicInfoStep } from '@/components/onboarding/steps/BasicInfoStep';
import { MenstrualHistoryStep } from '@/components/onboarding/steps/MenstrualHistoryStep';
import { SymptomsStep } from '@/components/onboarding/steps/SymptomsStep';
import { MedicalHistoryStep } from '@/components/onboarding/steps/MedicalHistoryStep';
import { LifestyleStep } from '@/components/onboarding/steps/LifestyleStep';
import { GoalsStep } from '@/components/onboarding/steps/GoalsStep';
import { OnboardingData } from '@/types/onboarding';
import { detectMenopausePhase } from '@/utils/menopausePhaseDetector';
import { generateRecommendations } from '@/utils/personalizedRecommendations';
import { toast } from '@/hooks/use-toast';
import { dataBridge, OnboardingPresets } from '@/services/dataBridge';

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è 7-—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
const TOTAL_STEPS = 7;
const STORAGE_KEY = 'bloom-onboarding-data';

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
const ONBOARDING_STEPS = [
  {
    step: 1,
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
    component: 'WelcomeStep',
    isRequired: true,
    dataKey: null
  },
  {
    step: 2, 
    title: '–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    component: 'BasicInfoStep',
    isRequired: true,
    dataKey: 'basicInfo'
  },
  {
    step: 3,
    title: '–ò—Å—Ç–æ—Ä–∏—è –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞', 
    component: 'MenstrualHistoryStep',
    isRequired: true,
    dataKey: 'menstrualHistory'
  },
  {
    step: 4,
    title: '–¢–µ–∫—É—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –º–µ–Ω–æ–ø–∞—É–∑—ã',
    component: 'SymptomsStep',
    isRequired: true,
    dataKey: 'symptoms'
  },
  {
    step: 5,
    title: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
    component: 'MedicalHistoryStep',
    isRequired: true,
    dataKey: 'medicalHistory'
  },
  {
    step: 6,
    title: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
    component: 'LifestyleStep',
    isRequired: true,
    dataKey: 'lifestyle'
  },
  {
    step: 7,
    title: '–¶–µ–ª–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã', 
    component: 'GoalsStep',
    isRequired: true,
    dataKey: 'goals'
  }
];

const stepTitles = ONBOARDING_STEPS.map(step => step.title);

const PatientOnboarding = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<OnboardingData>({});
  const [isLoading, setIsLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [phaseResult, setPhaseResult] = useState(null);
  const [recommendations, setRecommendations] = useState(null);
  const [onboardingPresets, setOnboardingPresets] = useState<OnboardingPresets | null>(null);
  const [dataLoadingStatus, setDataLoadingStatus] = useState({
    registration: false,
    onboarding: false,
    dataBridge: false
  });
  
  const { user, completeOnboarding } = useAuth();
  const navigate = useNavigate();

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DataBridge
  useEffect(() => {
    const loadOnboardingData = async () => {
      try {
        // 1. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DataBridge
        const presets = dataBridge.getOnboardingPresets();
        
        if (presets) {
          console.log('‚úÖ Loading data via DataBridge:', presets);
          setOnboardingPresets(presets);
          
          // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataBridge
          const presetsFormData = {
            basicInfo: {
              age: 0,
              height: 0,
              weight: 0,
              location: '',
              occupation: '',
              hasChildren: false,
              ...presets.prefills.basicInfo
            },
            registrationPersona: presets.persona.id,
            fromRegistration: true,
            expectedPath: presets.persona.onboardingPath,
            onboardingConfig: presets.onboardingConfig
          };
          
          setFormData(presetsFormData);
          setDataLoadingStatus(prev => ({ ...prev, dataBridge: true }));
          
          toast({
            title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!',
            description: `–ê–Ω–∫–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è "${getPersonaTitle(presets.persona.id)}" ‚Ä¢ ${presets.onboardingConfig.estimatedDuration}`,
          });
          
        } else {
          console.log('‚ö†Ô∏è No DataBridge presets found, falling back to legacy method');
          
          // 2. Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
          const legacyPresets = localStorage.getItem('eva_onboarding_presets');
          if (legacyPresets) {
            try {
              const presets = JSON.parse(legacyPresets);
              console.log('‚úÖ Loading legacy registration presets:', presets);
              
              const presetsFormData = {
                basicInfo: {
                  age: 0,
                  height: 0,
                  weight: 0,
                  location: '',
                  occupation: '',
                  hasChildren: false,
                  ...presets.basicInfo
                },
                registrationPersona: presets.personaId,
                fromRegistration: true,
                expectedPath: presets.expectedOnboardingPath
              };
              
              setFormData(presetsFormData);
              setDataLoadingStatus(prev => ({ ...prev, registration: true }));
              
              toast({
                title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                description: `–ê–Ω–∫–µ—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è "${getPersonaTitle(presets.personaId)}"`,
              });
              
            } catch (error) {
              console.error('Failed to load registration presets:', error);
            }
          }
        }
        
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        const savedOnboardingData = localStorage.getItem(STORAGE_KEY);
        if (savedOnboardingData) {
          try {
            const saved = JSON.parse(savedOnboardingData);
            setFormData(prev => ({ ...prev, ...saved }));
            setDataLoadingStatus(prev => ({ ...prev, onboarding: true }));
            console.log('‚úÖ Loading saved onboarding progress');
          } catch (error) {
            console.error('Failed to load saved onboarding data:', error);
          }
        }
        
      } catch (error) {
        console.error('Error loading onboarding data:', error);
      }
    };
    
    loadOnboardingData();
  }, []);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–ª–∞–¥–∫–æ–π
  useEffect(() => {
    if (Object.keys(formData).length > 0) {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));
      console.log('üíæ Onboarding data saved:', {
        step: currentStep,
        dataKeys: Object.keys(formData),
        timestamp: new Date().toISOString()
      });
    }
  }, [formData, currentStep]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const updateFormData = (stepData: Partial<OnboardingData>) => {
    setFormData(prev => {
      const newData = { ...prev, ...stepData };
      console.log('üìù Form data updated:', {
        step: currentStep,
        updated: Object.keys(stepData),
        newKeys: Object.keys(newData)
      });
      return newData;
    });
  };

  const handleNext = () => {
    if (currentStep < TOTAL_STEPS) {
      setCurrentStep(prev => prev + 1);
    } else {
      handleComplete();
    }
  };

  const handlePrev = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleComplete = async () => {
    setIsLoading(true);
    
    try {
      // Detect menopause phase
      const phase = detectMenopausePhase(formData);
      
      // Generate recommendations
      const recs = generateRecommendations(
        phase,
        formData.symptoms!,
        formData.lifestyle!
      );

      setPhaseResult(phase);
      setRecommendations(recs);
      setShowResults(true);

      toast({
        title: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
      });

    } catch (error) {
      console.error('Error completing onboarding:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —à–∞–≥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞

  const handleOnboardingComplete = async () => {
    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthContext –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const onboardingSummary = {
        phaseResult,
        recommendations,
        formData,
        completedAt: new Date().toISOString()
      };
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ AuthContext
      await completeOnboarding(onboardingSummary);
      
      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º DataBridge –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
      dataBridge.cleanupTransferData();
      
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      localStorage.removeItem(STORAGE_KEY);
      
      // Navigate to patient dashboard
      navigate('/patient/dashboard');
      
    } catch (error) {
      console.error('Error completing onboarding:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        variant: 'destructive',
      });
    }
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è 7-—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  const canGoNext = () => {
    switch (currentStep) {
      case 1:
        return true; // Welcome step
      case 2:
        // BasicInfoStep - —Ç—Ä–µ–±—É—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        return formData.basicInfo && 
               formData.basicInfo.age > 0 && 
               formData.basicInfo.height > 0 && 
               formData.basicInfo.weight > 0;
      case 3:
        // MenstrualHistoryStep - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
        return formData.menstrualHistory && 
               formData.menstrualHistory.ageOfFirstPeriod > 0;
      case 4:
        // SymptomsStep - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
        return formData.symptoms && (
          formData.symptoms.hotFlashes?.frequency !== undefined ||
          formData.symptoms.nightSweats?.frequency !== undefined ||
          formData.symptoms.sleepProblems?.frequency !== undefined ||
          formData.symptoms.moodChanges?.frequency !== undefined
        );
      case 5:
        // MedicalHistoryStep - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–∞–∂–µ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã)
        return formData.medicalHistory !== undefined;
      case 6:
        // LifestyleStep - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        return formData.lifestyle && 
               formData.lifestyle.exerciseFrequency !== undefined &&
               formData.lifestyle.dietType !== undefined &&
               formData.lifestyle.smokingStatus !== undefined &&
               formData.lifestyle.alcoholConsumption !== undefined;
      case 7:
        // GoalsStep - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –∏–ª–∏ –∑–∞–±–æ—Ç—ã
        return formData.goals && (
          (formData.goals.primaryConcerns && formData.goals.primaryConcerns.length > 0) ||
          (formData.goals.goals && formData.goals.goals.length > 0)
        );
      default:
        return false;
    }
  };

  if (showResults && phaseResult && recommendations) {
    return (
      <PatientLayout title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞">
        <OnboardingResults
          phaseResult={phaseResult}
          recommendations={recommendations}
          onboardingData={formData}
          onComplete={handleOnboardingComplete}
        />
      </PatientLayout>
    );
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ 1-7
  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1:
        return <WelcomeStep onNext={handleNext} />;
      case 2:
        return (
          <BasicInfoStep
            data={formData.basicInfo}
            onChange={(data) => updateFormData({ basicInfo: data })}
          />
        );
      case 3:
        return (
          <MenstrualHistoryStep
            data={formData.menstrualHistory}
            onChange={(data) => updateFormData({ menstrualHistory: data })}
          />
        );
      case 4:
        return (
          <SymptomsStep
            data={formData.symptoms}
            onChange={(data) => updateFormData({ symptoms: data })}
          />
        );
      case 5:
        return (
          <MedicalHistoryStep
            data={formData.medicalHistory}
            onChange={(data) => updateFormData({ medicalHistory: data })}
          />
        );
      case 6:
        return (
          <LifestyleStep
            data={formData.lifestyle}
            onChange={(data) => updateFormData({ lifestyle: data })}
          />
        );
      case 7:
        return (
          <GoalsStep
            data={formData.goals}
            onChange={(data) => updateFormData({ goals: data })}
          />
        );
      default:
        return null;
    }
  };

  return (
    <PatientLayout title={onboardingPresets ? `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è "${getPersonaTitle(onboardingPresets.persona.id)}"` : "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ bloom"}>
      <div className="min-h-screen">
        {/* ‚úÖ –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
        {(dataLoadingStatus.dataBridge || dataLoadingStatus.registration) && (
          <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center space-x-2 text-sm">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span className="text-green-800">
                ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                {onboardingPresets && ` ‚Ä¢ ${onboardingPresets.onboardingConfig.estimatedDuration}`}
              </span>
            </div>
          </div>
        )}

        <OnboardingProgress
          currentStep={currentStep}
          totalSteps={TOTAL_STEPS}
          stepTitles={stepTitles}
        />

        {currentStep === 1 ? (
          renderCurrentStep()
        ) : (
          <StepWrapper
            title={stepTitles[currentStep - 1]}
            description={onboardingPresets ? 
              `–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è "${getPersonaTitle(onboardingPresets.persona.id)}"` :
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞"
            }
            onNext={handleNext}
            onPrev={handlePrev}
            canGoNext={canGoNext()}
            isFirstStep={currentStep === 1}
            isLastStep={currentStep === TOTAL_STEPS}
          >
            {renderCurrentStep()}
          </StepWrapper>
        )}

        {isLoading && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-bloom-dusty-rose mx-auto mb-4"></div>
              <p className="text-foreground">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...</p>
            </div>
          </div>
        )}

        {/* ‚úÖ –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-8 bg-gray-100 p-4 rounded-lg">
            <h3 className="font-bold text-sm">üîç Debug Info:</h3>
            <div className="text-xs space-y-1">
              <p>Current Step: {currentStep}/{TOTAL_STEPS}</p>
              <p>Step Title: {stepTitles[currentStep - 1]}</p>
              <p>Can Go Next: {canGoNext() ? '‚úÖ' : '‚ùå'}</p>
              <p>Form Data Keys: {Object.keys(formData).join(', ')}</p>
              <p>Data Status: {JSON.stringify(dataLoadingStatus)}</p>
            </div>
            <details className="mt-2">
              <summary className="text-xs font-medium cursor-pointer">View Form Data</summary>
              <pre className="text-xs bg-white p-2 rounded mt-1 overflow-auto max-h-32">
                {JSON.stringify(formData, null, 2)}
              </pre>
            </details>
          </div>
        )}
      </div>
    </PatientLayout>
  );
};

// ‚úÖ –ù–û–í–û–ï: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã
const getPersonaTitle = (personaId: string) => {
  const titles = {
    'first_signs': '–ü–µ—Ä–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏',
    'active_phase': '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞', 
    'postmenopause': '–ü–æ—Å—Ç–º–µ–Ω–æ–ø–∞—É–∑–∞'
  };
  return titles[personaId as keyof typeof titles] || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å';
};

export default PatientOnboarding;
