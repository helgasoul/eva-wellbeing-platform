
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { generateId, showNotification } from '@/utils/dataUtils';
import { PatientLayout } from '@/components/layout/PatientLayout';
import { OnboardingProgress } from '@/components/onboarding/OnboardingProgress';
import { StepWrapper } from '@/components/onboarding/StepWrapper';
import { OnboardingResults } from '@/components/onboarding/OnboardingResults';
import { WelcomeStep } from '@/components/onboarding/steps/WelcomeStep';
import { BasicInfoStep } from '@/components/onboarding/steps/BasicInfoStep';
import { MenstrualHistoryStep } from '@/components/onboarding/steps/MenstrualHistoryStep';
import { SymptomsStep } from '@/components/onboarding/steps/SymptomsStep';
import { MedicalHistoryStep } from '@/components/onboarding/steps/MedicalHistoryStep';
import { LifestyleStep } from '@/components/onboarding/steps/LifestyleStep';
import { GoalsStep } from '@/components/onboarding/steps/GoalsStep';
import GeolocationStep from '@/components/onboarding/steps/GeolocationStep';
import { OnboardingData } from '@/types/onboarding';
import { weatherService } from '@/services/weatherService';
import { supabase } from '@/integrations/supabase/client';
import { detectMenopausePhase } from '@/utils/menopausePhaseDetector';
import { generateRecommendations } from '@/utils/personalizedRecommendations';
import { toast } from '@/hooks/use-toast';
import { DataBridge, OnboardingPresets } from '@/services/DataBridge';
import { onboardingService } from '@/services/onboardingService';
import { migrateOnboardingData } from '@/utils/onboardingMigration';

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è 7-—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
const TOTAL_STEPS = 7;
const STORAGE_KEY = 'bloom-onboarding-data';

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
const ONBOARDING_STEPS = [
  {
    step: 1,
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
    component: 'WelcomeStep',
    isRequired: true,
    dataKey: null
  },
  {
    step: 2, 
    title: '–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    component: 'BasicInfoStep',
    isRequired: true,
    dataKey: 'basicInfo'
  },
  {
    step: 3,
    title: '–ò—Å—Ç–æ—Ä–∏—è –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞', 
    component: 'MenstrualHistoryStep',
    isRequired: true,
    dataKey: 'menstrualHistory'
  },
  {
    step: 4,
    title: '–¢–µ–∫—É—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –º–µ–Ω–æ–ø–∞—É–∑—ã',
    component: 'SymptomsStep',
    isRequired: true,
    dataKey: 'symptoms'
  },
  {
    step: 5,
    title: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
    component: 'MedicalHistoryStep',
    isRequired: true,
    dataKey: 'medicalHistory'
  },
  {
    step: 6,
    title: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
    component: 'LifestyleStep',
    isRequired: true,
    dataKey: 'lifestyle'
  },
  {
    step: 7,
    title: '–¶–µ–ª–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã', 
    component: 'GoalsStep',
    isRequired: true,
    dataKey: 'goals'
  }
];

const stepTitles = ONBOARDING_STEPS.map(step => step.title);

const PatientOnboarding = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<OnboardingData>({});
  const [isLoading, setIsLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [showGeolocation, setShowGeolocation] = useState(false); // ‚úÖ –ù–û–í–û–ï: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  const [phaseResult, setPhaseResult] = useState(null);
  const [recommendations, setRecommendations] = useState(null);
  const [onboardingPresets, setOnboardingPresets] = useState<OnboardingPresets | null>(null);
  const [dataLoadingStatus, setDataLoadingStatus] = useState({
    registration: false,
    onboarding: false,
    dataBridge: false,
    geolocation: false // ‚úÖ –ù–û–í–û–ï: —Å—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  });
  
  const { user, completeOnboarding, updateUser, saveUserData, loadUserData } = useAuth();
  const navigate = useNavigate();

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!user) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.onboardingCompleted) {
      console.log('‚úÖ User has already completed onboarding, redirecting to dashboard');
      navigate('/patient/dashboard', { replace: true });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    const migrationResult = migrateOnboardingData();
    if (migrationResult.migrationPerformed && migrationResult.onboardingCompleted) {
      console.log('‚úÖ Migrated onboarding completion from localStorage');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AuthContext
      updateUser({ 
        onboardingCompleted: true,
        onboardingData: migrationResult.onboardingData
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      toast({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!',
        description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
      });
      
      navigate('/patient/dashboard', { replace: true });
      return;
    }

    console.log('üîÑ User needs to complete onboarding');
  }, [user, navigate, updateUser]);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DataBridge
  useEffect(() => {
    const loadOnboardingData = async () => {
      if (!user?.id) return;
      
      try {
        console.log('üîÑ PatientOnboarding: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataBridge...');
        
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        const savedProgress = await loadUserData('onboarding_progress');
        if (savedProgress) {
          setFormData(prev => ({ ...prev, ...savedProgress.data }));
          setCurrentStep(savedProgress.currentStep || 1);
          setDataLoadingStatus(prev => ({ ...prev, onboarding: true }));
          console.log(`üì• PatientOnboarding: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —à–∞–≥–µ ${savedProgress.currentStep}`);
          
          toast({
            title: '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
          });
          return;
        }

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
        const { data: supabaseData } = await onboardingService.loadUserOnboarding(user.id);
        
        if (supabaseData && Object.keys(supabaseData).length > 0) {
          console.log('‚úÖ Loading onboarding data from Supabase:', Object.keys(supabaseData));
          setFormData(supabaseData);
          setDataLoadingStatus(prev => ({ ...prev, onboarding: true }));
          
          toast({
            title: '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞',
          });
        } else {
          // 3. Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DataBridge
          const dataBridge = DataBridge.getInstance();
          const presets = dataBridge.getOnboardingPresets();
          
          if (presets) {
            console.log('‚úÖ Loading data via DataBridge:', presets);
            setOnboardingPresets(presets);
            
            const presetsFormData = {
              basicInfo: {
                age: 0,
                height: 0,
                weight: 0,
                location: '',
                occupation: '',
                hasChildren: false,
                ...presets.prefills.basicInfo
              },
              registrationPersona: presets.persona.id,
              fromRegistration: true,
              expectedPath: presets.persona.onboardingPath,
              onboardingConfig: presets.onboardingConfig
            };
            
            setFormData(presetsFormData);
            setDataLoadingStatus(prev => ({ ...prev, dataBridge: true }));
            
            toast({
              title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!',
              description: `–ê–Ω–∫–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è "${getPersonaTitle(presets.persona.id)}" ‚Ä¢ ${presets.onboardingConfig.estimatedDuration}`,
            });
          } else {
            // 4. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: localStorage
            const savedOnboardingData = localStorage.getItem(STORAGE_KEY);
            if (savedOnboardingData) {
              try {
                const saved = JSON.parse(savedOnboardingData);
                setFormData(saved);
                setDataLoadingStatus(prev => ({ ...prev, onboarding: true }));
                console.log('‚úÖ Loading saved onboarding progress from localStorage');
              } catch (error) {
                console.error('Failed to load saved onboarding data:', error);
              }
            }
          }
        }
        
      } catch (error) {
        console.error('Error loading onboarding data:', error);
      }
    };
    
    loadOnboardingData();
  }, [user?.id, loadUserData]);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï: –ß–µ—Ä–µ–∑ DataBridge —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Supabase
  useEffect(() => {
    const saveOnboardingData = async () => {
      if (!user?.id || Object.keys(formData).length === 0) return;
      
      try {
        // 1. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ DataBridge
        await saveUserData('onboarding_progress', {
          data: formData,
          currentStep,
          timestamp: new Date().toISOString()
        });

        // 2. –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
        localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));
        
        // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —à–∞–≥ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Supabase
        const stepMapping = [
          { key: 'basicInfo', stepNumber: 2, stepName: 'basicInfo' },
          { key: 'menstrualHistory', stepNumber: 3, stepName: 'menstrualHistory' },
          { key: 'symptoms', stepNumber: 4, stepName: 'symptoms' },
          { key: 'medicalHistory', stepNumber: 5, stepName: 'medicalHistory' },
          { key: 'lifestyle', stepNumber: 6, stepName: 'lifestyle' },
          { key: 'goals', stepNumber: 7, stepName: 'goals' }
        ];
        
        // 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
        const currentStepData = stepMapping.find(s => s.stepNumber === currentStep);
        if (currentStepData && formData[currentStepData.key]) {
          onboardingService.saveStep(
            user.id,
            currentStepData.stepNumber,
            currentStepData.stepName,
            formData[currentStepData.key]
          ).catch(error => {
            console.warn('‚ö†Ô∏è Supabase save failed, but data saved locally:', error);
          });
        }
        
        console.log('üíæ Onboarding data auto-saved:', {
          step: currentStep,
          dataKeys: Object.keys(formData),
          timestamp: new Date().toISOString()
        });
        
      } catch (error) {
        console.error('Error saving onboarding data:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        if (!localStorage.getItem(STORAGE_KEY)) {
          showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 'warning');
        }
      }
    };
    
    // –î–µ–±–∞—É–Ω—Å–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const timeoutId = setTimeout(saveOnboardingData, 1000);
    return () => clearTimeout(timeoutId);
  }, [formData, currentStep, user?.id, saveUserData]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const updateFormData = (stepData: Partial<OnboardingData>) => {
    setFormData(prev => {
      const newData = { ...prev, ...stepData };
      console.log('üìù Form data updated:', {
        step: currentStep,
        updated: Object.keys(stepData),
        newKeys: Object.keys(newData)
      });
      return newData;
    });
  };

  const handleNext = () => {
    if (currentStep < TOTAL_STEPS) {
      setCurrentStep(prev => prev + 1);
    } else {
      handleComplete();
    }
  };

  const handlePrev = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleComplete = async () => {
    setIsLoading(true);
    
    try {
      // Detect menopause phase
      const phase = detectMenopausePhase(formData);
      
      // Generate recommendations
      const recs = generateRecommendations(
        phase,
        formData.symptoms!,
        formData.lifestyle!
      );

      setPhaseResult(phase);
      setRecommendations(recs);
      setShowResults(true);

      toast({
        title: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
      });

    } catch (error) {
      console.error('Error completing onboarding:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —à–∞–≥–∞ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const handleGeolocationComplete = async (data: { location: any, weather: any }) => {
    try {
      const { location, weather } = data;
      
      const geolocationData = {
        location,
        weather,
        recordedAt: new Date().toISOString()
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      updateFormData({ geolocation: geolocationData });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (user?.id) {
        const { error: locationError } = await supabase
          .from('user_locations')
          .upsert({
            user_id: user.id,
            location_data: location,
            is_active: true
          });

        if (locationError) {
          console.error('Error saving user location:', locationError);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await weatherService.saveWeatherData(user.id, location, weather);
        
        console.log('‚úÖ Location and weather data saved for user:', user.id);
      }

      setDataLoadingStatus(prev => ({ ...prev, geolocation: true }));
      setShowGeolocation(false);
      setShowResults(true); // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
      
      toast({
        title: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!',
        description: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–º–∞—Ç–∞.',
      });

    } catch (error) {
      console.error('Error handling geolocation completion:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–æ –ø–æ–∑–∂–µ.',
        variant: 'destructive',
      });
    }
  };

  const handleStartGeolocation = () => {
    setShowResults(false);
    setShowGeolocation(true);
  };

  const handleSkipGeolocation = () => {
    console.log('üìç User skipped geolocation setup');
    setShowGeolocation(false);
    setShowResults(true); // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  };

  const handleOnboardingComplete = async () => {
    try {
      console.log('üéØ Starting onboarding completion process', {
        userId: user?.id,
        hasPhaseResult: !!phaseResult,
        hasRecommendations: !!recommendations,
        hasFormData: !!formData,
        hasGeolocation: !!formData.geolocation
      });

      // Clear forced onboarding flag
      sessionStorage.removeItem('forcedOnboarding');
      console.log('üßπ Cleared forced onboarding flag');

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ AuthContext
      const onboardingSummary = {
        phaseResult,
        recommendations,
        formData,
        completedAt: new Date().toISOString()
      };
      
      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DataBridge
      await saveUserData('onboarding_data', {
        ...formData,
        phaseResult,
        recommendations,
        completedAt: new Date().toISOString(),
        version: '1.0'
      });

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
      await updateUser({ 
        onboardingCompleted: true,
        onboardingData: onboardingSummary
      });
      
      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      localStorage.setItem('onboardingCompleted', 'true');
      localStorage.setItem('onboardingData', JSON.stringify(onboardingSummary));
      
      // 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ Supabase
      try {
        await completeOnboarding(onboardingSummary);
        console.log('‚úÖ Onboarding saved to Supabase');
      } catch (supabaseError) {
        console.warn('‚ö†Ô∏è Failed to save onboarding to Supabase, but user updated locally:', supabaseError);
      }
      
      // 5. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const dataBridge = DataBridge.getInstance();
      dataBridge.cleanupTransferData();
      await saveUserData('onboarding_progress', null); // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      localStorage.removeItem(STORAGE_KEY);
      
      console.log('‚úÖ Onboarding completion successful, navigating to dashboard');
      
      // 5. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard
      navigate('/patient/dashboard', { replace: true });
      
    } catch (error) {
      console.error('‚ùå Error completing onboarding:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        variant: 'destructive',
      });
    }
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è 7-—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const canGoNext = () => {
    console.log(`üîç Validating step ${currentStep}:`, {
      step: currentStep,
      formData: formData,
      stepName: ONBOARDING_STEPS[currentStep - 1]?.title
    });

    switch (currentStep) {
      case 1:
        return true; // Welcome step
      case 2:
        // BasicInfoStep - —Ç—Ä–µ–±—É—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const basicValid = formData.basicInfo && 
               formData.basicInfo.age > 0 && 
               formData.basicInfo.height > 0 && 
               formData.basicInfo.weight > 0;
        console.log(`üìä BasicInfo validation:`, { basicValid, data: formData.basicInfo });
        return basicValid;
      case 3:
        // MenstrualHistoryStep - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
        const menstrualValid = formData.menstrualHistory && 
               formData.menstrualHistory.ageOfFirstPeriod > 0;
        console.log(`ü©∏ MenstrualHistory validation:`, { menstrualValid, data: formData.menstrualHistory });
        return menstrualValid;
      case 4:
        // SymptomsStep - —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –µ—Å–ª–∏:
        // 1. –ó–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ (–≤–∫–ª—é—á–∞—è "never") –ò–õ–ò
        // 2. –í—ã–±—Ä–∞–Ω–æ "–Ω–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ" –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö/–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
        const symptomsValid = formData.symptoms && (
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã
          (formData.symptoms.hotFlashes?.frequency !== undefined ||
           formData.symptoms.nightSweats?.frequency !== undefined ||
           formData.symptoms.sleepProblems?.frequency !== undefined ||
           formData.symptoms.moodChanges?.frequency !== undefined) ||
          // –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö (–≤–∫–ª—é—á–∞—è "none_of_the_above")
          (formData.symptoms.physicalSymptoms?.length > 0 ||
           formData.symptoms.cognitiveSymptoms?.length > 0)
        );
        console.log(`üò∑ Symptoms validation:`, { 
          symptomsValid, 
          hasFrequencyData: !!(formData.symptoms?.hotFlashes?.frequency !== undefined ||
                              formData.symptoms?.nightSweats?.frequency !== undefined ||
                              formData.symptoms?.sleepProblems?.frequency !== undefined ||
                              formData.symptoms?.moodChanges?.frequency !== undefined),
          hasSymptomArrays: !!(formData.symptoms?.physicalSymptoms?.length > 0 ||
                              formData.symptoms?.cognitiveSymptoms?.length > 0),
          data: formData.symptoms 
        });
        return symptomsValid;
      case 5:
        // MedicalHistoryStep - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–∞–∂–µ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã)
        const medicalValid = formData.medicalHistory !== undefined;
        console.log(`üè• MedicalHistory validation:`, { medicalValid, data: formData.medicalHistory });
        return medicalValid;
      case 6:
        // LifestyleStep - —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const lifestyleValid = formData.lifestyle && 
               formData.lifestyle.exerciseFrequency !== undefined &&
               formData.lifestyle.dietType !== undefined &&
               formData.lifestyle.smokingStatus !== undefined &&
               formData.lifestyle.alcoholConsumption !== undefined &&
               formData.lifestyle.stressLevel !== undefined &&
               formData.lifestyle.sleepHours !== undefined;
        console.log(`üèÉ‚Äç‚ôÄÔ∏è Lifestyle validation:`, { lifestyleValid, data: formData.lifestyle });
        return lifestyleValid;
      case 7:
        // GoalsStep - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –∏–ª–∏ –∑–∞–±–æ—Ç—ã
        const goalsValid = formData.goals && (
          (formData.goals.primaryConcerns && formData.goals.primaryConcerns.length > 0) ||
          (formData.goals.goals && formData.goals.goals.length > 0)
        );
        console.log(`üéØ Goals validation:`, { goalsValid, data: formData.goals });
        return goalsValid;
      default:
        console.warn(`‚ö†Ô∏è Unknown step ${currentStep}`);
        return false;
    }
  };

  // ‚úÖ –ù–û–í–û–ï: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
  if (showGeolocation) {
    return (
      <PatientLayout title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏" hideSidebar={true}>
        <div className="max-w-2xl mx-auto">
          <div className="mb-6 text-center">
            <h2 className="text-2xl font-playfair font-bold text-foreground mb-2">
              –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –Ω–∞—Å—Ç—Ä–æ–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            </h2>
            <p className="text-muted-foreground">
              –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–º–∞—Ç–∞ –∏ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
            </p>
          </div>
          
          <GeolocationStep
            data={formData.geolocation}
            onChange={handleGeolocationComplete}
            onSkip={handleSkipGeolocation}
          />
        </div>
      </PatientLayout>
    );
  }

  if (showResults && phaseResult && recommendations) {
    return (
      <PatientLayout title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞" hideSidebar={true}>
        <OnboardingResults
          phaseResult={phaseResult}
          recommendations={recommendations}
          onboardingData={formData}
          onComplete={handleOnboardingComplete}
          onSetupGeolocation={handleStartGeolocation}
          hasGeolocation={!!formData.geolocation}
        />
      </PatientLayout>
    );
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ 1-7
  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1:
        return <WelcomeStep onNext={handleNext} />;
      case 2:
        return (
          <BasicInfoStep
            data={formData.basicInfo}
            onChange={(data) => updateFormData({ basicInfo: data })}
          />
        );
      case 3:
        return (
          <MenstrualHistoryStep
            data={formData.menstrualHistory}
            onChange={(data) => updateFormData({ menstrualHistory: data })}
          />
        );
      case 4:
        return (
          <SymptomsStep
            data={formData.symptoms}
            onChange={(data) => updateFormData({ symptoms: data })}
          />
        );
      case 5:
        return (
          <MedicalHistoryStep
            data={formData.medicalHistory}
            onChange={(data) => updateFormData({ medicalHistory: data })}
          />
        );
      case 6:
        return (
          <LifestyleStep
            data={formData.lifestyle}
            onChange={(data) => updateFormData({ lifestyle: data })}
          />
        );
      case 7:
        return (
          <GoalsStep
            data={formData.goals}
            onChange={(data) => updateFormData({ goals: data })}
          />
        );
      default:
        return null;
    }
  };

  return (
    <PatientLayout title={onboardingPresets ? `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è "${getPersonaTitle(onboardingPresets.persona.id)}"` : "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –±–µ–∑ | –ø–∞—É–∑—ã"} hideSidebar={true}>
      <div className="min-h-screen">
        {/* ‚úÖ –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
        {(dataLoadingStatus.dataBridge || dataLoadingStatus.registration) && (
          <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center space-x-2 text-sm">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span className="text-green-800">
                ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                {onboardingPresets && ` ‚Ä¢ ${onboardingPresets.onboardingConfig.estimatedDuration}`}
              </span>
            </div>
          </div>
        )}

        <OnboardingProgress
          currentStep={currentStep}
          totalSteps={TOTAL_STEPS}
          stepTitles={stepTitles}
        />

        {currentStep === 1 ? (
          renderCurrentStep()
        ) : (
          <StepWrapper
            title={stepTitles[currentStep - 1]}
            description={onboardingPresets ? 
              `–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è "${getPersonaTitle(onboardingPresets.persona.id)}"` :
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞"
            }
            onNext={handleNext}
            onPrev={handlePrev}
            canGoNext={canGoNext()}
            isFirstStep={currentStep === 1}
            isLastStep={currentStep === TOTAL_STEPS}
          >
            {renderCurrentStep()}
          </StepWrapper>
        )}

        {isLoading && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-bloom-dusty-rose mx-auto mb-4"></div>
              <p className="text-foreground">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...</p>
            </div>
          </div>
        )}

        {/* ‚úÖ –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-8 bg-gray-100 p-4 rounded-lg">
            <h3 className="font-bold text-sm">üîç Debug Info:</h3>
            <div className="text-xs space-y-1">
              <p>Current Step: {currentStep}/{TOTAL_STEPS}</p>
              <p>Step Title: {stepTitles[currentStep - 1]}</p>
              <p>Can Go Next: {canGoNext() ? '‚úÖ' : '‚ùå'}</p>
              <p>Form Data Keys: {Object.keys(formData).join(', ')}</p>
              <p>Data Status: {JSON.stringify(dataLoadingStatus)}</p>
            </div>
            <details className="mt-2">
              <summary className="text-xs font-medium cursor-pointer">View Form Data</summary>
              <pre className="text-xs bg-white p-2 rounded mt-1 overflow-auto max-h-32">
                {JSON.stringify(formData, null, 2)}
              </pre>
            </details>
          </div>
        )}
      </div>
    </PatientLayout>
  );
};

// ‚úÖ –ù–û–í–û–ï: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã
const getPersonaTitle = (personaId: string) => {
  const titles = {
    'first_signs': '–ü–µ—Ä–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏',
    'active_phase': '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞', 
    'postmenopause': '–ü–æ—Å—Ç–º–µ–Ω–æ–ø–∞—É–∑–∞'
  };
  return titles[personaId as keyof typeof titles] || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å';
};

export default PatientOnboarding;
