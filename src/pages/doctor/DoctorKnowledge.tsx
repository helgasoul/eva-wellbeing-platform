import React, { useState } from 'react';
import { DoctorLayout } from '@/components/layout/DoctorLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { BookOpen, Search, Star, Download, ExternalLink } from 'lucide-react';

interface KnowledgeItem {
  id: string;
  title: string;
  category: string;
  description: string;
  rating: number;
  downloadCount: number;
  type: 'article' | 'guideline' | 'research' | 'protocol';
  tags: string[];
}

const mockKnowledge: KnowledgeItem[] = [
  {
    id: '1',
    title: '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é –°–ü–ö–Ø',
    category: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è',
    description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –ª–µ—á–µ–Ω–∏—é —Å–∏–Ω–¥—Ä–æ–º–∞ –ø–æ–ª–∏–∫–∏—Å—Ç–æ–∑–Ω—ã—Ö —è–∏—á–Ω–∏–∫–æ–≤',
    rating: 4.8,
    downloadCount: 1250,
    type: 'guideline',
    tags: ['–°–ü–ö–Ø', '–ì–æ—Ä–º–æ–Ω—ã', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞']
  },
  {
    id: '2',
    title: '–ú–µ–Ω–æ–ø–∞—É–∑–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã 2024',
    category: '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è',
    description: '–ù–æ–≤—ã–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ–¥–µ–Ω–∏—é –∂–µ–Ω—â–∏–Ω –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–æ–ø–∞—É–∑—ã',
    rating: 4.9,
    downloadCount: 890,
    type: 'protocol',
    tags: ['–ú–µ–Ω–æ–ø–∞—É–∑–∞', '–ì–ó–¢', '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞']
  },
  {
    id: '3',
    title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –ø–∏—Ç–∞–Ω–∏–µ –∏ –∂–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
    category: '–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è',
    description: '–í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∂–µ–Ω—â–∏–Ω',
    rating: 4.6,
    downloadCount: 567,
    type: 'research',
    tags: ['–ü–∏—Ç–∞–Ω–∏–µ', '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–†–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è']
  }
];

export default function DoctorKnowledge() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');

  const filteredKnowledge = mockKnowledge.filter(item =>
    item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'guideline':
        return 'üìã';
      case 'protocol':
        return 'üìù';
      case 'research':
        return 'üî¨';
      case 'article':
        return 'üìÑ';
      default:
        return 'üìñ';
    }
  };

  const getTypeBadge = (type: string) => {
    switch (type) {
      case 'guideline':
        return <Badge variant="default">–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</Badge>;
      case 'protocol':
        return <Badge variant="secondary">–ü—Ä–æ—Ç–æ–∫–æ–ª</Badge>;
      case 'research':
        return <Badge variant="outline">–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</Badge>;
      case 'article':
        return <Badge variant="destructive">–°—Ç–∞—Ç—å—è</Badge>;
      default:
        return <Badge>–ú–∞—Ç–µ—Ä–∏–∞–ª</Badge>;
    }
  };

  return (
    <DoctorLayout>
      <div className="container mx-auto p-6">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold text-foreground">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h1>
            <p className="text-muted-foreground">–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</p>
          </div>
          <Button>
            <ExternalLink className="w-4 h-4 mr-2" />
            –í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
          </Button>
        </div>

        <div className="mb-6">
          <div className="relative">
            <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        <div className="grid gap-6">
          {filteredKnowledge.map((item) => (
            <Card key={item.id} className="hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-2xl">{getTypeIcon(item.type)}</span>
                      <h3 className="text-xl font-semibold text-foreground">{item.title}</h3>
                      {getTypeBadge(item.type)}
                    </div>
                    
                    <p className="text-muted-foreground mb-3">{item.description}</p>
                    
                    <div className="flex items-center space-x-4 mb-3">
                      <div className="flex items-center">
                        <Star className="w-4 h-4 text-yellow-500 mr-1" />
                        <span className="text-sm">{item.rating}</span>
                      </div>
                      <div className="flex items-center">
                        <Download className="w-4 h-4 text-muted-foreground mr-1" />
                        <span className="text-sm text-muted-foreground">{item.downloadCount}</span>
                      </div>
                      <Badge variant="outline">{item.category}</Badge>
                    </div>
                    
                    <div className="flex flex-wrap gap-2">
                      {item.tags.map((tag, index) => (
                        <Badge key={index} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  
                  <div className="flex flex-col space-y-2 ml-6">
                    <Button size="sm">
                      <BookOpen className="w-4 h-4 mr-2" />
                      –û—Ç–∫—Ä—ã—Ç—å
                    </Button>
                    <Button variant="outline" size="sm">
                      <Download className="w-4 h-4 mr-2" />
                      –°–∫–∞—á–∞—Ç—å
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredKnowledge.length === 0 && (
          <Card>
            <CardContent className="p-12 text-center">
              <BookOpen className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-foreground mb-2">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p className="text-muted-foreground">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </DoctorLayout>
  );
}