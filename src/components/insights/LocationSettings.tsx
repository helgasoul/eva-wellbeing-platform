import React, { useState } from 'react';
import { environmentalService } from '../../services/environmentalService';

interface LocationSettingsProps {
  currentLocation: { lat: number; lon: number; city: string } | null;
  onLocationUpdate: (location: { lat: number; lon: number; city: string }) => void;
  onError?: (error: string) => void;
}

export const LocationSettings: React.FC<LocationSettingsProps> = ({
  currentLocation,
  onLocationUpdate,
  onError
}) => {
  const [isDetecting, setIsDetecting] = useState(false);
  const [manualCity, setManualCity] = useState('');
  const [isSearching, setIsSearching] = useState(false);

  const detectCurrentLocation = async () => {
    setIsDetecting(true);
    try {
      if (!navigator.geolocation) {
        throw new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      }

      const position = await new Promise<GeolocationPosition>((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(
          resolve, 
          reject, 
          {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
          }
        );
      });

      const { latitude, longitude } = position.coords;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ reverse geocoding
      const city = await environmentalService.getCityName(latitude, longitude);
      
      onLocationUpdate({ lat: latitude, lon: longitude, city });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
      
      if (error.code === 1) {
        errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
      } else if (error.code === 2) {
        errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.';
      } else if (error.code === 3) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      }
      
      onError?.(errorMessage);
    } finally {
      setIsDetecting(false);
    }
  };

  const searchCityAndUpdate = async () => {
    if (!manualCity.trim()) return;
    
    setIsSearching(true);
    try {
      const coordinates = await environmentalService.getCityCoordinates(manualCity.trim());
      onLocationUpdate({ 
        lat: coordinates.lat, 
        lon: coordinates.lon, 
        city: manualCity.trim() 
      });
      setManualCity('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞:', error);
      onError?.('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.');
    } finally {
      setIsSearching(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !isSearching) {
      searchCityAndUpdate();
    }
  };

  return (
    <div className="bg-white rounded-lg p-4 border border-gray-200">
      <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
        üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      </h4>
      
      {/* –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
      {currentLocation && (
        <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm font-medium text-green-800">
                –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {currentLocation.city}
              </div>
              <div className="text-xs text-green-600 mt-1">
                {currentLocation.lat.toFixed(4)}, {currentLocation.lon.toFixed(4)}
              </div>
            </div>
            <div className="text-green-500 text-lg">‚úì</div>
          </div>
        </div>
      )}

      {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
      <div className="space-y-3">
        <button
          onClick={detectCurrentLocation}
          disabled={isDetecting}
          className="w-full bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {isDetecting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            </>
          )}
        </button>

        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <div className="flex items-center">
          <div className="flex-1 border-t border-gray-300"></div>
          <div className="px-3 text-sm text-gray-500">–∏–ª–∏</div>
          <div className="flex-1 border-t border-gray-300"></div>
        </div>

        {/* –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ */}
        <div className="space-y-2">
          <label className="text-sm font-medium text-gray-700">
            –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
          </label>
          <div className="flex gap-2">
            <input
              type="text"
              value={manualCity}
              onChange={(e) => setManualCity(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
              className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              onKeyPress={handleKeyPress}
              disabled={isSearching}
            />
            <button
              onClick={searchCityAndUpdate}
              disabled={isSearching || !manualCity.trim()}
              className="bg-purple-500 text-white px-4 py-3 rounded-lg hover:bg-purple-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              {isSearching ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                'üîç'
              )}
            </button>
          </div>
        </div>

        {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ */}
        <div>
          <div className="text-sm font-medium text-gray-700 mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:</div>
          <div className="flex flex-wrap gap-2">
            {['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å'].map((city) => (
              <button
                key={city}
                onClick={() => setManualCity(city)}
                className="text-xs bg-gray-100 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-200 transition-colors"
              >
                {city}
              </button>
            ))}
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <div className="flex items-start">
            <div className="text-blue-500 mr-2">üîí</div>
            <div className="text-xs text-blue-700">
              <div className="font-medium mb-1">–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</div>
              <div>
                –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞. 
                –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LocationSettings;