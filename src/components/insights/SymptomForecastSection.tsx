import React, { useState } from 'react';
import { PredictionResult, WeatherAlert } from '../../utils/environmentalAnalyzer';
import { WeatherData } from '../../services/environmentalService';
import { cn } from '../../lib/utils';

interface SymptomForecastSectionProps {
  forecast: PredictionResult | null;
  weatherForecast: WeatherData | null;
  alerts: WeatherAlert[];
  onLocationUpdate?: (location: { lat: number; lon: number }) => void;
  isLoading?: boolean;
}

export const SymptomForecastSection: React.FC<SymptomForecastSectionProps> = ({
  forecast,
  weatherForecast,
  alerts,
  onLocationUpdate,
  isLoading = false
}) => {
  if (isLoading) {
    return <LoadingForecast />;
  }

  if (!forecast) {
    return <NoForecastData />;
  }

  return (
    <div className="bg-white rounded-2xl shadow-lg p-6">
      <h2 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
        üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤
        <span className="ml-2 text-sm bg-green-100 text-green-700 px-2 py-1 rounded-full">
          –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã
        </span>
      </h2>

      {/* –ü–æ–≥–æ–¥–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã */}
      <WeatherAlertsComponent alerts={alerts} />
      
      {/* –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ */}
      <TomorrowForecast forecast={forecast} />
      
      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ */}
      <PreparationRecommendations forecast={forecast} />
      
      {/* –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ */}
      {weatherForecast && <WeeklyTrend forecast={forecast} weatherForecast={weatherForecast} />}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
const WeatherAlertsComponent = ({ alerts }: { alerts: WeatherAlert[] }) => {
  const [dismissedAlerts, setDismissedAlerts] = useState<string[]>([]);

  const getSeverityStyles = (severity: string) => {
    switch (severity) {
      case 'danger': return 'bg-red-50 border-red-200 text-red-800';
      case 'warning': return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      default: return 'bg-blue-50 border-blue-200 text-blue-800';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'danger': return 'üö®';
      case 'warning': return '‚ö†Ô∏è';
      default: return '‚ÑπÔ∏è';
    }
  };

  const visibleAlerts = alerts.filter(alert => 
    !dismissedAlerts.includes(`${alert.type}-${alert.showUntil}`) &&
    new Date(alert.showUntil) > new Date()
  );

  if (visibleAlerts.length === 0) return null;

  return (
    <div className="space-y-3 mb-6">
      <h3 className="font-semibold text-gray-800 flex items-center">
        <span className="mr-2">üå™Ô∏è</span>
        –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      </h3>
      {visibleAlerts.map((alert, index) => (
        <div
          key={`${alert.type}-${index}`}
          className={`border rounded-lg p-4 ${getSeverityStyles(alert.severity)}`}
        >
          <div className="flex items-start justify-between">
            <div className="flex items-start">
              <span className="text-lg mr-3">{getSeverityIcon(alert.severity)}</span>
              <div>
                <h4 className="font-semibold mb-1">{alert.title}</h4>
                <p className="text-sm mb-2">{alert.message}</p>
                <p className="text-xs font-medium">{alert.action}</p>
              </div>
            </div>
            <button
              onClick={() => setDismissedAlerts(prev => [...prev, `${alert.type}-${alert.showUntil}`])}
              className="text-gray-500 hover:text-gray-700 text-sm"
            >
              ‚úï
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

// –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
const TomorrowForecast = ({ forecast }: { forecast: PredictionResult }) => {
  const getSymptomPredictionIcon = (likelihood: number) => {
    if (likelihood > 70) return 'üî¥';
    if (likelihood > 40) return 'üü°';
    return 'üü¢';
  };

  const getSymptomPredictionText = (likelihood: number) => {
    if (likelihood > 70) return '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å';
    if (likelihood > 40) return '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å';
    return '–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å';
  };

  const getSymptomName = (symptom: string) => {
    const names: { [key: string]: string } = {
      hot_flashes: '–ü—Ä–∏–ª–∏–≤—ã',
      sleep_quality: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º',
      mood: '–ü–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
      headaches: '–ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏'
    };
    return names[symptom] || symptom;
  };

  return (
    <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 mb-6">
      <h3 className="font-semibold text-gray-800 mb-4 flex items-center">
        <span className="mr-2">üìÖ</span>
        –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        <span className="ml-2 text-sm bg-white text-gray-600 px-2 py-1 rounded-full">
          –¢–æ—á–Ω–æ—Å—Ç—å: {forecast.confidence}%
        </span>
      </h3>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
        {Object.entries(forecast.tomorrow_predictions).map(([symptom, data]) => (
          <div key={symptom} className="text-center bg-white rounded-lg p-3">
            <div className="text-2xl mb-2">
              {getSymptomPredictionIcon(data.likelihood)}
            </div>
            <div className="text-sm font-medium text-gray-700 mb-1">
              {getSymptomName(symptom)}
            </div>
            <div className="text-xs text-gray-600 mb-1">
              {getSymptomPredictionText(data.likelihood)}
            </div>
            <div className="text-lg font-bold text-gray-800">
              {data.likelihood}%
            </div>
            {data.predicted_value && (
              <div className="text-xs text-gray-500 mt-1">
                ~{data.predicted_value} {symptom === 'hot_flashes' ? '—Ä–∞–∑' : '/5'}
              </div>
            )}
          </div>
        ))}
      </div>

      {forecast.tomorrow_reason && (
        <div className="bg-white rounded-lg p-3">
          <div className="text-sm text-gray-700">
            <strong>–û—Å–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:</strong> {forecast.tomorrow_reason}
          </div>
        </div>
      )}
    </div>
  );
};

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
const PreparationRecommendations = ({ forecast }: { forecast: PredictionResult }) => {
  if (!forecast.preparation_tips || forecast.preparation_tips.length === 0) {
    return null;
  }

  return (
    <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
      <h3 className="font-semibold text-green-800 mb-3 flex items-center">
        <span className="mr-2">üí°</span>
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
      </h3>
      <div className="space-y-2">
        {forecast.preparation_tips.map((tip, index) => (
          <div key={index} className="flex items-start text-sm text-green-700">
            <span className="text-green-500 mr-2 mt-0.5">‚úì</span>
            <span>{tip}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
const WeeklyTrend = ({ 
  forecast, 
  weatherForecast 
}: { 
  forecast: PredictionResult; 
  weatherForecast: WeatherData;
}) => {
  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'improving': return 'üìà';
      case 'declining': return 'üìâ';
      default: return '‚û°Ô∏è';
    }
  };

  const getTrendText = (trend: string) => {
    switch (trend) {
      case 'improving': return '–£–ª—É—á—à–µ–Ω–∏–µ';
      case 'declining': return '–£—Ö—É–¥—à–µ–Ω–∏–µ';
      default: return '–°—Ç–∞–±–∏–ª—å–Ω–æ';
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'improving': return 'text-green-600 bg-green-50';
      case 'declining': return 'text-red-600 bg-red-50';
      default: return 'text-blue-600 bg-blue-50';
    }
  };

  return (
    <div className="border-t border-gray-200 pt-4">
      <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
        <span className="mr-2">üìä</span>
        –ù–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
      </h3>
      
      <div className="flex items-center justify-between">
        <div className={cn(
          "flex items-center px-3 py-2 rounded-lg",
          getTrendColor(forecast.weekly_trend)
        )}>
          <span className="mr-2">{getTrendIcon(forecast.weekly_trend)}</span>
          <span className="font-medium">{getTrendText(forecast.weekly_trend)}</span>
        </div>
        
        <div className="text-sm text-gray-600">
          –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
        </div>
      </div>
      
      {/* –ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é */}
      <div className="mt-4 grid grid-cols-7 gap-1">
        {weatherForecast.daily.temperature_2m_max.slice(0, 7).map((temp, index) => {
          const day = new Date();
          day.setDate(day.getDate() + index);
          const dayName = day.toLocaleDateString('ru', { weekday: 'short' });
          
          return (
            <div key={index} className="text-center bg-gray-50 rounded p-2">
              <div className="text-xs text-gray-600 mb-1">{dayName}</div>
              <div className="text-sm font-medium">{Math.round(temp)}¬∞</div>
              <div className="text-xs text-gray-500">
                {Math.round(weatherForecast.daily.pressure_msl[index])}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingForecast = () => (
  <div className="bg-white rounded-2xl shadow-lg p-6">
    <div className="animate-pulse">
      <div className="h-6 bg-gray-200 rounded w-1/3 mb-6"></div>
      <div className="bg-gray-100 rounded-lg p-4 mb-6">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className="text-center">
              <div className="h-8 w-8 bg-gray-200 rounded-full mx-auto mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-3/4 mx-auto mb-1"></div>
              <div className="h-3 bg-gray-200 rounded w-1/2 mx-auto"></div>
            </div>
          ))}
        </div>
      </div>
      <div className="h-20 bg-gray-200 rounded"></div>
    </div>
  </div>
);

// –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
const NoForecastData = () => (
  <div className="bg-white rounded-2xl shadow-lg p-6">
    <h2 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
      üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤
    </h2>
    <div className="bg-gray-50 rounded-lg p-6 text-center">
      <div className="text-4xl mb-3">üìä</div>
      <h3 className="font-semibold text-gray-800 mb-2">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞</h3>
      <p className="text-gray-600 text-sm">
        –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. 
        –ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –º—ã —Å–º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑.
      </p>
    </div>
  </div>
);

export default SymptomForecastSection;