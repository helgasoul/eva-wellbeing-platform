import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Doctor, Clinic } from '@/pages/patient/DoctorBooking';

interface AppointmentBookingStepProps {
  doctor: Doctor;
  clinic?: Clinic;
  consultationType: 'in_person' | 'online';
  onConsultationTypeChange: (type: 'in_person' | 'online') => void;
  selectedSlot: string;
  onSlotSelect: (slot: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export const AppointmentBookingStep: React.FC<AppointmentBookingStepProps> = ({
  doctor,
  clinic,
  consultationType,
  onConsultationTypeChange,
  selectedSlot,
  onSlotSelect,
  onNext,
  onBack
}) => {
  const [availableSlots, setAvailableSlots] = useState<string[]>([]);
  const [selectedDate, setSelectedDate] = useState<string>('');

  useEffect(() => {
    generateAvailableSlots();
  }, [doctor, selectedDate]);

  const generateAvailableSlots = () => {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    const slots: string[] = [];
    const today = new Date();
    
    for (let i = 1; i <= 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–∞—á–∞
      const dayName = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
      if (doctor.availability.days.includes(dayName)) {
        doctor.availability.time_slots.forEach(time => {
          const slotDateTime = new Date(date);
          const [hours, minutes] = time.split(':');
          slotDateTime.setHours(parseInt(hours), parseInt(minutes));
          slots.push(slotDateTime.toISOString());
        });
      }
    }
    
    setAvailableSlots(slots);
    if (!selectedDate) {
      setSelectedDate(slots[0]?.split('T')[0] || '');
    }
  };

  const getAvailableDates = () => {
    const dates = new Set(availableSlots.map(slot => slot.split('T')[0]));
    return Array.from(dates).sort();
  };

  const getSlotsForDate = (date: string) => {
    return availableSlots.filter(slot => slot.startsWith(date));
  };

  const formatTime = (isoString: string) => {
    return new Date(isoString).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString + 'T00:00:00').toLocaleDateString('ru-RU', {
      weekday: 'long',
      day: 'numeric',
      month: 'long'
    });
  };

  return (
    <div className="space-y-6">
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ –∏ –∫–ª–∏–Ω–∏–∫–µ */}
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <div className="flex items-center space-x-4 mb-4">
          <div className="w-16 h-16 bg-gradient-to-br from-primary to-primary/70 rounded-full flex items-center justify-center text-primary-foreground text-lg font-bold">
            {doctor.name.split(' ').map(n => n[0]).join('')}
          </div>
          <div>
            <h2 className="text-xl font-semibold gentle-text">{doctor.name}</h2>
            <p className="text-primary font-medium">{doctor.specialization}</p>
            {clinic && (
              <p className="text-sm soft-text">üè• {clinic.name}</p>
            )}
          </div>
        </div>
      </div>

      {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ */}
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <h3 className="text-lg font-semibold gentle-text mb-4">–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {doctor.consultation_types.includes('in_person') && (
            <button
              onClick={() => onConsultationTypeChange('in_person')}
              className={cn(
                "p-4 border-2 rounded-lg text-left transition-all duration-200",
                consultationType === 'in_person'
                  ? "border-primary bg-primary/10"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <div className="flex items-center mb-2">
                <span className="text-2xl mr-3">üè•</span>
                <span className="font-medium gentle-text">–û—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</span>
              </div>
              <p className="text-sm soft-text">
                –õ–∏—á–Ω—ã–π –ø—Ä–∏–µ–º –≤ –∫–ª–∏–Ω–∏–∫–µ. –ü–æ–ª–Ω—ã–π –æ—Å–º–æ—Ç—Ä –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.
              </p>
              <p className="text-sm font-medium text-primary mt-2">
                –æ—Ç {doctor.price_range.min.toLocaleString()} ‚ÇΩ
              </p>
            </button>
          )}

          {doctor.consultation_types.includes('online') && (
            <button
              onClick={() => onConsultationTypeChange('online')}
              className={cn(
                "p-4 border-2 rounded-lg text-left transition-all duration-200",
                consultationType === 'online'
                  ? "border-primary bg-primary/10"
                  : "border-gray-200 hover:border-gray-300"
              )}
            >
              <div className="flex items-center mb-2">
                <span className="text-2xl mr-3">üíª</span>
                <span className="font-medium gentle-text">–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</span>
              </div>
              <p className="text-sm soft-text">
                –í–∏–¥–µ–æ—Å–≤—è–∑—å –∏–∑ –¥–æ–º–∞. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
              </p>
              <p className="text-sm font-medium text-primary mt-2">
                –æ—Ç {Math.round(doctor.price_range.min * 0.8).toLocaleString()} ‚ÇΩ
              </p>
            </button>
          )}
        </div>
      </div>

      {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ */}
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <h3 className="text-lg font-semibold gentle-text mb-4">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</h3>
        
        {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
        <div className="mb-6">
          <h4 className="font-medium gentle-text mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {getAvailableDates().map(date => (
              <button
                key={date}
                onClick={() => setSelectedDate(date)}
                className={cn(
                  "p-3 border-2 rounded-lg text-center transition-all duration-200",
                  selectedDate === date
                    ? "border-primary bg-primary/10"
                    : "border-gray-200 hover:border-gray-300"
                )}
              >
                <div className="text-sm font-medium gentle-text">
                  {formatDate(date)}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ */}
        {selectedDate && (
          <div>
            <h4 className="font-medium gentle-text mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3">
              {getSlotsForDate(selectedDate).map(slot => (
                <button
                  key={slot}
                  onClick={() => onSlotSelect(slot)}
                  className={cn(
                    "p-3 border-2 rounded-lg text-center transition-all duration-200",
                    selectedSlot === slot
                      ? "border-primary bg-primary/10"
                      : "border-gray-200 hover:border-gray-300"
                  )}
                >
                  <div className="text-sm font-medium gentle-text">
                    {formatTime(slot)}
                  </div>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {consultationType === 'online' && (
        <div className="bloom-card bg-blue-50 border border-blue-200 p-4">
          <div className="flex items-start">
            <span className="text-blue-500 text-xl mr-3">üíª</span>
            <div>
              <h4 className="font-medium text-blue-800 mb-1">–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</h4>
              <p className="text-sm text-blue-600">
                –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
                –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞—é—â–∞—è –∫–∞–º–µ—Ä–∞.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="flex justify-between">
        <Button onClick={onBack} variant="outline">
          ‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞
        </Button>
        <Button
          onClick={onNext}
          disabled={!selectedSlot}
          className="bg-primary hover:bg-primary/90 text-primary-foreground"
        >
          –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Üí
        </Button>
      </div>
    </div>
  );
};