import React from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { LoadingSpinner } from '@/components/ui/loading-spinner';

interface SymptomsSelectionStepProps {
  selectedSymptoms: string[];
  onSymptomsChange: (symptoms: string[]) => void;
  consultationReason: string;
  onReasonChange: (reason: string) => void;
  onNext: () => void;
  isLoading?: boolean;
}

export const SymptomsSelectionStep: React.FC<SymptomsSelectionStepProps> = ({
  selectedSymptoms,
  onSymptomsChange,
  consultationReason,
  onReasonChange,
  onNext,
  isLoading = false
}) => {
  const symptomCategories = [
    {
      category: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –º–µ–Ω–æ–ø–∞—É–∑—ã',
      icon: 'üî•',
      symptoms: [
        { id: 'hot_flashes', label: '–ü—Ä–∏–ª–∏–≤—ã', icon: 'üî•', urgency: 'medium' },
        { id: 'night_sweats', label: '–ù–æ—á–Ω–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å', icon: 'üí¶', urgency: 'medium' },
        { id: 'irregular_periods', label: '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ', icon: 'üìÖ', urgency: 'medium' },
        { id: 'mood_changes', label: '–ü–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', icon: 'üòî', urgency: 'high' },
        { id: 'sleep_problems', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º', icon: 'üò¥', urgency: 'high' },
        { id: 'low_libido', label: '–°–Ω–∏–∂–µ–Ω–∏–µ –ª–∏–±–∏–¥–æ', icon: 'üíù', urgency: 'low' }
      ]
    },
    {
      category: '–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã',
      icon: 'üèÉ‚Äç‚ôÄÔ∏è',
      symptoms: [
        { id: 'weight_gain', label: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞', icon: '‚öñÔ∏è', urgency: 'medium' },
        { id: 'joint_pain', label: '–ë–æ–ª–∏ –≤ —Å—É—Å—Ç–∞–≤–∞—Ö', icon: 'ü¶¥', urgency: 'medium' },
        { id: 'headaches', label: '–ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏', icon: 'ü§ï', urgency: 'high' },
        { id: 'fatigue', label: '–£—Å—Ç–∞–ª–æ—Å—Ç—å', icon: 'üò¥', urgency: 'medium' },
        { id: 'dry_skin', label: '–°—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏', icon: 'üß¥', urgency: 'low' },
        { id: 'hair_loss', label: '–í—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å', icon: 'üíá‚Äç‚ôÄÔ∏è', urgency: 'low' }
      ]
    },
    {
      category: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã',
      icon: 'üß†',
      symptoms: [
        { id: 'anxiety', label: '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', icon: 'üò∞', urgency: 'high' },
        { id: 'depression', label: '–î–µ–ø—Ä–µ—Å—Å–∏—è', icon: 'üò¢', urgency: 'high' },
        { id: 'irritability', label: '–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', icon: 'üò†', urgency: 'medium' },
        { id: 'memory_issues', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é', icon: 'üß†', urgency: 'medium' },
        { id: 'concentration', label: '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π', icon: 'üéØ', urgency: 'medium' },
        { id: 'brain_fog', label: '–¢—É–º–∞–Ω –≤ –≥–æ–ª–æ–≤–µ', icon: '‚òÅÔ∏è', urgency: 'medium' }
      ]
    },
    {
      category: '–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
      icon: 'ü©∫',
      symptoms: [
        { id: 'vaginal_dryness', label: '–°—É—Ö–æ—Å—Ç—å –≤–ª–∞–≥–∞–ª–∏—â–∞', icon: 'üå∏', urgency: 'medium' },
        { id: 'urinary_issues', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏–µ–º', icon: 'üöΩ', urgency: 'high' },
        { id: 'bone_health', label: '–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ –∫–æ—Å—Ç—è—Ö', icon: 'ü¶¥', urgency: 'medium' },
        { id: 'heart_palpitations', label: '–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ', icon: '‚ù§Ô∏è', urgency: 'high' },
        { id: 'digestive_issues', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º', icon: 'ü´Ñ', urgency: 'medium' }
      ]
    }
  ];

  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case 'high': return 'border-red-300 bg-red-50 hover:bg-red-100';
      case 'medium': return 'border-yellow-300 bg-yellow-50 hover:bg-yellow-100';
      case 'low': return 'border-green-300 bg-green-50 hover:bg-green-100';
      default: return 'border-gray-300 bg-gray-50 hover:bg-gray-100';
    }
  };

  const getRecommendedSpecialist = () => {
    const hasHighUrgency = selectedSymptoms.some(symptomId => {
      const symptom = symptomCategories
        .flatMap(cat => cat.symptoms)
        .find(s => s.id === symptomId);
      return symptom?.urgency === 'high';
    });

    const hasPsychological = selectedSymptoms.some(s => 
      ['anxiety', 'depression', 'mood_changes'].includes(s)
    );

    const hasHormonal = selectedSymptoms.some(s => 
      ['hot_flashes', 'irregular_periods', 'night_sweats'].includes(s)
    );

    if (hasHighUrgency && hasPsychological) {
      return {
        type: 'urgent',
        specialist: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥ + –ü—Å–∏—Ö–æ–ª–æ–≥',
        message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
      };
    } else if (hasHormonal) {
      return {
        type: 'standard',
        specialist: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥',
        message: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –º–µ–Ω–æ–ø–∞—É–∑–µ'
      };
    } else if (hasPsychological) {
      return {
        type: 'standard',
        specialist: '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç',
        message: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º –º–µ–Ω–æ–ø–∞—É–∑—ã'
      };
    }

    return {
      type: 'general',
      specialist: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥',
      message: '–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é'
    };
  };

  const recommendation = getRecommendedSpecialist();

  return (
    <div className="space-y-6">
      
      {/* –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ */}
      {selectedSymptoms.length > 0 && (
        <div className={cn(
          "border-2 rounded-xl p-4",
          recommendation.type === 'urgent' ? 'border-red-300 bg-red-50' :
          recommendation.type === 'standard' ? 'border-blue-300 bg-blue-50' :
          'border-green-300 bg-green-50'
        )}>
          <div className="flex items-start">
            <span className="text-2xl mr-3">ü§ñ</span>
            <div>
              <h3 className="font-semibold gentle-text mb-1">
                –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation.specialist}
              </h3>
              <p className="text-sm soft-text">{recommendation.message}</p>
              {recommendation.type === 'urgent' && (
                <div className="mt-2 text-sm text-red-700 font-medium">
                  ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç—Ä–µ–±—É—é—Ç —Å–∫–æ—Ä–µ–π—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ */}
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <h2 className="text-xl font-semibold gentle-text mb-6">
          ü©∫ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏ –∂–∞–ª–æ–±—ã
        </h2>
        
        <div className="space-y-8">
          {symptomCategories.map((category, categoryIndex) => (
            <div key={categoryIndex}>
              <h3 className="text-lg font-medium gentle-text mb-4 flex items-center">
                <span className="mr-2">{category.icon}</span>
                {category.category}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                {category.symptoms.map((symptom) => (
                  <label
                    key={symptom.id}
                    className={cn(
                      "flex items-center p-3 border-2 rounded-lg cursor-pointer transition-all duration-200",
                      selectedSymptoms.includes(symptom.id)
                        ? "border-primary bg-primary/10"
                        : getUrgencyColor(symptom.urgency)
                    )}
                  >
                    <input
                      type="checkbox"
                      checked={selectedSymptoms.includes(symptom.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          onSymptomsChange([...selectedSymptoms, symptom.id]);
                        } else {
                          onSymptomsChange(selectedSymptoms.filter(s => s !== symptom.id));
                        }
                      }}
                      className="mr-3 rounded"
                    />
                    <span className="mr-2">{symptom.icon}</span>
                    <span className="text-sm font-medium gentle-text">{symptom.label}</span>
                    {symptom.urgency === 'high' && (
                      <span className="ml-auto text-red-500 text-xs">‚ö†Ô∏è</span>
                    )}
                  </label>
                ))}
              </div>
            </div>
          ))}
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-8">
          <label className="block text-sm font-medium gentle-text mb-2">
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏:
          </label>
          <Textarea
            value={consultationReason}
            onChange={(e) => onReasonChange(e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ, –∫–∞–∫ –¥–æ–ª–≥–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–∏–º–ø—Ç–æ–º—ã, —á—Ç–æ —É—Å—É–≥—É–±–ª—è–µ—Ç –∏–ª–∏ –æ–±–ª–µ–≥—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ..."
            rows={4}
            className="w-full"
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–∞–ª–µ–µ */}
        <div className="mt-8 flex justify-end">
          <Button
            onClick={onNext}
            disabled={selectedSymptoms.length === 0 || isLoading}
            className="bg-primary hover:bg-primary/90 text-primary-foreground px-6 py-3"
          >
            {isLoading ? (
              <>
                <LoadingSpinner className="mr-2 h-4 w-4" />
                –ü–æ–¥–±–∏—Ä–∞–µ–º –≤—Ä–∞—á–µ–π...
              </>
            ) : (
              '–ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤—Ä–∞—á–µ–π ‚Üí'
            )}
          </Button>
        </div>
      </div>
    </div>
  );
};