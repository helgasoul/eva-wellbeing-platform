import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { getPartnerClinics } from '@/services/doctorRecommendationService';
import { Doctor, Clinic } from '@/pages/patient/DoctorBooking';

interface DoctorSelectionStepProps {
  doctors: Doctor[];
  selectedSymptoms: string[];
  onDoctorSelect: (doctor: Doctor, clinic: Clinic) => void;
  onBack: () => void;
  isLoading?: boolean;
}

export const DoctorSelectionStep: React.FC<DoctorSelectionStepProps> = ({
  doctors,
  selectedSymptoms,
  onDoctorSelect,
  onBack,
  isLoading = false
}) => {
  const [clinics, setClinics] = useState<Clinic[]>([]);
  const [filters, setFilters] = useState({
    specialization: 'all',
    consultationType: 'all',
    priceRange: 'all',
    rating: 0,
    availability: 'all'
  });

  useEffect(() => {
    loadClinicsData();
  }, []);

  const loadClinicsData = async () => {
    try {
      const clinicsData = await getPartnerClinics();
      setClinics(clinicsData);
    } catch (error) {
      console.error('Error loading clinics:', error);
    }
  };

  const filteredDoctors = doctors.filter(doctor => {
    if (filters.specialization !== 'all' && doctor.specialization !== filters.specialization) {
      return false;
    }
    if (filters.consultationType !== 'all' && !doctor.consultation_types.includes(filters.consultationType as any)) {
      return false;
    }
    if (filters.rating > 0 && doctor.rating < filters.rating) {
      return false;
    }
    if (filters.priceRange !== 'all') {
      const price = doctor.price_range.min;
      if (filters.priceRange === 'budget' && price > 3000) return false;
      if (filters.priceRange === 'medium' && (price < 3000 || price > 5000)) return false;
      if (filters.priceRange === 'premium' && price < 5000) return false;
    }
    return true;
  });

  if (isLoading) {
    return (
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-8 text-center">
        <LoadingSpinner className="h-8 w-8 mx-auto mb-4" />
        <h3 className="text-xl font-semibold gentle-text mb-2">
          –ü–æ–¥–±–∏—Ä–∞–µ–º –≤—Ä–∞—á–µ–π
        </h3>
        <p className="soft-text">
          –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏ –∏—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤...
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <h2 className="text-xl font-semibold gentle-text mb-4">üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
          <div>
            <label className="block text-sm font-medium gentle-text mb-1">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</label>
            <Select value={filters.specialization} onValueChange={(value) => setFilters({...filters, specialization: value})}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–µ</SelectItem>
                <SelectItem value="gynecologist">–ì–∏–Ω–µ–∫–æ–ª–æ–≥</SelectItem>
                <SelectItem value="endocrinologist">–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥</SelectItem>
                <SelectItem value="psychologist">–ü—Å–∏—Ö–æ–ª–æ–≥</SelectItem>
                <SelectItem value="cardiologist">–ö–∞—Ä–¥–∏–æ–ª–æ–≥</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="block text-sm font-medium gentle-text mb-1">–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</label>
            <Select value={filters.consultationType} onValueChange={(value) => setFilters({...filters, consultationType: value})}>
              <SelectTrigger>
                <SelectValue placeholder="–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–õ—é–±–æ–π</SelectItem>
                <SelectItem value="in_person">–û—á–Ω–æ</SelectItem>
                <SelectItem value="online">–û–Ω–ª–∞–π–Ω</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="block text-sm font-medium gentle-text mb-1">–†–µ–π—Ç–∏–Ω–≥ –æ—Ç</label>
            <Select value={filters.rating.toString()} onValueChange={(value) => setFilters({...filters, rating: Number(value)})}>
              <SelectTrigger>
                <SelectValue placeholder="–†–µ–π—Ç–∏–Ω–≥" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="0">–õ—é–±–æ–π</SelectItem>
                <SelectItem value="4">4.0+</SelectItem>
                <SelectItem value="4.5">4.5+</SelectItem>
                <SelectItem value="4.8">4.8+</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="block text-sm font-medium gentle-text mb-1">–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</label>
            <Select value={filters.priceRange} onValueChange={(value) => setFilters({...filters, priceRange: value})}>
              <SelectTrigger>
                <SelectValue placeholder="–¶–µ–Ω–∞" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–õ—é–±–æ–π</SelectItem>
                <SelectItem value="budget">–î–æ 3000 ‚ÇΩ</SelectItem>
                <SelectItem value="medium">3000-5000 ‚ÇΩ</SelectItem>
                <SelectItem value="premium">5000+ ‚ÇΩ</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="block text-sm font-medium gentle-text mb-1">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</label>
            <Select value={filters.availability} onValueChange={(value) => setFilters({...filters, availability: value})}>
              <SelectTrigger>
                <SelectValue placeholder="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–õ—é–±–∞—è</SelectItem>
                <SelectItem value="today">–°–µ–≥–æ–¥–Ω—è</SelectItem>
                <SelectItem value="week">–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</SelectItem>
                <SelectItem value="month">–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold gentle-text">
            üë©‚Äç‚öïÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ({filteredDoctors.length})
          </h2>
          <Button
            onClick={onBack}
            variant="outline"
          >
            ‚Üê –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã
          </Button>
        </div>

        {filteredDoctors.length === 0 ? (
          <div className="bloom-card bg-white/90 backdrop-blur-sm p-8 text-center">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-semibold gentle-text mb-2">
              –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            </h3>
            <p className="soft-text">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–∏–º–ø—Ç–æ–º—ã
            </p>
          </div>
        ) : (
          filteredDoctors.map(doctor => (
            <DoctorCard
              key={doctor.id}
              doctor={doctor}
              clinic={clinics.find(c => c.id === doctor.clinic_id)}
              selectedSymptoms={selectedSymptoms}
              onSelect={() => onDoctorSelect(doctor, clinics.find(c => c.id === doctor.clinic_id)!)}
            />
          ))
        )}
      </div>
    </div>
  );
};

// –ö–∞—Ä—Ç–æ—á–∫–∞ –≤—Ä–∞—á–∞
const DoctorCard = ({ 
  doctor, 
  clinic, 
  selectedSymptoms, 
  onSelect 
}: { 
  doctor: Doctor; 
  clinic?: Clinic; 
  selectedSymptoms: string[];
  onSelect: () => void;
}) => {
  const getSpecializationLabel = (spec: string) => {
    const labels = {
      gynecologist: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥',
      endocrinologist: '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥',
      psychologist: '–ü—Å–∏—Ö–æ–ª–æ–≥',
      cardiologist: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
      therapist: '–¢–µ—Ä–∞–ø–µ–≤—Ç',
      nutritionist: '–î–∏–µ—Ç–æ–ª–æ–≥'
    };
    return labels[spec as keyof typeof labels] || spec;
  };

  const getMatchPercentage = () => {
    const menopauseSymptoms = ['hot_flashes', 'night_sweats', 'irregular_periods'];
    const psychSymptoms = ['anxiety', 'depression', 'mood_changes'];
    const cardioSymptoms = ['heart_palpitations'];

    let matches = 0;
    const totalSymptoms = selectedSymptoms.length;

    if (doctor.specialization === 'gynecologist' || doctor.specialization === 'endocrinologist') {
      matches = selectedSymptoms.filter(s => menopauseSymptoms.includes(s)).length;
    } else if (doctor.specialization === 'psychologist') {
      matches = selectedSymptoms.filter(s => psychSymptoms.includes(s)).length;
    } else if (doctor.specialization === 'cardiologist') {
      matches = selectedSymptoms.filter(s => cardioSymptoms.includes(s)).length;
    }

    return Math.round((matches / totalSymptoms) * 100);
  };

  const matchPercentage = getMatchPercentage();

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-6 hover:shadow-lg transition-shadow">
      <div className="flex flex-col lg:flex-row lg:items-start lg:space-x-6">
        
        {/* –§–æ—Ç–æ –≤—Ä–∞—á–∞ */}
        <div className="flex-shrink-0 mb-4 lg:mb-0">
          <div className="w-24 h-24 bg-gradient-to-br from-primary to-primary/70 rounded-full flex items-center justify-center text-primary-foreground text-2xl font-bold">
            {doctor.photo_url ? (
              <img src={doctor.photo_url} alt={doctor.name} className="w-full h-full rounded-full object-cover" />
            ) : (
              doctor.name.split(' ').map(n => n[0]).join('')
            )}
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="flex-1">
          <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start mb-4">
            <div>
              <h3 className="text-xl font-semibold gentle-text mb-1">{doctor.name}</h3>
              <p className="text-primary font-medium mb-2">
                {getSpecializationLabel(doctor.specialization)}
              </p>
              
              {/* –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–º–ø—Ç–æ–º–∞–º */}
              <div className="flex items-center space-x-3 mb-2">
                <div className={cn(
                  "px-2 py-1 rounded-full text-xs font-medium",
                  matchPercentage >= 70 ? 'bg-green-100 text-green-700' :
                  matchPercentage >= 40 ? 'bg-yellow-100 text-yellow-700' :
                  'bg-gray-100 text-gray-700'
                )}>
                  {matchPercentage}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                </div>
                
                {/* –†–µ–π—Ç–∏–Ω–≥ */}
                <div className="flex items-center">
                  <span className="text-yellow-500 mr-1">‚≠ê</span>
                  <span className="text-sm font-medium">{doctor.rating}</span>
                  <span className="text-sm soft-text ml-1">({doctor.review_count})</span>
                </div>
              </div>

              {/* –û–ø—ã—Ç –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
              <div className="text-sm soft-text mb-3">
                <p><strong>–û–ø—ã—Ç:</strong> {doctor.experience_years} –ª–µ—Ç</p>
                <p><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> {doctor.education[0]}</p>
                {doctor.sub_specializations.length > 0 && (
                  <p><strong>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> {doctor.sub_specializations.join(', ')}</p>
                )}
              </div>
            </div>

            {/* –¶–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å */}
            <div className="text-right">
              <div className="text-lg font-semibold gentle-text mb-1">
                –æ—Ç {doctor.price_range.min.toLocaleString()} ‚ÇΩ
              </div>
              <div className="text-sm soft-text mb-2">
                {doctor.consultation_types.includes('online') && 'üíª –û–Ω–ª–∞–π–Ω'}
                {doctor.consultation_types.includes('in_person') && ' üè• –û—á–Ω–æ'}
              </div>
              {doctor.next_available_slot && (
                <div className="text-sm text-green-600 font-medium">
                  ‚è∞ –°–≤–æ–±–æ–¥–Ω–æ: {new Date(doctor.next_available_slot).toLocaleDateString('ru-RU')}
                </div>
              )}
            </div>
          </div>

          {/* –ü–æ–¥—Ö–æ–¥ –∫ –ª–µ—á–µ–Ω–∏—é */}
          <div className="bg-bloom-vanilla rounded-lg p-3 mb-4">
            <p className="text-sm soft-text">{doctor.approach}</p>
          </div>

          {/* –ö–ª–∏–Ω–∏–∫–∞ */}
          {clinic && (
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <span className="text-lg mr-2">üè•</span>
                <div>
                  <div className="font-medium gentle-text">{clinic.name}</div>
                  <div className="text-sm soft-text">
                    {clinic.address.district}, {clinic.address.metro_stations[0] && `–º. ${clinic.address.metro_stations[0]}`}
                  </div>
                </div>
              </div>
              <div className="flex items-center">
                <span className="text-yellow-500 mr-1">‚≠ê</span>
                <span className="text-sm">{clinic.rating}</span>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ */}
          <Button
            onClick={onSelect}
            className="w-full bg-primary hover:bg-primary/90 text-primary-foreground"
          >
            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
          </Button>
        </div>
      </div>
    </div>
  );
};