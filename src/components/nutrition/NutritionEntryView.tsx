import React from 'react';
import { Edit, TrendingUp } from 'lucide-react';
import type { FoodEntry } from '@/pages/patient/NutritionTracker';

interface NutritionEntryViewProps {
  entry: FoodEntry | null;
  date: string;
  onEdit: () => void;
}

export const NutritionEntryView: React.FC<NutritionEntryViewProps> = ({
  entry,
  date,
  onEdit
}) => {
  if (!entry) {
    return (
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-8 text-center">
        <div className="text-6xl mb-4 animate-gentle-float">üçΩÔ∏è</div>
        <h3 className="text-xl font-playfair font-semibold gentle-text mb-2">
          –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {new Date(date + 'T00:00:00').toLocaleDateString('ru-RU')}
        </h3>
        <p className="soft-text mb-6">
          –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞–Ω–∏–∏, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
        </p>
        <button
          onClick={onEdit}
          className="bg-gradient-to-r from-primary to-primary-glow text-white px-6 py-3 rounded-lg interactive-hover transition-all shadow-warm"
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
        </button>
      </div>
    );
  }

  const getMealEmoji = (mealType: string) => {
    switch (mealType) {
      case 'breakfast': return 'üåÖ';
      case 'lunch': return 'üåû';
      case 'dinner': return 'üåô';
      case 'snacks': return 'üçø';
      default: return 'üçΩÔ∏è';
    }
  };

  const getMealTitle = (mealType: string) => {
    switch (mealType) {
      case 'breakfast': return '–ó–∞–≤—Ç—Ä–∞–∫';
      case 'lunch': return '–û–±–µ–¥';
      case 'dinner': return '–£–∂–∏–Ω';
      case 'snacks': return '–ü–µ—Ä–µ–∫—É—Å—ã';
      default: return '–ü—Ä–∏–µ–º –ø–∏—â–∏';
    }
  };

  const getTriggerIcon = (trigger: string) => {
    switch (trigger) {
      case 'caffeine': return '‚òï';
      case 'alcohol': return 'üç∑';
      case 'spicy': return 'üå∂Ô∏è';
      case 'sugar': return 'üç≠';
      case 'processed': return 'üçü';
      default: return '‚ö†Ô∏è';
    }
  };

  const getMoodEmoji = (mood: number) => {
    const moodMap = [null, 'üò¢', 'üòï', 'üòê', 'üòä', 'üòç'];
    return moodMap[mood] || 'üòê';
  };

  return (
    <div className="space-y-6">
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-playfair font-bold gentle-text">
          –ü–∏—Ç–∞–Ω–∏–µ –∑–∞ {new Date(date + 'T00:00:00').toLocaleDateString('ru-RU')}
        </h2>
        <button
          onClick={onEdit}
          className="flex items-center space-x-2 bg-gradient-to-r from-accent to-accent-glow text-white px-4 py-2 rounded-lg interactive-hover transition-all"
        >
          <Edit className="h-4 w-4" />
          <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        {/* –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ */}
        <div className="lg:col-span-2 space-y-4">
          {Object.entries(entry.meals).map(([mealType, meals]) => {
            if (meals.length === 0) return null;
            
            return (
              <div key={mealType} className="bloom-card bg-white/90 backdrop-blur-sm p-4">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-semibold gentle-text flex items-center">
                    <span className="text-xl mr-2">{getMealEmoji(mealType)}</span>
                    {getMealTitle(mealType)}
                  </h3>
                  <div className="text-sm soft-text">
                    {meals.length} {meals.length === 1 ? '–ø—Ä–æ–¥—É–∫—Ç' : '–ø—Ä–æ–¥—É–∫—Ç–æ–≤'}
                  </div>
                </div>

                {/* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ */}
                <div className="grid grid-cols-2 gap-4 mb-4 p-3 bg-bloom-vanilla rounded-lg">
                  <div className="text-center">
                    <div className="text-xs soft-text mb-1">–î–æ –µ–¥—ã</div>
                    <div className="text-lg">
                      {getMoodEmoji(entry.mood_before_meals?.[mealType as keyof typeof entry.mood_before_meals] || 3)}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-xs soft-text mb-1">–ü–æ—Å–ª–µ –µ–¥—ã</div>
                    <div className="text-lg">
                      {getMoodEmoji(entry.mood_after_meals?.[mealType as keyof typeof entry.mood_after_meals] || 3)}
                    </div>
                  </div>
                </div>

                {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
                <div className="space-y-2">
                  {meals.map(meal => (
                    <div key={meal.id} className="flex items-center justify-between p-3 bg-white rounded-lg border border-bloom-cream">
                      <div className="flex-1">
                        <div className="font-medium gentle-text">{meal.name}</div>
                        <div className="text-sm soft-text">
                          {meal.portion_size}
                          {meal.time && ` ‚Ä¢ ${meal.time}`}
                        </div>
                        {meal.contains_trigger_foods.length > 0 && (
                          <div className="flex flex-wrap gap-1 mt-2">
                            {meal.contains_trigger_foods.map(trigger => (
                              <span key={trigger} className="bg-orange-100 text-orange-700 px-2 py-1 rounded text-xs flex items-center">
                                <span className="mr-1">{getTriggerIcon(trigger)}</span>
                                {trigger}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            );
          })}
        </div>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å–≤–æ–¥–∫–æ–π */}
        <div className="space-y-4">
          
          {/* –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã */}
          <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
            <h3 className="font-semibold gentle-text mb-3 flex items-center">
              üíß –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã
            </h3>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary mb-2">{entry.water_intake}–ª</div>
              <div className="flex justify-center space-x-1 mb-2">
                {[1,2,3,4,5,6,7,8].map(i => (
                  <div 
                    key={i}
                    className={`w-3 h-6 rounded border ${
                      i <= entry.water_intake 
                        ? 'bg-blue-400 border-blue-500' 
                        : 'bg-bloom-vanilla border-bloom-cream'
                    }`}
                  />
                ))}
              </div>
              <div className="text-xs soft-text">
                {entry.water_intake >= 2 ? '–ù–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ' : '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤–æ–¥—ã üíß'}
              </div>
            </div>
          </div>

          {/* –î–æ–±–∞–≤–∫–∏ */}
          {entry.supplements.length > 0 && (
            <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
              <h3 className="font-semibold gentle-text mb-3 flex items-center">
                üíä –î–æ–±–∞–≤–∫–∏
              </h3>
              <div className="space-y-2">
                {entry.supplements.map(supplement => (
                  <div key={supplement.id} className="p-2 bg-bloom-vanilla rounded">
                    <div className="font-medium text-sm gentle-text">{supplement.name}</div>
                    <div className="text-xs soft-text">{supplement.dosage} ‚Ä¢ {supplement.time}</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –£—Ä–æ–≤–Ω–∏ —ç–Ω–µ—Ä–≥–∏–∏ */}
          <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
            <h3 className="font-semibold gentle-text mb-3 flex items-center">
              ‚ö° –≠–Ω–µ—Ä–≥–∏—è
            </h3>
            <div className="space-y-3">
              {Object.entries(entry.energy_levels).map(([period, level]) => (
                <div key={period} className="flex items-center justify-between">
                  <span className="text-sm soft-text">
                    {period === 'morning' ? 'üåÖ –£—Ç—Ä–æ–º' :
                     period === 'afternoon' ? 'üåû –î–Ω–µ–º' : 'üåô –í–µ—á–µ—Ä–æ–º'}
                  </span>
                  <div className="flex space-x-1">
                    {[1,2,3,4,5].map(i => (
                      <div 
                        key={i}
                        className={`w-3 h-3 rounded-full ${
                          i <= level ? 'bg-primary' : 'bg-bloom-vanilla'
                        }`}
                      />
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –ü–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç */}
          <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
            <h3 className="font-semibold gentle-text mb-3 flex items-center">
              ü´Ñ –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
            </h3>
            <div className="text-center">
              <div className="flex justify-center space-x-1 mb-2">
                {[1,2,3,4,5].map(i => (
                  <div 
                    key={i}
                    className={`w-4 h-4 rounded-full ${
                      i <= entry.digestive_comfort ? 'bg-primary' : 'bg-bloom-vanilla'
                    }`}
                  />
                ))}
              </div>
              <div className="text-sm soft-text">
                {entry.digestive_comfort >= 4 ? '–û—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ' :
                 entry.digestive_comfort >= 3 ? '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' : '–ï—Å—Ç—å –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç'}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ó–∞–º–µ—Ç–∫–∏ */}
      {entry.notes && (
        <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
          <h3 className="font-semibold gentle-text mb-3 flex items-center">
            üìù –ó–∞–º–µ—Ç–∫–∏
          </h3>
          <p className="soft-text">{entry.notes}</p>
        </div>
      )}
    </div>
  );
};