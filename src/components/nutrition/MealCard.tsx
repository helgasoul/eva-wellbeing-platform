import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Clock, ChefHat, Users, Zap, Lock, Crown, Star, Plus } from 'lucide-react';
import { BasicMealPlan } from '@/data/baseMealPlans';

interface MealCardProps {
  meal: BasicMealPlan;
  userSubscription: 'essential' | 'plus' | 'optimum';
  onViewRecipe?: () => void;
  onUpgrade?: () => void;
  onAddToDiary?: (meal: BasicMealPlan) => void; // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
}

export const MealCard: React.FC<MealCardProps> = ({
  meal,
  userSubscription,
  onViewRecipe,
  onUpgrade,
  onAddToDiary
}) => {
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800 border-green-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'hard': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getDifficultyIcon = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'üü¢';
      case 'medium': return 'üü°';
      case 'hard': return 'üî¥';
      default: return '‚ö™';
    }
  };

  const getMealTypeIcon = (mealType: string) => {
    switch (mealType) {
      case 'breakfast': return 'üåÖ';
      case 'lunch': return '‚òÄÔ∏è';
      case 'dinner': return 'üåô';
      case 'snack': return 'ü•ú';
      default: return 'üçΩÔ∏è';
    }
  };

  const getPhaseIcon = (phase: string) => {
    switch (phase) {
      case 'premenopause': return 'üå±';
      case 'perimenopause': return 'üåø';
      case 'menopause': return 'üå∫';
      case 'postmenopause': return 'üå∑';
      default: return 'üå∏';
    }
  };

  // Check access based on recipe's minimum access level
  const hasRequiredAccess = () => {
    const hierarchyMap = { 'essential': 1, 'plus': 2, 'optimum': 3 };
    const userLevel = hierarchyMap[userSubscription];
    const requiredLevel = hierarchyMap[meal.minAccessLevel];
    return userLevel >= requiredLevel;
  };

  const canViewFullRecipe = hasRequiredAccess();
  const canViewPremiumDetails = userSubscription === 'optimum';

  return (
    <Card className="bg-gradient-to-br from-card/90 to-accent/5 backdrop-blur-sm border-primary/10 shadow-elegant rounded-2xl hover:shadow-floating transition-all duration-300 hover:scale-[1.02]">
      <CardHeader className="pb-4">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-lg font-playfair text-foreground flex items-center gap-2">
              <span className="text-xl">{getMealTypeIcon(meal.mealType)}</span>
              {meal.name}
            </CardTitle>
            <p className="text-sm text-muted-foreground mt-1">{meal.description}</p>
          </div>
          <div className="flex items-center gap-2">
            <Badge className={`text-xs ${getDifficultyColor(meal.difficulty)}`}>
              {getDifficultyIcon(meal.difficulty)} {meal.difficulty}
            </Badge>
            <Badge variant="secondary" className="text-xs">
              {getPhaseIcon(meal.menopausePhase)}
            </Badge>
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º */}
        <div className="grid grid-cols-2 gap-4">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Clock className="h-4 w-4" />
            <span>{meal.time}</span>
          </div>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <ChefHat className="h-4 w-4" />
            <span>{meal.prepTime + meal.cookTime} –º–∏–Ω</span>
          </div>
        </div>

        {/* –ü–æ–ª—å–∑–∞ –¥–ª—è –º–µ–Ω–æ–ø–∞—É–∑—ã */}
        <div className="space-y-2">
          <h4 className="text-sm font-medium text-foreground flex items-center gap-2">
            <Zap className="h-4 w-4 text-primary" />
            –ü–æ–ª—å–∑–∞ –ø—Ä–∏ –º–µ–Ω–æ–ø–∞—É–∑–µ
          </h4>
          <div className="flex flex-wrap gap-2">
            {meal.benefits.slice(0, 3).map((benefit, index) => (
              <Badge key={index} variant="outline" className="text-xs border-primary/20">
                {benefit}
              </Badge>
            ))}
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ */}
        {!canViewFullRecipe && (
          <div className="bg-gradient-to-r from-primary/10 to-accent/10 p-4 rounded-2xl border border-primary/20">
            <div className="flex items-center gap-2 mb-2">
              <Lock className="h-4 w-4 text-primary" />
              <span className="text-sm font-medium text-foreground">
                {meal.minAccessLevel === 'plus' ? '–î–æ—Å—Ç—É–ø–Ω–æ –≤ Plus' : '–î–æ—Å—Ç—É–ø–Ω–æ –≤ Optimum'}
              </span>
            </div>
            <p className="text-xs text-muted-foreground mb-3">
              {meal.minAccessLevel === 'plus' 
                ? '–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç, —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –ö–ë–ñ–£ –≤ Plus –ø–æ–¥–ø–∏—Å–∫–µ'
                : '–≠—Ç–æ—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Optimum –ø–æ–¥–ø–∏—Å–∫–µ'
              }
            </p>
            <Button
              onClick={onUpgrade}
              size="sm"
              className="w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
            >
              <Crown className="h-4 w-4 mr-2" />
              {meal.minAccessLevel === 'plus' ? '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Plus' : '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Optimum'}
            </Button>
          </div>
        )}

        {canViewFullRecipe && (
          <>
            {/* –ö–ë–ñ–£ */}
            <div className="bg-gradient-to-r from-background/50 to-accent/5 p-4 rounded-2xl border border-border/50">
              <div className="grid grid-cols-4 gap-4 text-center">
                <div>
                  <div className="text-lg font-bold text-foreground">{meal.calories}</div>
                  <div className="text-xs text-muted-foreground">–∫–∫–∞–ª</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-foreground">{meal.protein}</div>
                  <div className="text-xs text-muted-foreground">–±–µ–ª–∫–∏</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-foreground">{meal.carbs}</div>
                  <div className="text-xs text-muted-foreground">—É–≥–ª–µ–≤–æ–¥—ã</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-foreground">{meal.fat}</div>
                  <div className="text-xs text-muted-foreground">–∂–∏—Ä—ã</div>
                </div>
              </div>
            </div>

            {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
            <div className="space-y-2">
              <h4 className="text-sm font-medium text-foreground flex items-center gap-2">
                <Users className="h-4 w-4 text-primary" />
                –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
              </h4>
              <div className="grid grid-cols-1 gap-1">
                {meal.ingredients.map((ingredient, index) => (
                  <div key={index} className="text-xs text-muted-foreground pl-4 relative">
                    <span className="absolute left-0 top-0 text-primary">‚Ä¢</span>
                    {ingredient}
                  </div>
                ))}
              </div>
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center gap-2 text-muted-foreground">
                <span>ü•Ñ</span>
                <span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {meal.prepTime} –º–∏–Ω</span>
              </div>
              <div className="flex items-center gap-2 text-muted-foreground">
                <span>üî•</span>
                <span>–ì–æ—Ç–æ–≤–∫–∞: {meal.cookTime} –º–∏–Ω</span>
              </div>
            </div>
          </>
        )}

        {canViewPremiumDetails && (
          <div className="bg-gradient-to-r from-secondary/10 to-accent/10 p-4 rounded-2xl border border-secondary/20">
            <div className="flex items-center gap-2 mb-2">
              <Star className="h-4 w-4 text-secondary" />
              <span className="text-sm font-medium text-foreground">Optimum –¥–µ—Ç–∞–ª–∏</span>
            </div>
            <div className="space-y-2 text-xs text-muted-foreground">
              <p>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞</p>
              <p>‚Ä¢ –ó–∞–º–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∞–ª–ª–µ—Ä–≥–∏—è—Ö</p>
              <p>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã</p>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex gap-2">
          {onAddToDiary && (
            <Button
              onClick={() => onAddToDiary(meal)}
              className="flex-1 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
              disabled={!canViewFullRecipe}
            >
              <Plus className="h-4 w-4 mr-2" />
              {canViewFullRecipe ? '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫' : `–î–æ—Å—Ç—É–ø–Ω–æ –≤ ${meal.minAccessLevel === 'plus' ? 'Plus' : 'Optimum'}`}
            </Button>
          )}
          <Button
            onClick={onViewRecipe}
            variant="outline"
            className="flex-1 border-primary/20 hover:bg-primary/10"
            disabled={!canViewFullRecipe}
          >
            {canViewFullRecipe ? '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç' : `–†–µ—Ü–µ–ø—Ç –≤ ${meal.minAccessLevel === 'plus' ? 'Plus' : 'Optimum'}`}
          </Button>
          {canViewFullRecipe && (
            <Button
              variant="outline"
              size="sm"
              className="px-4 border-primary/20 hover:bg-primary/10"
            >
              üíæ
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};