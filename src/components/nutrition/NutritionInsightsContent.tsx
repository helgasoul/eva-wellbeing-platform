import React, { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { performNutritionAnalysis } from '@/utils/nutritionAnalyzer';
import type { FoodEntry } from '@/pages/patient/NutritionTracker';
import type { NutritionInsight } from '@/utils/nutritionAnalyzer';

interface NutritionInsightsContentProps {
  entries: FoodEntry[];
}

export const NutritionInsightsContent: React.FC<NutritionInsightsContentProps> = ({ entries }) => {
  const { user } = useAuth();
  const [insights, setInsights] = useState<NutritionInsight[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  useEffect(() => {
    analyzeNutritionData();
  }, [entries]);

  const analyzeNutritionData = async () => {
    if (entries.length < 3) return;
    
    setIsAnalyzing(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
      const symptomEntries = JSON.parse(localStorage.getItem(`symptom_entries_${user?.id}`) || '[]');
      
      const nutritionInsights = await performNutritionAnalysis(entries, symptomEntries);
      setInsights(nutritionInsights);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  if (isAnalyzing) {
    return <NutritionAnalysisLoading />;
  }

  if (entries.length < 3) {
    return (
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-8 text-center">
        <div className="text-6xl mb-4 animate-gentle-float">üß†</div>
        <h3 className="text-xl font-playfair font-semibold gentle-text mb-2">
          –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        </h3>
        <p className="soft-text">
          –î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      
      {/* –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–∏—Ç–∞–Ω–∏—è */}
      <NutritionKeyInsights insights={insights} />
      
      {/* –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ */}
      <FoodSymptomCorrelations insights={insights} />
      
      {/* –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
      <TriggerFoodAnalysis entries={entries} />
      
      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é */}
      <NutritionRecommendations insights={insights} />
      
      {/* –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã */}
      <NutrientDeficiencyAnalysis entries={entries} />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
const NutritionAnalysisLoading = () => (
  <div className="bloom-card bg-white/90 backdrop-blur-sm p-8 text-center">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
    <h3 className="text-lg font-semibold gentle-text mb-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ</h3>
    <p className="soft-text">–ò—â–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∏—Ç–∞–Ω–∏–µ–º –∏ —Å–∏–º–ø—Ç–æ–º–∞–º–∏...</p>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
const NutritionKeyInsights = ({ insights }: { insights: NutritionInsight[] }) => {
  const keyInsights = insights.filter(insight => insight.priority === 'high').slice(0, 3);

  if (keyInsights.length === 0) {
    return (
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <h2 className="text-xl font-playfair font-bold gentle-text mb-4">üéØ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–∏—Ç–∞–Ω–∏—è</h2>
        <div className="text-center py-8">
          <div className="text-6xl mb-4 animate-gentle-float">ü•ó</div>
          <p className="soft-text">
            –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
      <h2 className="text-xl font-playfair font-bold gentle-text mb-6">üéØ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–∏—Ç–∞–Ω–∏—è</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {keyInsights.map(insight => (
          <NutritionInsightCard key={insight.id} insight={insight} />
        ))}
      </div>
    </div>
  );
};

// –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–Ω—Å–∞–π—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
const NutritionInsightCard = ({ insight }: { insight: NutritionInsight }) => {
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'border-red-200 bg-red-50';
      case 'medium': return 'border-yellow-200 bg-yellow-50';
      default: return 'border-green-200 bg-green-50';
    }
  };

  return (
    <div className={`border-2 rounded-xl p-4 ${getPriorityColor(insight.priority)}`}>
      <div className="flex items-start justify-between mb-3">
        <div className="text-2xl">{insight.icon}</div>
        <div className="text-xs bg-white rounded-full px-2 py-1">
          {insight.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        </div>
      </div>
      
      <h3 className="font-semibold gentle-text mb-2">{insight.title}</h3>
      <p className="text-sm soft-text mb-3">{insight.description}</p>
      
      {insight.actionable && insight.recommendations && (
        <div className="space-y-1">
          <div className="text-xs font-medium gentle-text">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</div>
          {insight.recommendations.slice(0, 2).map((rec, index) => (
            <div key={index} className="flex items-start text-xs soft-text">
              <span className="text-green-500 mr-1">‚Ä¢</span>
              {rec}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤
const FoodSymptomCorrelations = ({ insights }: { insights: NutritionInsight[] }) => {
  const correlationInsights = insights.filter(insight => insight.type === 'correlation');

  if (correlationInsights.length === 0) return null;

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
      <h2 className="text-xl font-playfair font-bold gentle-text mb-6">üîó –°–≤—è–∑–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤</h2>
      
      <div className="space-y-4">
        {correlationInsights.map(insight => (
          <div key={insight.id} className="border border-bloom-cream rounded-lg p-4">
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-semibold gentle-text flex items-center">
                <span className="text-xl mr-2">{insight.icon}</span>
                {insight.title}
              </h3>
              <div className="text-sm text-primary font-medium">
                {Math.abs(insight.correlation || 0) > 0.5 ? '–°–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å' : '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å'}
              </div>
            </div>
            <p className="text-sm soft-text mb-3">{insight.description}</p>
            {insight.recommendations && insight.recommendations.length > 0 && (
              <div className="space-y-1">
                {insight.recommendations.slice(0, 3).map((rec, index) => (
                  <div key={index} className="flex items-start text-sm">
                    <span className="text-primary mr-2">‚Üí</span>
                    <span className="gentle-text">{rec}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const TriggerFoodAnalysis = ({ entries }: { entries: FoodEntry[] }) => {
  const triggerAnalysis = React.useMemo(() => {
    const triggers = ['caffeine', 'alcohol', 'spicy', 'sugar', 'processed'];
    const analysis: Record<string, { frequency: number; lastUsed: string | null }> = {};

    triggers.forEach(trigger => {
      const entriesWithTrigger = entries.filter(entry => 
        Object.values(entry.meals).flat().some(meal => 
          meal.contains_trigger_foods.includes(trigger)
        )
      );
      
      analysis[trigger] = {
        frequency: (entriesWithTrigger.length / entries.length) * 100,
        lastUsed: entriesWithTrigger.length > 0 ? 
          entriesWithTrigger[entriesWithTrigger.length - 1].date : null
      };
    });

    return analysis;
  }, [entries]);

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
      <h2 className="text-xl font-playfair font-bold gentle-text mb-6">‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {Object.entries(triggerAnalysis).map(([trigger, data]) => (
          <div key={trigger} className="border border-bloom-cream rounded-lg p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="font-medium gentle-text capitalize">
                {getTriggerInfo(trigger).emoji} {getTriggerInfo(trigger).name}
              </span>
              <span className={`text-sm font-medium ${
                data.frequency > 30 ? 'text-red-600' : 
                data.frequency > 15 ? 'text-yellow-600' : 'text-green-600'
              }`}>
                {data.frequency.toFixed(0)}%
              </span>
            </div>
            
            <div className="w-full bg-bloom-vanilla rounded-full h-2 mb-2">
              <div 
                className={`h-2 rounded-full ${
                  data.frequency > 30 ? 'bg-red-500' : 
                  data.frequency > 15 ? 'bg-yellow-500' : 'bg-green-500'
                }`}
                style={{ width: `${Math.min(data.frequency, 100)}%` }}
              />
            </div>
            
            <p className="text-xs soft-text">
              {data.lastUsed ? 
                `–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: ${new Date(data.lastUsed + 'T00:00:00').toLocaleDateString('ru-RU')}` :
                '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'
              }
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
const NutritionRecommendations = ({ insights }: { insights: NutritionInsight[] }) => {
  const recommendations = insights
    .filter(insight => insight.type === 'recommendation' || insight.actionable)
    .slice(0, 5);

  if (recommendations.length === 0) return null;

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
      <h2 className="text-xl font-playfair font-bold gentle-text mb-6">üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
      
      <div className="space-y-3">
        {recommendations.map((insight, index) => (
          <div key={insight.id || index} className="flex items-start space-x-3 p-3 bg-bloom-vanilla rounded-lg">
            <div className="text-lg flex-shrink-0">{insight.icon}</div>
            <div className="flex-1">
              <h3 className="font-medium gentle-text mb-1">{insight.title}</h3>
              <p className="text-sm soft-text">{insight.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
const NutrientDeficiencyAnalysis = ({ entries }: { entries: FoodEntry[] }) => {
  const deficiencies = React.useMemo(() => {
    const analysis = [];
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const categoryStats = {
      dairy: entries.filter(e => Object.values(e.meals).flat().some(m => m.category === 'dairy')).length,
      protein: entries.filter(e => Object.values(e.meals).flat().some(m => m.category === 'protein')).length,
      vegetables: entries.filter(e => Object.values(e.meals).flat().some(m => m.category === 'vegetables')).length,
      fruits: entries.filter(e => Object.values(e.meals).flat().some(m => m.category === 'fruits')).length
    };

    const totalDays = entries.length;

    Object.entries(categoryStats).forEach(([category, days]) => {
      const percentage = (days / totalDays) * 100;
      if (percentage < 60) {
        analysis.push({
          category,
          percentage,
          risk: percentage < 30 ? 'high' : 'medium'
        });
      }
    });

    return analysis;
  }, [entries]);

  if (deficiencies.length === 0) {
    return (
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <h2 className="text-xl font-playfair font-bold gentle-text mb-4">‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤</h2>
        <div className="text-center py-4">
          <div className="text-4xl mb-2">üéâ</div>
          <p className="soft-text">–û—Ç–ª–∏—á–Ω–∞—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞!</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
      <h2 className="text-xl font-playfair font-bold gentle-text mb-6">‚ö° –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ—Ñ–∏—Ü–∏—Ç—ã</h2>
      
      <div className="space-y-4">
        {deficiencies.map(deficiency => (
          <div key={deficiency.category} className={`border-2 rounded-lg p-4 ${
            deficiency.risk === 'high' ? 'border-red-200 bg-red-50' : 'border-yellow-200 bg-yellow-50'
          }`}>
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-semibold gentle-text">
                {getNutrientInfo(deficiency.category).emoji} {getNutrientInfo(deficiency.category).name}
              </h3>
              <span className={`text-sm font-medium ${
                deficiency.risk === 'high' ? 'text-red-600' : 'text-yellow-600'
              }`}>
                {deficiency.percentage.toFixed(0)}% –¥–Ω–µ–π
              </span>
            </div>
            <p className="text-sm soft-text mb-3">
              {getNutrientInfo(deficiency.category).warning}
            </p>
            <div className="space-y-1">
              {getNutrientInfo(deficiency.category).recommendations.map((rec, index) => (
                <div key={index} className="flex items-start text-sm">
                  <span className="text-primary mr-2">‚Ä¢</span>
                  <span className="gentle-text">{rec}</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getTriggerInfo = (trigger: string) => {
  const info: Record<string, { emoji: string; name: string }> = {
    caffeine: { emoji: '‚òï', name: '–ö–æ—Ñ–µ–∏–Ω' },
    alcohol: { emoji: 'üç∑', name: '–ê–ª–∫–æ–≥–æ–ª—å' },
    spicy: { emoji: 'üå∂Ô∏è', name: '–û—Å—Ç—Ä–æ–µ' },
    sugar: { emoji: 'üç≠', name: '–°–∞—Ö–∞—Ä' },
    processed: { emoji: 'üçü', name: '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ' }
  };
  return info[trigger] || { emoji: '‚ö†Ô∏è', name: trigger };
};

const getNutrientInfo = (category: string) => {
  const info: Record<string, { emoji: string; name: string; warning: string; recommendations: string[] }> = {
    dairy: {
      emoji: 'ü¶¥',
      name: '–ö–∞–ª—å—Ü–∏–π (–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã)',
      warning: '–ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª—å—Ü–∏—è –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∏—Å–∫ –æ—Å—Ç–µ–æ–ø–æ—Ä–æ–∑–∞ –≤ –º–µ–Ω–æ–ø–∞—É–∑–µ',
      recommendations: [
        '–í–∫–ª—é—á–∏—Ç–µ —Ç–≤–æ—Ä–æ–≥, —Å—ã—Ä, –π–æ–≥—É—Ä—Ç –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –∫—É–Ω–∂—É—Ç, –º–∏–Ω–¥–∞–ª—å',
        '–û–±—Å—É–¥–∏—Ç–µ —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏–µ–º –∫–∞–ª—å—Ü–∏—è —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º D3'
      ]
    },
    protein: {
      emoji: 'üí™',
      name: '–ë–µ–ª–∫–∏',
      warning: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –±–µ–ª–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      recommendations: [
        '–î–æ–±–∞–≤—å—Ç–µ —Ä—ã–±—É, –º—è—Å–æ, —è–π—Ü–∞ –≤ –∫–∞–∂–¥—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏',
        '–í–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–ª–∫–∏: –±–æ–±–æ–≤—ã–µ, –æ—Ä–µ—Ö–∏',
        '–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 1.2–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞'
      ]
    },
    vegetables: {
      emoji: 'ü•ó',
      name: '–û–≤–æ—â–∏ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∞',
      warning: '–ú–∞–ª–æ –æ–≤–æ—â–µ–π –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏',
      recommendations: [
        '–î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–≤–æ—â–∏ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏',
        '–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 5-7 –ø–æ—Ä—Ü–∏—è–º –æ–≤–æ—â–µ–π –≤ –¥–µ–Ω—å',
        '–í–∫–ª—é—á–∏—Ç–µ –∑–µ–ª–µ–Ω—ã–µ –ª–∏—Å—Ç–æ–≤—ã–µ –æ–≤–æ—â–∏ –¥–ª—è —Ñ–æ–ª–∏–µ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã'
      ]
    },
    fruits: {
      emoji: 'üçé',
      name: '–§—Ä—É–∫—Ç—ã –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã',
      warning: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ñ—Ä—É–∫—Ç–æ–≤ —Å–Ω–∏–∂–∞–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤',
      recommendations: [
        '–ï—à—å—Ç–µ 2-3 –ø–æ—Ä—Ü–∏–∏ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å',
        '–í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤',
        '–û—Ç–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Å–≤–µ–∂–∏–º —Ñ—Ä—É–∫—Ç–∞–º, –∞ –Ω–µ —Å–æ–∫–∞–º'
      ]
    }
  };
  return info[category] || { emoji: '‚ùì', name: category, warning: '', recommendations: [] };
};