import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { X, Plus, Minus, Clock, Calendar, Target, Utensils } from 'lucide-react';
import type { BasicMealPlan } from '@/data/baseMealPlans';

interface AddToDiaryModalProps {
  isOpen: boolean;
  meal: BasicMealPlan | null;
  onClose: () => void;
  onConfirm: (diaryEntry: DiaryEntry) => void;
}

export interface DiaryEntry {
  id: string;
  recipeId: string;
  name: string;
  mealType: 'breakfast' | 'lunch' | 'dinner' | 'snack';
  date: string;
  time: string;
  portionSize: number;
  ingredients: string[];
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  benefits: string[];
  addedAt: Date;
  source: 'recipe' | 'manual';
}

const mealTypeOptions = [
  { value: 'breakfast', label: '–ó–∞–≤—Ç—Ä–∞–∫', icon: 'üåÖ', time: '08:00' },
  { value: 'lunch', label: '–û–±–µ–¥', icon: '‚òÄÔ∏è', time: '13:00' },
  { value: 'dinner', label: '–£–∂–∏–Ω', icon: 'üåô', time: '19:00' },
  { value: 'snack', label: '–ü–µ—Ä–µ–∫—É—Å', icon: 'ü•ú', time: '16:00' }
];

export const AddToDiaryModal: React.FC<AddToDiaryModalProps> = ({
  isOpen,
  meal,
  onClose,
  onConfirm
}) => {
  const [selectedMealType, setSelectedMealType] = useState<string>('breakfast');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [selectedTime, setSelectedTime] = useState('08:00');
  const [portionSize, setPortionSize] = useState(1);

  const handleMealTypeChange = (mealType: string) => {
    setSelectedMealType(mealType);
    const option = mealTypeOptions.find(opt => opt.value === mealType);
    if (option) {
      setSelectedTime(option.time);
    }
  };

  const handlePortionChange = (change: number) => {
    setPortionSize(prev => Math.max(0.5, Math.min(3, prev + change)));
  };

  const handleConfirm = () => {
    if (!meal) return;

    const diaryEntry: DiaryEntry = {
      id: `diary_${Date.now()}`,
      recipeId: meal.id,
      name: meal.name,
      mealType: selectedMealType as DiaryEntry['mealType'],
      date: selectedDate,
      time: selectedTime,
      portionSize: portionSize,
      ingredients: meal.ingredients.map(ing => `${ing} (${portionSize}x)`),
      calories: Math.round(meal.calories * portionSize),
      protein: Math.round(meal.protein * portionSize),
      carbs: Math.round(meal.carbs * portionSize),
      fat: Math.round(meal.fat * portionSize),
      benefits: meal.benefits,
      addedAt: new Date(),
      source: 'recipe'
    };

    onConfirm(diaryEntry);
    onClose();
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setSelectedMealType('breakfast');
    setSelectedDate(new Date().toISOString().split('T')[0]);
    setSelectedTime('08:00');
    setPortionSize(1);
  };

  if (!isOpen || !meal) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <Card className="w-full max-w-md max-h-[90vh] overflow-y-auto bg-gradient-to-br from-background to-accent/5 shadow-elegant border-primary/10">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <CardTitle className="text-xl font-playfair text-foreground flex items-center gap-2">
              <Utensils className="h-5 w-5 text-primary" />
              –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
            </CardTitle>
            <Button
              onClick={onClose}
              variant="ghost"
              size="sm"
              className="h-8 w-8 p-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ */}
          <div className="space-y-2">
            <Label className="text-sm font-medium text-foreground">–ë–ª—é–¥–æ</Label>
            <div className="p-3 bg-gradient-to-r from-background/50 to-accent/5 rounded-xl border border-border/50">
              <div className="font-medium text-foreground">{meal.name}</div>
              <div className="text-sm text-muted-foreground mt-1">{meal.description}</div>
              <div className="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
                <span>{meal.calories} –∫–∫–∞–ª</span>
                <span>{meal.protein}–≥ –±–µ–ª–∫–∞</span>
                <span>{meal.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤</span>
                <span>{meal.fat}–≥ –∂–∏—Ä–æ–≤</span>
              </div>
            </div>
          </div>

          {/* –¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ */}
          <div className="space-y-2">
            <Label className="text-sm font-medium text-foreground">–¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏</Label>
            <Select value={selectedMealType} onValueChange={handleMealTypeChange}>
              <SelectTrigger className="w-full">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {mealTypeOptions.map(option => (
                  <SelectItem key={option.value} value={option.value}>
                    <div className="flex items-center gap-2">
                      <span>{option.icon}</span>
                      <span>{option.label}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium text-foreground">–î–∞—Ç–∞</Label>
              <Input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="w-full"
              />
            </div>
            <div className="space-y-2">
              <Label className="text-sm font-medium text-foreground">–í—Ä–µ–º—è</Label>
              <Input
                type="time"
                value={selectedTime}
                onChange={(e) => setSelectedTime(e.target.value)}
                className="w-full"
              />
            </div>
          </div>

          {/* –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ */}
          <div className="space-y-2">
            <Label className="text-sm font-medium text-foreground">–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏</Label>
            <div className="flex items-center justify-center gap-4">
              <Button
                onClick={() => handlePortionChange(-0.5)}
                variant="outline"
                size="sm"
                className="h-8 w-8 p-0"
                disabled={portionSize <= 0.5}
              >
                <Minus className="h-4 w-4" />
              </Button>
              <div className="flex items-center gap-2">
                <span className="text-2xl font-bold text-foreground">{portionSize}</span>
                <span className="text-sm text-muted-foreground">–ø–æ—Ä—Ü–∏–∏</span>
              </div>
              <Button
                onClick={() => handlePortionChange(0.5)}
                variant="outline"
                size="sm"
                className="h-8 w-8 p-0"
                disabled={portionSize >= 3}
              >
                <Plus className="h-4 w-4" />
              </Button>
            </div>
            <div className="text-xs text-muted-foreground text-center">
              –û—Ç 0.5 –¥–æ 3 –ø–æ—Ä—Ü–∏–π
            </div>
          </div>

          {/* –ò—Ç–æ–≥–æ–≤—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã */}
          <div className="bg-gradient-to-r from-primary/10 to-accent/10 rounded-xl p-4 border border-primary/20">
            <div className="flex items-center gap-2 mb-3">
              <Target className="h-4 w-4 text-primary" />
              <h4 className="font-medium text-foreground">–ò—Ç–æ–≥–æ–≤—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</h4>
            </div>
            <div className="grid grid-cols-2 gap-3 text-sm">
              <div className="flex justify-between">
                <span className="text-muted-foreground">–ö–∞–ª–æ—Ä–∏–∏:</span>
                <span className="font-medium text-foreground">
                  {Math.round(meal.calories * portionSize)} –∫–∫–∞–ª
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">–ë–µ–ª–∫–∏:</span>
                <span className="font-medium text-foreground">
                  {Math.round(meal.protein * portionSize)}–≥
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">–£–≥–ª–µ–≤–æ–¥—ã:</span>
                <span className="font-medium text-foreground">
                  {Math.round(meal.carbs * portionSize)}–≥
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-muted-foreground">–ñ–∏—Ä—ã:</span>
                <span className="font-medium text-foreground">
                  {Math.round(meal.fat * portionSize)}–≥
                </span>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex gap-3">
            <Button
              onClick={onClose}
              variant="outline"
              className="flex-1"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              onClick={handleConfirm}
              className="flex-1 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
            >
              <Plus className="h-4 w-4 mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};