import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { TrendingUp, TrendingDown, Minus, Calendar, Activity, Target } from 'lucide-react';
import { cn } from '@/lib/utils';

interface MenstrualEntry {
  id: string;
  date: string;
  type: 'menstruation' | 'spotting' | 'missed_expected' | 'ovulation_predicted';
  flow: 'light' | 'normal' | 'heavy' | 'very_heavy' | null;
  duration_days?: number;
  symptoms: {
    cramping: number;
    breast_tenderness: number;
    bloating: number;
    mood_changes: number;
    headache: boolean;
    back_pain: boolean;
  };
  notes?: string;
  created_at: string;
}

interface CycleAnalysis {
  current_cycle: {
    start_date: string;
    day_of_cycle: number;
    estimated_length: number;
    phase: 'menstrual' | 'follicular' | 'ovulatory' | 'luteal' | 'irregular';
    next_predicted_date?: string;
    confidence: number;
  };
  cycle_history: {
    average_length: number;
    shortest_cycle: number;
    longest_cycle: number;
    irregularity_score: number;
    trend: 'stable' | 'lengthening' | 'shortening' | 'irregular';
  };
  perimenopause_indicators: {
    missed_periods_count: number;
    cycle_variability: number;
    symptom_severity_trend: 'increasing' | 'stable' | 'decreasing';
    probable_stage: 'early_perimenopause' | 'late_perimenopause' | 'menopause' | 'premenopause';
  };
}

interface CycleAnalysisViewProps {
  analysis: CycleAnalysis | null;
  entries: MenstrualEntry[];
}

export const CycleAnalysisView: React.FC<CycleAnalysisViewProps> = ({
  analysis,
  entries
}) => {
  const [selectedPeriod, setSelectedPeriod] = useState<'3months' | '6months' | '1year'>('6months');
  
  if (!analysis) {
    return (
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardContent className="p-8 text-center">
          <div className="text-6xl mb-4">üìä</div>
          <h3 className="text-xl font-semibold text-gray-800 mb-2">
            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          </h3>
          <p className="text-gray-600">
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ü–∏–∫–ª –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-8">
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle className="text-2xl font-bold text-gray-800 flex items-center gap-3">
              üìä –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–∞
            </CardTitle>
            <div className="flex bg-gray-100 rounded-lg p-1">
              {(['3months', '6months', '1year'] as const).map((period) => (
                <Button
                  key={period}
                  variant={selectedPeriod === period ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setSelectedPeriod(period)}
                  className="text-sm"
                >
                  {period === '3months' ? '3 –º–µ—Å—è—Ü–∞' : 
                   period === '6months' ? '6 –º–µ—Å—è—Ü–µ–≤' : '1 –≥–æ–¥'}
                </Button>
              ))}
            </div>
          </div>
          <p className="text-gray-600">
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑—ã
          </p>
        </CardHeader>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <CycleStatCard
          title="–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞"
          value={`${analysis.cycle_history.average_length} –¥–Ω–µ–π`}
          icon="üìÖ"
          color="bg-blue-50 border-blue-200"
          trend={analysis.cycle_history.trend}
        />
        <CycleStatCard
          title="–í–∞—Ä–∏–∞—Ü–∏—è —Ü–∏–∫–ª–∞"
          value={`¬±${Math.abs(analysis.cycle_history.longest_cycle - analysis.cycle_history.shortest_cycle)} –¥–Ω–µ–π`}
          icon="üìä"
          color="bg-purple-50 border-purple-200"
          description={`${analysis.cycle_history.shortest_cycle}-${analysis.cycle_history.longest_cycle} –¥–Ω–µ–π`}
        />
        <CycleStatCard
          title="–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"
          value={`${100 - analysis.cycle_history.irregularity_score}%`}
          icon="‚≠ê"
          color={analysis.cycle_history.irregularity_score < 30 ? "bg-green-50 border-green-200" : 
                analysis.cycle_history.irregularity_score < 60 ? "bg-yellow-50 border-yellow-200" : 
                "bg-red-50 border-red-200"}
          description={getRegularityDescription(analysis.cycle_history.irregularity_score)}
        />
        <CycleStatCard
          title="–§–∞–∑–∞ –º–µ–Ω–æ–ø–∞—É–∑—ã"
          value={getStageLabel(analysis.perimenopause_indicators.probable_stage)}
          icon="üå∏"
          color="bg-pink-50 border-pink-200"
        />
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–æ–≤ */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
            üìà –î–∏–Ω–∞–º–∏–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–æ–≤
          </CardTitle>
        </CardHeader>
        <CardContent>
          <CycleLengthChart entries={entries} period={selectedPeriod} />
        </CardContent>
      </Card>

      {/* –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑—ã */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
            üîç –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <PerimenopausalIndicators indicators={analysis.perimenopause_indicators} />
        </CardContent>
      </Card>

      {/* –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ —Ñ–∞–∑–∞–º */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
            üåô –°–∏–º–ø—Ç–æ–º—ã –ø–æ —Ñ–∞–∑–∞–º —Ü–∏–∫–ª–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <SymptomPatternsByPhase entries={entries} />
        </CardContent>
      </Card>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ */}
      <CycleRecommendations analysis={analysis} />
    </div>
  );
};

// –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏–∫–ª–∞
interface CycleStatCardProps {
  title: string;
  value: string;
  icon: string;
  color: string;
  trend?: string;
  description?: string;
}

const CycleStatCard: React.FC<CycleStatCardProps> = ({ title, value, icon, color, trend, description }) => (
  <Card className={cn("border-2", color)}>
    <CardContent className="p-4">
      <div className="flex items-center justify-between mb-2">
        <span className="text-2xl">{icon}</span>
        {trend && (
          <Badge variant="outline" className={cn(
            "text-xs",
            trend === 'lengthening' ? 'text-red-600 border-red-300' :
            trend === 'shortening' ? 'text-blue-600 border-blue-300' : 'text-green-600 border-green-300'
          )}>
            {trend === 'lengthening' ? (
              <>
                <TrendingUp className="w-3 h-3 mr-1" />
                –£–¥–ª–∏–Ω—è–µ—Ç—Å—è
              </>
            ) : trend === 'shortening' ? (
              <>
                <TrendingDown className="w-3 h-3 mr-1" />
                –£–∫–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è
              </>
            ) : (
              <>
                <Minus className="w-3 h-3 mr-1" />
                –°—Ç–∞–±–∏–ª—å–Ω–æ
              </>
            )}
          </Badge>
        )}
      </div>
      <h4 className="text-sm font-medium text-gray-700 mb-1">{title}</h4>
      <div className="text-2xl font-bold text-gray-800 mb-1">{value}</div>
      {description && (
        <div className="text-xs text-gray-600">{description}</div>
      )}
    </CardContent>
  </Card>
);

// –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–æ–≤
interface CycleLengthChartProps {
  entries: MenstrualEntry[];
  period: '3months' | '6months' | '1year';
}

const CycleLengthChart: React.FC<CycleLengthChartProps> = ({ entries, period }) => {
  const cycles = calculateCycles(entries, period);
  
  if (cycles.length < 2) {
    return (
      <div className="text-center py-8">
        <div className="text-4xl mb-2">üìä</div>
        <p className="text-gray-600">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</p>
      </div>
    );
  }

  const maxLength = Math.max(...cycles.map(c => c.length));
  const minLength = Math.min(...cycles.map(c => c.length));
  const range = maxLength - minLength;

  return (
    <div className="space-y-4">
      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div className="flex justify-center space-x-6 text-sm">
        <div className="flex items-center">
          <div className="w-3 h-3 bg-blue-500 rounded mr-2"></div>
          <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞</span>
        </div>
        <div className="flex items-center">
          <div className="w-3 h-3 bg-red-500 rounded mr-2"></div>
          <span>–°—Ä–µ–¥–Ω—è—è (28 –¥–Ω–µ–π)</span>
        </div>
        <div className="flex items-center">
          <div className="w-3 h-3 bg-gray-300 rounded mr-2"></div>
          <span>–ù–æ—Ä–º–∞ (21-35 –¥–Ω–µ–π)</span>
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ */}
      <div className="relative h-64 bg-gray-50 rounded-lg p-4">
        <svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
          {/* –§–æ–Ω–æ–≤–∞—è —Å–µ—Ç–∫–∞ */}
          {[21, 28, 35].map(line => (
            <line
              key={line}
              x1="0"
              x2="100"
              y1={((35 - line) / 14) * 100}
              y2={((35 - line) / 14) * 100}
              stroke={line === 28 ? "#ef4444" : "#d1d5db"}
              strokeWidth={line === 28 ? "0.5" : "0.2"}
              strokeDasharray={line === 28 ? "none" : "1,1"}
              vectorEffect="non-scaling-stroke"
            />
          ))}
          
          {/* –õ–∏–Ω–∏—è —Ü–∏–∫–ª–∞ */}
          <polyline
            points={cycles.map((cycle, index) => 
              `${(index / Math.max(cycles.length - 1, 1)) * 100},${((35 - cycle.length) / 14) * 100}`
            ).join(' ')}
            fill="none"
            stroke="#3b82f6"
            strokeWidth="0.8"
            strokeLinecap="round"
            vectorEffect="non-scaling-stroke"
          />
          
          {/* –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
          {cycles.map((cycle, index) => (
            <circle
              key={index}
              cx={(index / Math.max(cycles.length - 1, 1)) * 100}
              cy={((35 - cycle.length) / 14) * 100}
              r="1"
              fill="#3b82f6"
              className="hover:r-2 transition-all cursor-pointer"
            >
              <title>{`–¶–∏–∫–ª ${index + 1}: ${cycle.length} –¥–Ω–µ–π`}</title>
            </circle>
          ))}
        </svg>
        
        {/* –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π */}
        <div className="absolute bottom-0 left-0 right-0 flex justify-between text-xs text-gray-600 mt-2">
          <span>–¶–∏–∫–ª 1</span>
          <span>–¶–∏–∫–ª {Math.floor(cycles.length / 2)}</span>
          <span>–¶–∏–∫–ª {cycles.length}</span>
        </div>
        <div className="absolute left-0 top-0 bottom-0 flex flex-col justify-between text-xs text-gray-600 -ml-8">
          <span>35</span>
          <span>28</span>
          <span>21</span>
        </div>
      </div>
      
      {/* –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ */}
      <div className="bg-blue-50 rounded-lg p-4">
        <h4 className="font-medium text-blue-800 mb-2">üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞:</h4>
        <div className="text-sm text-blue-700">
          <p>‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏–∫–ª–∞: {cycles.slice(-3).map(c => c.length).join(', ')} –¥–Ω–µ–π</p>
          <p>‚Ä¢ –í–∞—Ä–∏–∞—Ü–∏—è: {range} –¥–Ω–µ–π (–Ω–æ—Ä–º–∞: –¥–æ 7 –¥–Ω–µ–π)</p>
          <p>‚Ä¢ {range > 7 ? '‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å' : '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è'}</p>
        </div>
      </div>
    </div>
  );
};

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑—ã
interface PerimenopausalIndicatorsProps {
  indicators: CycleAnalysis['perimenopause_indicators'];
}

const PerimenopausalIndicators: React.FC<PerimenopausalIndicatorsProps> = ({ indicators }) => {
  const getStageInfo = (stage: string) => {
    switch (stage) {
      case 'premenopause':
        return { 
          label: '–ü—Ä–µ–º–µ–Ω–æ–ø–∞—É–∑–∞', 
          color: 'bg-green-100 text-green-800',
          description: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ü–∏–∫–ª—ã, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        };
      case 'early_perimenopause':
        return { 
          label: '–†–∞–Ω–Ω—è—è –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑–∞', 
          color: 'bg-yellow-100 text-yellow-800',
          description: '–ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞'
        };
      case 'late_perimenopause':
        return { 
          label: '–ü–æ–∑–¥–Ω—è—è –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑–∞', 
          color: 'bg-orange-100 text-orange-800',
          description: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∏ —Ü–∏–∫–ª–æ–≤'
        };
      case 'menopause':
        return { 
          label: '–ú–µ–Ω–æ–ø–∞—É–∑–∞', 
          color: 'bg-red-100 text-red-800',
          description: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ 12+ –º–µ—Å—è—Ü–µ–≤'
        };
      default:
        return { 
          label: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...', 
          color: 'bg-gray-100 text-gray-800',
          description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö'
        };
    }
  };

  const stageInfo = getStageInfo(indicators.probable_stage);

  return (
    <div className="space-y-6">
      
      {/* –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è */}
      <div className="text-center">
        <Badge className={cn("text-lg font-semibold px-4 py-2", stageInfo.color)}>
          {stageInfo.label}
        </Badge>
        <p className="text-gray-600 mt-2">{stageInfo.description}</p>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="bg-gray-50">
          <CardContent className="p-4">
            <h4 className="font-medium text-gray-800 mb-2">–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã</h4>
            <div className="text-2xl font-bold text-purple-600">
              {indicators.missed_periods_count}
            </div>
            <div className="text-sm text-gray-600">
              {indicators.missed_periods_count === 0 ? '–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤' :
               indicators.missed_periods_count < 3 ? '–†–µ–¥–∫–∏–µ –ø—Ä–æ–ø—É—Å–∫–∏' :
               indicators.missed_periods_count < 6 ? '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏' : '–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏'}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gray-50">
          <CardContent className="p-4">
            <h4 className="font-medium text-gray-800 mb-2">–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å</h4>
            <div className="text-2xl font-bold text-blue-600">
              {Math.round(indicators.cycle_variability * 100)}%
            </div>
            <div className="text-sm text-gray-600">
              {indicators.cycle_variability < 0.2 ? '–ù–∏–∑–∫–∞—è' :
               indicators.cycle_variability < 0.4 ? '–£–º–µ—Ä–µ–Ω–Ω–∞—è' : '–í—ã—Å–æ–∫–∞—è'}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gray-50">
          <CardContent className="p-4">
            <h4 className="font-medium text-gray-800 mb-2">–¢—Ä–µ–Ω–¥ —Å–∏–º–ø—Ç–æ–º–æ–≤</h4>
            <div className="text-2xl font-bold text-orange-600">
              {indicators.symptom_severity_trend === 'increasing' ? 'üìà' :
               indicators.symptom_severity_trend === 'decreasing' ? 'üìâ' : '‚û°Ô∏è'}
            </div>
            <div className="text-sm text-gray-600">
              {indicators.symptom_severity_trend === 'increasing' ? '–£—Å–∏–ª–∏–≤–∞—é—Ç—Å—è' :
               indicators.symptom_severity_trend === 'decreasing' ? '–£–º–µ–Ω—å—à–∞—é—Ç—Å—è' : '–°—Ç–∞–±–∏–ª—å–Ω–æ'}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–¥–∏–∏ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-medium text-blue-800 mb-3">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π —Å—Ç–∞–¥–∏–∏:</h4>
        <div className="space-y-2 text-sm text-blue-700">
          {getStageRecommendations(indicators.probable_stage).map((rec, index) => (
            <div key={index} className="flex items-start">
              <span className="text-blue-500 mr-2">‚Ä¢</span>
              <span>{rec}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ —Ñ–∞–∑–∞–º
interface SymptomPatternsByPhaseProps {
  entries: MenstrualEntry[];
}

const SymptomPatternsByPhase: React.FC<SymptomPatternsByPhaseProps> = ({ entries }) => {
  const symptomsByPhase = analyzeSymptomsByPhase(entries);
  
  if (!symptomsByPhase || Object.keys(symptomsByPhase).length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-4xl mb-2">üåô</div>
        <p className="text-gray-600">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö –ø–æ —Ñ–∞–∑–∞–º —Ü–∏–∫–ª–∞</p>
      </div>
    );
  }

  const phases = [
    { key: 'menstrual', name: '–ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è', icon: 'üî¥', color: 'bg-red-50 border-red-200' },
    { key: 'follicular', name: '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è', icon: 'üå±', color: 'bg-green-50 border-green-200' },
    { key: 'ovulatory', name: '–û–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è', icon: 'üåï', color: 'bg-yellow-50 border-yellow-200' },
    { key: 'luteal', name: '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è', icon: 'üåò', color: 'bg-purple-50 border-purple-200' }
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      {phases.map(phase => (
        <Card key={phase.key} className={cn("border-2", phase.color)}>
          <CardContent className="p-4">
            <div className="flex items-center mb-3">
              <span className="text-2xl mr-2">{phase.icon}</span>
              <h4 className="font-semibold text-gray-800">{phase.name}</h4>
            </div>
            
            {symptomsByPhase[phase.key] ? (
              <div className="space-y-2">
                {Object.entries(symptomsByPhase[phase.key]).map(([symptom, severity]) => (
                  <div key={symptom} className="flex justify-between items-center">
                    <span className="text-sm text-gray-700 capitalize">
                      {symptom.replace('_', ' ')}
                    </span>
                    <div className="flex items-center">
                      <div className="w-12 bg-gray-200 rounded-full h-2 mr-2">
                        <div 
                          className="bg-current h-2 rounded-full"
                          style={{ width: `${((severity as number) / 5) * 100}%` }}
                        />
                      </div>
                      <span className="text-xs text-gray-600">{severity}/5</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-sm text-gray-500">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
interface CycleRecommendationsProps {
  analysis: CycleAnalysis;
}

const CycleRecommendations: React.FC<CycleRecommendationsProps> = ({ analysis }) => {
  const recommendations = generateCycleRecommendations(analysis);
  
  return (
    <Card className="bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-200">
      <CardHeader>
        <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
          üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {recommendations.map((category, index) => (
            <Card key={index} className="bg-white">
              <CardContent className="p-4">
                <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                  <span className="mr-2">{category.icon}</span>
                  {category.title}
                </h4>
                <div className="space-y-2">
                  {category.items.map((item, itemIndex) => (
                    <div key={itemIndex} className="flex items-start text-sm text-gray-700">
                      <span className="text-purple-500 mr-2">‚Ä¢</span>
                      <span>{item}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getRegularityDescription = (irregularityScore: number): string => {
  if (irregularityScore < 30) return '–û—á–µ–Ω—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ';
  if (irregularityScore < 60) return '–£–º–µ—Ä–µ–Ω–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ';
  return '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ';
};

const getStageLabel = (stage: string): string => {
  switch (stage) {
    case 'premenopause': return '–ü—Ä–µ–º–µ–Ω–æ–ø–∞—É–∑–∞';
    case 'early_perimenopause': return '–†–∞–Ω–Ω—è—è –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑–∞';
    case 'late_perimenopause': return '–ü–æ–∑–¥–Ω—è—è –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑–∞';
    case 'menopause': return '–ú–µ–Ω–æ–ø–∞—É–∑–∞';
    default: return '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
  }
};

const calculateCycles = (entries: MenstrualEntry[], period: string) => {
  const menstrualEntries = entries
    .filter(e => e.type === 'menstruation')
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
  
  const cycles = [];
  for (let i = 1; i < menstrualEntries.length; i++) {
    const prevDate = new Date(menstrualEntries[i - 1].date);
    const currDate = new Date(menstrualEntries[i].date);
    const length = Math.floor((currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));
    
    if (length > 15 && length < 45) {
      cycles.push({ 
        length, 
        startDate: menstrualEntries[i - 1].date,
        endDate: menstrualEntries[i].date
      });
    }
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
  const now = new Date();
  const periodMonths = period === '3months' ? 3 : period === '6months' ? 6 : 12;
  const cutoffDate = new Date(now.getFullYear(), now.getMonth() - periodMonths, now.getDate());
  
  return cycles.filter(cycle => new Date(cycle.startDate) >= cutoffDate);
};

const getStageRecommendations = (stage: string): string[] => {
  switch (stage) {
    case 'premenopause':
      return [
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–¥–æ—Ä–æ–≤—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã',
        '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–º'
      ];
    case 'early_perimenopause':
      return [
        '–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª—å—Ü–∏—è –∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –π–æ–≥—É –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é',
        '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤',
        '–û–±—Å—É–¥–∏—Ç–µ —Å –≤—Ä–∞—á–æ–º –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–∞–ø–∏—é'
      ];
    case 'late_perimenopause':
      return [
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≥–∏–Ω–µ–∫–æ–ª–æ–≥–æ–º',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏',
        '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã',
        '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'
      ];
    case 'menopause':
      return [
        '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –æ—Å—Ç–µ–æ–ø–æ—Ä–æ–∑–∞',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
        '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º'
      ];
    default:
      return [
        '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ü–∏–∫–ª–∞',
        '–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–æ—Å–º–æ—Ç—Ä—ã'
      ];
  }
};

const analyzeSymptomsByPhase = (entries: MenstrualEntry[]) => {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ —Ñ–∞–∑–∞–º
  const phases = ['menstrual', 'follicular', 'ovulatory', 'luteal'];
  const result: Record<string, Record<string, number>> = {};
  
  phases.forEach(phase => {
    const phaseEntries = entries.filter(entry => {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –ø–æ —Ç–∏–ø—É –∑–∞–ø–∏—Å–∏
      if (phase === 'menstrual' && entry.type === 'menstruation') return true;
      if (phase === 'ovulatory' && entry.type === 'ovulation_predicted') return true;
      return false;
    });
    
    if (phaseEntries.length > 0) {
      const avgSymptoms = {
        cramping: phaseEntries.reduce((sum, e) => sum + e.symptoms.cramping, 0) / phaseEntries.length,
        bloating: phaseEntries.reduce((sum, e) => sum + e.symptoms.bloating, 0) / phaseEntries.length,
        mood_changes: phaseEntries.reduce((sum, e) => sum + e.symptoms.mood_changes, 0) / phaseEntries.length,
        breast_tenderness: phaseEntries.reduce((sum, e) => sum + e.symptoms.breast_tenderness, 0) / phaseEntries.length
      };
      
      result[phase] = avgSymptoms;
    }
  });
  
  return result;
};

const generateCycleRecommendations = (analysis: CycleAnalysis) => {
  const recommendations = [];
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
  recommendations.push({
    icon: 'üçé',
    title: '–ü–∏—Ç–∞–Ω–∏–µ',
    items: [
      '–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–µ–ª–µ–∑–∞ –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏',
      '–î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã —Å –º–∞–≥–Ω–∏–µ–º',
      '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ—Ñ–µ–∏–Ω –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —Ü–∏–∫–ª–∞',
      '–£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç'
    ]
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  recommendations.push({
    icon: 'üèÉ‚Äç‚ôÄÔ∏è',
    title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    items: [
      '–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —Ü–∏–∫–ª–∞',
      '–ô–æ–≥–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏',
      '–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω—É—é —Ñ–∞–∑—É',
      '–õ–µ–≥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –ø—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö'
    ]
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
  if (analysis.cycle_history.irregularity_score > 60) {
    recommendations.push({
      icon: 'üë©‚Äç‚öïÔ∏è',
      title: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      items: [
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≥–∏–Ω–µ–∫–æ–ª–æ–≥–æ–º',
        '–ê–Ω–∞–ª–∏–∑—ã –Ω–∞ –≥–æ—Ä–º–æ–Ω—ã',
        '–£–ó–ò –æ—Ä–≥–∞–Ω–æ–≤ –º–∞–ª–æ–≥–æ —Ç–∞–∑–∞',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã'
      ]
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏
  recommendations.push({
    icon: 'üßò‚Äç‚ôÄÔ∏è',
    title: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
    items: [
      '–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Å–æ–Ω 7-8 —á–∞—Å–æ–≤',
      '–¢–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º',
      '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã',
      '–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤'
    ]
  });
  
  return recommendations;
};