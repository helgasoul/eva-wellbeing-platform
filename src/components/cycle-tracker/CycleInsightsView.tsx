import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

// Types and interfaces
interface CycleAnalysis {
  current_cycle: {
    start_date: string;
    day_of_cycle: number;
    estimated_length: number;
    phase: 'menstrual' | 'follicular' | 'ovulatory' | 'luteal' | 'irregular';
    next_predicted_date?: string;
    confidence: number;
  };
  cycle_history: {
    average_length: number;
    shortest_cycle: number;
    longest_cycle: number;
    irregularity_score: number;
    trend: 'stable' | 'lengthening' | 'shortening' | 'irregular';
  };
  perimenopause_indicators: {
    missed_periods_count: number;
    cycle_variability: number;
    symptom_severity_trend: 'increasing' | 'stable' | 'decreasing';
    probable_stage: 'early_perimenopause' | 'late_perimenopause' | 'menopause' | 'premenopause';
  };
}

interface NutritionCorrelation {
  nutrient: string;
  cycle_impact: 'positive' | 'negative' | 'neutral';
  correlation_strength: number;
  recommendations: string[];
  optimal_range: string;
  current_intake?: number;
}

interface ActivityCorrelation {
  activity_type: string;
  symptom_impact: {
    cramps: number;
    mood: number;
    energy: number;
    hot_flashes: number;
  };
  optimal_timing: string[];
  recommendations: string[];
}

interface CycleInsight {
  id: string;
  type: 'pattern' | 'correlation' | 'prediction' | 'warning' | 'recommendation';
  priority: 'high' | 'medium' | 'low';
  confidence: number;
  title: string;
  description: string;
  icon: string;
  based_on: string[];
  actionable: boolean;
  actions?: string[];
}

interface CyclePrediction {
  id: string;
  title: string;
  description: string;
  timeframe: 'next_cycle' | 'next_month' | 'next_quarter';
  timeframe_label: string;
  probability: number;
  influencing_factors: {
    name: string;
    impact: number;
  }[];
}

interface PersonalPattern {
  id: string;
  name: string;
  description: string;
  frequency: string;
  icon: string;
}

interface OptimizationSuggestion {
  category: string;
  title: string;
  icon: string;
  suggestions: string[];
  expected_impact?: string;
}

interface CycleInsightsViewProps {
  cycleAnalysis: CycleAnalysis | null;
  correlations: {
    nutrition: NutritionCorrelation[];
    activity: ActivityCorrelation[];
  };
}

// Helper functions
const analyzeCycleInsights = async (
  cycleAnalysis: CycleAnalysis | null,
  correlations: { nutrition: NutritionCorrelation[]; activity: ActivityCorrelation[] }
): Promise<{ insights: CycleInsight[]; predictions: CyclePrediction[] }> => {
  if (!cycleAnalysis) {
    return { insights: [], predictions: [] };
  }

  const insights: CycleInsight[] = [];
  const predictions: CyclePrediction[] = [];

  // Generate insights based on cycle regularity
  if (cycleAnalysis.cycle_history.irregularity_score > 30) {
    insights.push({
      id: 'irregularity_warning',
      type: 'warning',
      priority: 'high',
      confidence: 85,
      title: '–í—ã—Å–æ–∫–∞—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞',
      description: '–í–∞—à —Ü–∏–∫–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å.',
      icon: '‚ö†Ô∏è',
      based_on: ['–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤', '–ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'],
      actionable: true,
      actions: [
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–∏–Ω–µ–∫–æ–ª–æ–≥—É-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥—É',
        '–í–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤',
        '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞'
      ]
    });
  }

  // Generate insights based on nutrition correlations
  correlations.nutrition.forEach(correlation => {
    if (correlation.correlation_strength > 0.6) {
      insights.push({
        id: `nutrition_${correlation.nutrient}`,
        type: 'correlation',
        priority: 'medium',
        confidence: Math.round(correlation.correlation_strength * 100),
        title: `–í–ª–∏—è–Ω–∏–µ ${correlation.nutrient} –Ω–∞ —Ü–∏–∫–ª`,
        description: `${correlation.nutrient} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${correlation.cycle_impact === 'positive' ? '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ' : '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ'} –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª.`,
        icon: correlation.cycle_impact === 'positive' ? '‚úÖ' : '‚ö†Ô∏è',
        based_on: ['–î–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è', '–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤'],
        actionable: true,
        actions: correlation.recommendations.slice(0, 2)
      });
    }
  });

  // Generate predictions
  if (cycleAnalysis.current_cycle.confidence > 70) {
    predictions.push({
      id: 'next_cycle_prediction',
      title: '–°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è',
      description: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.',
      timeframe: 'next_cycle',
      timeframe_label: '–°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª',
      probability: cycleAnalysis.current_cycle.confidence,
      influencing_factors: [
        { name: '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å', impact: 0.4 },
        { name: '–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞', impact: 0.3 },
        { name: '–°—Ç—Ä–µ—Å—Å', impact: -0.2 }
      ]
    });
  }

  return { insights, predictions };
};

const identifyPersonalPatterns = (
  cycleAnalysis: CycleAnalysis | null,
  correlations: { nutrition: NutritionCorrelation[]; activity: ActivityCorrelation[] }
): PersonalPattern[] => {
  if (!cycleAnalysis) return [];

  const patterns: PersonalPattern[] = [];

  // Pattern based on cycle trend
  if (cycleAnalysis.cycle_history.trend !== 'stable') {
    patterns.push({
      id: 'cycle_trend',
      name: `–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –∫ ${cycleAnalysis.cycle_history.trend === 'lengthening' ? '—É–¥–ª–∏–Ω–µ–Ω–∏—é' : '—É–∫–æ—Ä–æ—á–µ–Ω–∏—é'} —Ü–∏–∫–ª–æ–≤`,
      description: `–í–∞—à–∏ —Ü–∏–∫–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É—Å—Ç–æ–π—á–∏–≤—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –∫ ${cycleAnalysis.cycle_history.trend === 'lengthening' ? '—É–≤–µ–ª–∏—á–µ–Ω–∏—é' : '—É–º–µ–Ω—å—à–µ–Ω–∏—é'} –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.`,
      frequency: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞',
      icon: cycleAnalysis.cycle_history.trend === 'lengthening' ? 'üìà' : 'üìâ'
    });
  }

  // Pattern based on perimenopause stage
  if (cycleAnalysis.perimenopause_indicators.probable_stage !== 'premenopause') {
    patterns.push({
      id: 'perimenopause_pattern',
      name: '–ü–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
      description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–∏–º–µ–Ω–æ–ø–∞—É–∑–æ–π.',
      frequency: '–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω',
      icon: 'üå∏'
    });
  }

  return patterns;
};

const generateOptimizationSuggestions = (
  insights: CycleInsight[],
  correlations: { nutrition: NutritionCorrelation[]; activity: ActivityCorrelation[] }
): OptimizationSuggestion[] => {
  const optimizations: OptimizationSuggestion[] = [];

  // Nutrition optimization
  const nutritionSuggestions = correlations.nutrition
    .filter(n => n.cycle_impact === 'positive')
    .flatMap(n => n.recommendations)
    .slice(0, 3);

  if (nutritionSuggestions.length > 0) {
    optimizations.push({
      category: 'nutrition',
      title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è',
      icon: 'üçé',
      suggestions: nutritionSuggestions,
      expected_impact: '–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞ –Ω–∞ 15-20%'
    });
  }

  // Activity optimization
  const activitySuggestions = correlations.activity
    .flatMap(a => a.recommendations)
    .slice(0, 3);

  if (activitySuggestions.length > 0) {
    optimizations.push({
      category: 'activity',
      title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      icon: 'üèÉ‚Äç‚ôÄÔ∏è',
      suggestions: activitySuggestions,
      expected_impact: '–°–Ω–∏–∂–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–∞ 25-30%'
    });
  }

  // Lifestyle optimization
  optimizations.push({
    category: 'lifestyle',
    title: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
    icon: 'üßò‚Äç‚ôÄÔ∏è',
    suggestions: [
      '–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Å–æ–Ω 7-8 —á–∞—Å–æ–≤',
      '–ü—Ä–∞–∫—Ç–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º',
      '–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤'
    ],
    expected_impact: '–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è'
  });

  return optimizations;
};

export const CycleInsightsView: React.FC<CycleInsightsViewProps> = ({
  cycleAnalysis,
  correlations
}) => {
  const [insights, setInsights] = useState<CycleInsight[]>([]);
  const [predictions, setPredictions] = useState<CyclePrediction[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    generateCycleInsights();
  }, [cycleAnalysis, correlations]);

  const generateCycleInsights = async () => {
    setIsLoading(true);
    try {
      const generatedInsights = await analyzeCycleInsights(cycleAnalysis, correlations);
      setInsights(generatedInsights.insights);
      setPredictions(generatedInsights.predictions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤:', error);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return <CycleInsightsLoading />;
  }

  return (
    <div className="space-y-8">
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-gray-800 flex items-center gap-3">
            üß† –ò–ò-–∏–Ω—Å–∞–π—Ç—ã –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞
          </CardTitle>
          <p className="text-gray-600">
            –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—è–≤–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
          </p>
        </CardHeader>
      </Card>

      {/* –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
            üîç –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          {insights.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">üî¨</div>
              <h4 className="text-lg font-semibold text-gray-800 mb-2">
                –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
              </h4>
              <p className="text-gray-600">
                –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª—É–±–æ–∫–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {insights.slice(0, 4).map(insight => (
                <InsightCard key={insight.id} insight={insight} />
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
            üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          {predictions.length === 0 ? (
            <div className="text-center py-6">
              <div className="text-4xl mb-2">üîÆ</div>
              <p className="text-gray-600">
                –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {predictions.map(prediction => (
                <PredictionCard key={prediction.id} prediction={prediction} />
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã */}
      <PersonalPatterns cycleAnalysis={cycleAnalysis} correlations={correlations} />

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ */}
      <OptimizationRecommendations insights={insights} correlations={correlations} />
    </div>
  );
};

// –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–Ω—Å–∞–π—Ç–∞
const InsightCard: React.FC<{ insight: CycleInsight }> = ({ insight }) => {
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'border-red-300 bg-red-50';
      case 'medium': return 'border-yellow-300 bg-yellow-50';
      case 'low': return 'border-green-300 bg-green-50';
      default: return 'border-gray-300 bg-gray-50';
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'text-green-600';
    if (confidence >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className={cn("border-2 rounded-xl p-4 hover:shadow-md transition-shadow", getPriorityColor(insight.priority))}>
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é */}
      <div className="flex justify-between items-start mb-3">
        <div className="flex items-center">
          <span className="text-2xl mr-2">{insight.icon}</span>
          <h4 className="font-semibold text-gray-800">{insight.title}</h4>
        </div>
        <div className="text-right">
          <div className={cn("text-sm font-medium", getConfidenceColor(insight.confidence))}>
            {insight.confidence}%
          </div>
          <div className="text-xs text-gray-500">—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
        </div>
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <p className="text-sm text-gray-700 mb-4">{insight.description}</p>

      {/* –î–∞–Ω–Ω—ã–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω –∏–Ω—Å–∞–π—Ç */}
      <div className="bg-white rounded-lg p-3 mb-3">
        <div className="text-xs text-gray-600 mb-1">–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞:</div>
        <div className="flex flex-wrap gap-1">
          {insight.based_on.map(source => (
            <span key={source} className="bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs">
              {source}
            </span>
          ))}
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      {insight.actionable && insight.actions && (
        <div className="space-y-1">
          <div className="text-xs font-medium text-gray-700">–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</div>
          {insight.actions.slice(0, 2).map((action, index) => (
            <div key={index} className="flex items-start text-xs text-gray-600">
              <span className="text-purple-500 mr-1">‚Ä¢</span>
              {action}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
const PredictionCard: React.FC<{ prediction: CyclePrediction }> = ({ prediction }) => {
  const getTimeframeColor = (timeframe: string) => {
    switch (timeframe) {
      case 'next_cycle': return 'bg-blue-50 border-blue-300';
      case 'next_month': return 'bg-purple-50 border-purple-300';
      case 'next_quarter': return 'bg-green-50 border-green-300';
      default: return 'bg-gray-50 border-gray-300';
    }
  };

  return (
    <div className={cn("border-2 rounded-xl p-4", getTimeframeColor(prediction.timeframe))}>
      <div className="flex items-start justify-between mb-3">
        <div className="flex items-center">
          <span className="text-2xl mr-3">üîÆ</span>
          <div>
            <h4 className="font-semibold text-gray-800">{prediction.title}</h4>
            <div className="text-sm text-gray-600">{prediction.timeframe_label}</div>
          </div>
        </div>
        <div className="text-right">
          <div className="text-lg font-bold text-gray-800">{prediction.probability}%</div>
          <div className="text-xs text-gray-500">–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</div>
        </div>
      </div>

      <p className="text-sm text-gray-700 mb-3">{prediction.description}</p>

      {/* –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è */}
      <div className="bg-white rounded-lg p-3">
        <div className="text-xs font-medium text-gray-700 mb-2">–í–ª–∏—è—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</div>
        <div className="space-y-1">
          {prediction.influencing_factors.map((factor, index) => (
            <div key={index} className="flex justify-between items-center text-xs">
              <span className="text-gray-600">{factor.name}</span>
              <span className={cn(
                "font-medium",
                factor.impact > 0 ? "text-red-600" : "text-green-600"
              )}>
                {factor.impact > 0 ? '+' : ''}{Math.round(factor.impact * 100)}%
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
const PersonalPatterns: React.FC<{
  cycleAnalysis: CycleAnalysis | null;
  correlations: { nutrition: NutritionCorrelation[]; activity: ActivityCorrelation[] };
}> = ({ cycleAnalysis, correlations }) => {
  const patterns = identifyPersonalPatterns(cycleAnalysis, correlations);

  return (
    <Card className="bg-white/90 backdrop-blur-sm">
      <CardHeader>
        <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
          üé® –í–∞—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        </CardTitle>
      </CardHeader>
      <CardContent>
        {patterns.length === 0 ? (
          <div className="text-center py-6">
            <div className="text-4xl mb-2">üé®</div>
            <p className="text-gray-600">–ü–∞—Ç—Ç–µ—Ä–Ω—ã –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {patterns.map(pattern => (
              <div key={pattern.id} className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 border border-purple-200">
                <div className="flex items-center mb-2">
                  <span className="text-lg mr-2">{pattern.icon}</span>
                  <h4 className="font-medium text-gray-800">{pattern.name}</h4>
                </div>
                <p className="text-sm text-gray-700 mb-2">{pattern.description}</p>
                <div className="text-xs text-purple-700">
                  <strong>–ß–∞—Å—Ç–æ—Ç–∞:</strong> {pattern.frequency}
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const OptimizationRecommendations: React.FC<{
  insights: CycleInsight[];
  correlations: { nutrition: NutritionCorrelation[]; activity: ActivityCorrelation[] };
}> = ({ insights, correlations }) => {
  const optimizations = generateOptimizationSuggestions(insights, correlations);

  return (
    <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-blue-200">
      <CardHeader>
        <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-3">
          ‚ö° –ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ü–∏–∫–ª
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {optimizations.map(optimization => (
            <div key={optimization.category} className="bg-white rounded-lg p-4">
              <div className="flex items-center mb-3">
                <span className="text-2xl mr-2">{optimization.icon}</span>
                <h4 className="font-semibold text-gray-800">{optimization.title}</h4>
              </div>
              
              <div className="space-y-2">
                {optimization.suggestions.map((suggestion, index) => (
                  <div key={index} className="flex items-start text-sm text-gray-700">
                    <span className="text-blue-500 mr-2">‚Ä¢</span>
                    {suggestion}
                  </div>
                ))}
              </div>

              {optimization.expected_impact && (
                <div className="mt-3 p-2 bg-blue-50 rounded">
                  <div className="text-xs text-blue-700">
                    <strong>–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> {optimization.expected_impact}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
const CycleInsightsLoading: React.FC = () => (
  <div className="space-y-6">
    {[1, 2, 3].map((i) => (
      <Card key={i} className="bg-white/90 backdrop-blur-sm">
        <CardContent className="p-6">
          <div className="animate-pulse">
            <div className="h-6 bg-gray-200 rounded w-1/3 mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        </CardContent>
      </Card>
    ))}
  </div>
);