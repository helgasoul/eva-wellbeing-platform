import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Plus, TrendingUp, Calendar, Heart } from 'lucide-react';

interface CycleAnalysis {
  current_cycle: {
    start_date: string;
    day_of_cycle: number;
    estimated_length: number;
    phase: 'menstrual' | 'follicular' | 'ovulatory' | 'luteal' | 'irregular';
    next_predicted_date?: string;
    confidence: number;
  };
  cycle_history: {
    average_length: number;
    shortest_cycle: number;
    longest_cycle: number;
    irregularity_score: number;
    trend: 'stable' | 'lengthening' | 'shortening' | 'irregular';
  };
  perimenopause_indicators: {
    missed_periods_count: number;
    cycle_variability: number;
    symptom_severity_trend: 'increasing' | 'stable' | 'decreasing';
    probable_stage: 'early_perimenopause' | 'late_perimenopause' | 'menopause' | 'premenopause';
  };
}

interface CycleSidebarProps {
  cycleAnalysis: CycleAnalysis | null;
  onQuickLog: () => void;
}

export const CycleSidebar: React.FC<CycleSidebarProps> = ({
  cycleAnalysis,
  onQuickLog
}) => {
  const getPhaseProgress = () => {
    if (!cycleAnalysis) return 0;
    return (cycleAnalysis.current_cycle.day_of_cycle / cycleAnalysis.current_cycle.estimated_length) * 100;
  };

  const getPhaseColor = (phase: string) => {
    switch (phase) {
      case 'menstrual': return 'text-red-600';
      case 'follicular': return 'text-green-600';
      case 'ovulatory': return 'text-purple-600';
      case 'luteal': return 'text-yellow-600';
      default: return 'text-gray-600';
    }
  };

  const getPhaseDescription = (phase: string) => {
    switch (phase) {
      case 'menstrual':
        return '–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É —Ç–µ–ª—É.';
      case 'follicular':
        return '–≠–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Ç–µ—Ç! –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.';
      case 'ovulatory':
        return '–ü–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ.';
      case 'luteal':
        return '–í—Ä–µ–º—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–µ–ª.';
      default:
        return '–¶–∏–∫–ª –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π. –í–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.';
    }
  };

  const getRecommendations = () => {
    if (!cycleAnalysis) return [];
    
    const phase = cycleAnalysis.current_cycle.phase;
    switch (phase) {
      case 'menstrual':
        return [
          'üõÄ –¢—ë–ø–ª—ã–µ –≤–∞–Ω–Ω—ã –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è',
          'ü•ó –ü—Ä–æ–¥—É–∫—Ç—ã –±–æ–≥–∞—Ç—ã–µ –∂–µ–ª–µ–∑–æ–º',
          'üò¥ –ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞ –∏ —Å–Ω–∞',
          'üßò‚Äç‚ôÄÔ∏è –õ—ë–≥–∫–∞—è –π–æ–≥–∞ –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∞'
        ];
      case 'follicular':
        return [
          'üèÉ‚Äç‚ôÄÔ∏è –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          'ü•¨ –°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã',
          'üìö –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
          '‚òï –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ–∏–Ω–∞'
        ];
      case 'ovulatory':
        return [
          'üíÉ –¢–∞–Ω—Ü—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞',
          'ü•ë –ó–¥–æ—Ä–æ–≤—ã–µ –∂–∏—Ä—ã (–∞–≤–æ–∫–∞–¥–æ, –æ—Ä–µ—Ö–∏)',
          'üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          'üìù –í–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'
        ];
      case 'luteal':
        return [
          'üç´ –ú–∞–≥–Ω–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—è–≥–∏ –∫ —Å–ª–∞–¥–∫–æ–º—É',
          'üö∂‚Äç‚ôÄÔ∏è –°–ø–æ–∫–æ–π–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏',
          'üì± –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π',
          'üõèÔ∏è –†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞'
        ];
      default:
        return [
          'üìä –í–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫',
          'üë©‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º',
          'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞',
          '‚è∞ –†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º –¥–Ω—è'
        ];
    }
  };

  return (
    <div className="space-y-6">
      {/* –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ */}
      <Card className="bg-gradient-to-br from-pink-500 to-purple-600 text-white">
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Plus className="h-5 w-5" />
            –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Button 
            onClick={onQuickLog}
            className="w-full bg-white text-pink-600 hover:bg-pink-50"
          >
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ü–∏–∫–ª–µ
          </Button>
        </CardContent>
      </Card>

      {/* –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ */}
      {cycleAnalysis && (
        <Card className="bg-white/90 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-center">
              <div className={`text-2xl font-bold ${getPhaseColor(cycleAnalysis.current_cycle.phase)}`}>
                {cycleAnalysis.current_cycle.phase === 'menstrual' ? '–ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è' :
                 cycleAnalysis.current_cycle.phase === 'follicular' ? '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è' :
                 cycleAnalysis.current_cycle.phase === 'ovulatory' ? '–û–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è' :
                 cycleAnalysis.current_cycle.phase === 'luteal' ? '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è' :
                 '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è'}
              </div>
              <p className="text-sm text-gray-600 mt-1">
                {getPhaseDescription(cycleAnalysis.current_cycle.phase)}
              </p>
            </div>
            
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–∏–∫–ª–∞</span>
                <span>{cycleAnalysis.current_cycle.day_of_cycle}/{cycleAnalysis.current_cycle.estimated_length} –¥–Ω–µ–π</span>
              </div>
              <Progress value={getPhaseProgress()} className="h-2" />
            </div>
            
            <div className="text-center">
              <Badge variant="outline" className="text-xs">
                –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {cycleAnalysis.current_cycle.confidence}%
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <Card className="bg-white/90 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Heart className="h-5 w-5" />
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {getRecommendations().map((rec, index) => (
              <div key={index} className="flex items-start gap-2 text-sm">
                <span className="text-lg leading-none">
                  {rec.split(' ')[0]}
                </span>
                <span className="text-gray-600">
                  {rec.split(' ').slice(1).join(' ')}
                </span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {cycleAnalysis && (
        <Card className="bg-white/90 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">–°—Ä–µ–¥–Ω–∏–π —Ü–∏–∫–ª:</span>
              <span className="font-medium">{cycleAnalysis.cycle_history.average_length} –¥–Ω–µ–π</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">–î–∏–∞–ø–∞–∑–æ–Ω:</span>
              <span className="font-medium">
                {cycleAnalysis.cycle_history.shortest_cycle}-{cycleAnalysis.cycle_history.longest_cycle} –¥–Ω–µ–π
              </span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å:</span>
              <span className="font-medium">{cycleAnalysis.cycle_history.irregularity_score}%</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">–¢—Ä–µ–Ω–¥:</span>
              <Badge variant="outline" className="text-xs">
                {cycleAnalysis.cycle_history.trend === 'stable' ? '–°—Ç–∞–±–∏–ª—å–Ω—ã–π' :
                 cycleAnalysis.cycle_history.trend === 'lengthening' ? '–£–¥–ª–∏–Ω–µ–Ω–∏–µ' :
                 cycleAnalysis.cycle_history.trend === 'shortening' ? '–£–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ' :
                 '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π'}
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};