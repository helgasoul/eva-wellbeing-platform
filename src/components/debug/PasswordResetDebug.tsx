import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';

const PasswordResetDebug = ({ onClose }: { onClose?: () => void }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const [debugInfo, setDebugInfo] = useState({
    urlParams: null,
    supabaseSession: null,
    authEvents: [],
    routingFlow: [],
    authContext: null,
    userProfile: null,
    currentPath: null,
    sessionError: null
  });

  const [testEmail, setTestEmail] = useState('');
  const [resetTestResult, setResetTestResult] = useState(null);

  useEffect(() => {
    runPasswordResetDiagnostics();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è auth —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('üîÑ Auth State Change:', { event, session });
      setDebugInfo(prev => ({
        ...prev,
        authEvents: [...prev.authEvents, { 
          event, 
          session: session ? { 
            user_id: session.user?.id, 
            email: session.user?.email,
            access_token: session.access_token ? 'present' : 'missing'
          } : null,
          timestamp: new Date().toISOString()
        }]
      }));
    });

    return () => subscription.unsubscribe();
  }, [location]);

  const runPasswordResetDiagnostics = async () => {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø');
    console.log('üìç –¢–µ–∫—É—â–∏–π URL:', window.location.href);
    console.log('üìç Location object:', location);

    // 1. –ê–Ω–∞–ª–∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const urlParams = new URLSearchParams(window.location.search);
    const hashParams = new URLSearchParams(window.location.hash.replace('#', ''));
    
    const urlAnalysis = {
      search: window.location.search,
      hash: window.location.hash,
      pathname: window.location.pathname,
      searchParams: Object.fromEntries(urlParams.entries()),
      hashParams: Object.fromEntries(hashParams.entries()),
      hasAccessToken: urlParams.has('access_token') || hashParams.has('access_token'),
      hasRefreshToken: urlParams.has('refresh_token') || hashParams.has('refresh_token'),
      hasType: urlParams.has('type') || hashParams.has('type'),
      type: urlParams.get('type') || hashParams.get('type')
    };

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è)
    let userProfile = null;
    if (session?.user) {
      const { data: profile } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', session.user.id)
        .maybeSingle();
      userProfile = profile;
    }

    // 4. –ê–Ω–∞–ª–∏–∑ —Ä–æ—É—Ç–∏–Ω–≥–∞
    const routingAnalysis = {
      currentPath: location.pathname,
      currentSearch: location.search,
      currentHash: location.hash,
      locationState: location.state
    };

    setDebugInfo({
      urlParams: urlAnalysis,
      supabaseSession: session ? {
        user_id: session.user?.id,
        email: session.user?.email,
        expires_at: session.expires_at,
        token_type: session.token_type
      } : null,
      sessionError: sessionError?.message,
      userProfile,
      currentPath: location.pathname,
      routingFlow: [...debugInfo.routingFlow, {
        timestamp: new Date().toISOString(),
        path: location.pathname,
        search: location.search,
        hash: location.hash
      }],
      authEvents: debugInfo.authEvents,
      authContext: user ? {
        id: user.id,
        email: user.email,
        role: user.role,
        onboardingCompleted: user.onboardingCompleted
      } : null
    });

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', {
      urlAnalysis,
      session,
      userProfile,
      currentLocation: location,
      authContextUser: user
    });
  };

  const testPasswordReset = async () => {
    if (!testEmail) {
      setResetTestResult({ error: '–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
      return;
    }

    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø –¥–ª—è:', testEmail);
    
    try {
      const { data, error } = await supabase.auth.resetPasswordForEmail(testEmail, {
        redirectTo: `${window.location.origin}/reset-password`
      });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
        setResetTestResult({
          success: false,
          error: error.message
        });
      } else {
        console.log('‚úÖ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', data);
        setResetTestResult({
          success: true,
          message: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ.',
          redirectUrl: `${window.location.origin}/reset-password`
        });
      }
    } catch (e) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
      setResetTestResult({
        error: e.message
      });
    }
  };

  const analyzeCurrentUrl = () => {
    const url = window.location.href;
    const isPasswordResetUrl = url.includes('access_token') && url.includes('type=recovery');
    const isOnboardingPage = location.pathname.includes('onboarding');
    
    return {
      isPasswordResetUrl,
      isOnboardingPage,
      shouldBePasswordReset: isPasswordResetUrl && !isOnboardingPage,
      problem: isPasswordResetUrl && isOnboardingPage ? '–ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ –≤–º–µ—Å—Ç–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è' : 'OK'
    };
  };

  const checkAuthFlow = () => {
    const analysis = analyzeCurrentUrl();
    const session = debugInfo.supabaseSession;
    const profile = debugInfo.userProfile;
    const authUser = debugInfo.authContext;

    return {
      step1_url_correct: analysis.isPasswordResetUrl,
      step2_session_created: !!session,
      step3_profile_loaded: !!profile,
      step4_auth_context: !!authUser,
      step5_onboarding_check: profile?.onboarding_completed || authUser?.onboardingCompleted,
      step6_redirect_logic: analysis.isOnboardingPage,
      
      recommendations: [
        !analysis.isPasswordResetUrl && 'URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
        !session && analysis.isPasswordResetUrl && '–°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –∏–∑ URL —Ç–æ–∫–µ–Ω–æ–≤',
        session && !profile && '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ',
        session && !authUser && 'AuthContext –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        (profile && !profile.onboarding_completed || authUser && !authUser.onboardingCompleted) && analysis.isOnboardingPage && '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—Å—è –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏–∑-–∑–∞ onboarding_completed: false',
        analysis.problem !== 'OK' && analysis.problem
      ].filter(Boolean)
    };
  };

  const urlAnalysis = analyzeCurrentUrl();
  const authFlow = checkAuthFlow();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 max-w-6xl w-full max-h-full overflow-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è</h2>
          <button 
            onClick={() => onClose?.()}
            className="text-gray-500 hover:text-gray-700"
          >
            ‚úï
          </button>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã */}
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <h3 className="font-semibold text-red-800 mb-2">üö® –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏</h3>
          <div className="space-y-2 text-sm">
            <div className={`p-2 rounded ${urlAnalysis.problem === 'OK' ? 'bg-green-100' : 'bg-red-100'}`}>
              <strong>–°—Ç–∞—Ç—É—Å:</strong> {urlAnalysis.problem}
            </div>
            <div><strong>–≠—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</strong> {urlAnalysis.isPasswordResetUrl ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</div>
            <div><strong>–ù–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ:</strong> {urlAnalysis.isOnboardingPage ? '‚ö†Ô∏è –î–∞' : '‚úÖ –ù–µ—Ç'}</div>
          </div>
        </div>

        {/* –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h3 className="font-semibold text-blue-800 mb-2">üîÑ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
          <div className="space-y-2 text-sm">
            {Object.entries(authFlow).map(([key, value]) => {
              if (key === 'recommendations') return null;
              return (
                <div key={key} className="flex justify-between">
                  <span>{key.replace(/_/g, ' ')}:</span>
                  <span className={value ? 'text-green-600' : 'text-red-600'}>
                    {value ? '‚úÖ' : '‚ùå'} {String(value)}
                  </span>
                </div>
              );
            })}
          </div>
          {authFlow.recommendations.length > 0 && (
            <div className="mt-3 p-2 bg-yellow-100 rounded">
              <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
              <ul className="list-disc list-inside mt-1">
                {authFlow.recommendations.map((rec, i) => (
                  <li key={i} className="text-sm">{rec}</li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è */}
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
          <h3 className="font-semibold text-green-800 mb-2">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è</h3>
          <div className="flex gap-2 mb-2">
            <input
              type="email"
              placeholder="test@example.com"
              value={testEmail}
              onChange={(e) => setTestEmail(e.target.value)}
              className="flex-1 p-2 border rounded"
            />
            <button 
              onClick={testPasswordReset}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–±—Ä–æ—Å
            </button>
          </div>
          {resetTestResult && (
            <div className={`p-2 rounded text-sm ${resetTestResult.success ? 'bg-green-100' : 'bg-red-100'}`}>
              {resetTestResult.error && <div>‚ùå –û—à–∏–±–∫–∞: {resetTestResult.error}</div>}
              {resetTestResult.message && <div>‚úÖ {resetTestResult.message}</div>}
              {resetTestResult.redirectUrl && <div>üîó Redirect URL: {resetTestResult.redirectUrl}</div>}
            </div>
          )}
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="space-y-4">
          <details>
            <summary className="cursor-pointer font-semibold">üìã URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</summary>
            <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto">
              {JSON.stringify(debugInfo.urlParams, null, 2)}
            </pre>
          </details>

          <details>
            <summary className="cursor-pointer font-semibold">üë§ –°–µ—Å—Å–∏—è Supabase</summary>
            <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto">
              {JSON.stringify(debugInfo.supabaseSession, null, 2)}
            </pre>
          </details>

          <details>
            <summary className="cursor-pointer font-semibold">üîê AuthContext –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</summary>
            <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto">
              {JSON.stringify(debugInfo.authContext, null, 2)}
            </pre>
          </details>

          <details>
            <summary className="cursor-pointer font-semibold">üìÑ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</summary>
            <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto">
              {JSON.stringify(debugInfo.userProfile, null, 2)}
            </pre>
          </details>

          <details>
            <summary className="cursor-pointer font-semibold">üîÑ –°–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</summary>
            <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto">
              {JSON.stringify(debugInfo.authEvents, null, 2)}
            </pre>
          </details>

          <details>
            <summary className="cursor-pointer font-semibold">üö¶ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ—É—Ç–∏–Ω–≥–∞</summary>
            <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto">
              {JSON.stringify(debugInfo.routingFlow, null, 2)}
            </pre>
          </details>
        </div>

        <div className="mt-6 flex justify-between">
          <button
            onClick={runPasswordResetDiagnostics}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
          </button>
          <button
            onClick={() => {
              console.log('üìã –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø:');
              console.log('URL Analysis:', urlAnalysis);
              console.log('Auth Flow:', authFlow);
              console.log('Debug Info:', debugInfo);
              alert('–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)');
            }}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
          >
            üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
          </button>
        </div>
      </div>
    </div>
  );
};

export default PasswordResetDebug;