import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

const AuthDebug = () => {
  const [debugInfo, setDebugInfo] = useState({
    supabaseConnection: null,
    localStorageData: null,
    supabaseSession: null,
    supabaseUser: null,
    environmentVars: null,
    databaseTables: null,
    authUsers: null
  });
  
  const [testEmail, setTestEmail] = useState('');
  const [testPassword, setTestPassword] = useState('');
  const [testResults, setTestResults] = useState(null);

  useEffect(() => {
    runDiagnostics();
  }, []);

  const runDiagnostics = async () => {
    console.log('üîç –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    const checkSupabaseConnection = async () => {
      try {
        const { data, error } = await supabase.from('user_profiles').select('count').limit(1);
        return { 
          status: error ? 'error' : 'success', 
          message: error ? error.message : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
          data: data 
        };
      } catch (e) {
        return { status: 'error', message: e.message };
      }
    };

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
    const checkLocalStorage = () => {
      const userData = localStorage.getItem('eva_user_data');
      const onboardingData = localStorage.getItem('eva_onboarding_data');
      
      return {
        hasUserData: !!userData,
        hasOnboardingData: !!onboardingData,
        userData: userData ? JSON.parse(userData) : null,
        onboardingData: onboardingData ? JSON.parse(onboardingData) : null,
        allLocalStorageKeys: Object.keys(localStorage)
      };
    };

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const checkSession = async () => {
      const { data: { session }, error } = await supabase.auth.getSession();
      return {
        hasSession: !!session,
        session: session,
        error: error
      };
    };

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const checkEnvironment = () => {
      return {
        supabaseUrl: window.location.origin.includes('lovable') ? '–ò–°–ü–û–õ–¨–ó–£–ï–¢ –í–°–¢–†–û–ï–ù–ù–´–ô SUPABASE' : '–í–ù–ï–®–ù–ò–ô',
        nodeEnv: import.meta.env.MODE || 'unknown',
        isLovableEnv: window.location.origin.includes('lovable')
      };
    };

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const checkDatabaseTables = async () => {
      try {
        const { data: profiles, error: profilesError } = await supabase
          .from('user_profiles')
          .select('*')
          .limit(5);

        const { data: onboarding, error: onboardingError } = await supabase
          .from('onboarding_data')
          .select('*')
          .limit(5);

        return {
          userProfiles: {
            error: profilesError?.message || null,
            count: profiles?.length || 0,
            data: profiles || []
          },
          onboardingData: {
            error: onboardingError?.message || null,
            count: onboarding?.length || 0,
            data: onboarding || []
          }
        };
      } catch (e) {
        return { error: e.message };
      }
    };

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth.users
    const checkAuthUsers = async () => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ auth
        const { data: { user }, error } = await supabase.auth.getUser();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–µ—Ä–µ–∑ RPC
        const { data: usersInfo, error: usersError } = await supabase
          .rpc('get_auth_users_info');
        
        return {
          currentUser: user,
          error: error?.message || null,
          allUsersInfo: usersInfo || [],
          usersError: usersError?.message || null
        };
      } catch (e) {
        return { error: e.message };
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const results = {
      supabaseConnection: await checkSupabaseConnection(),
      localStorageData: checkLocalStorage(),
      supabaseSession: await checkSession(),
      supabaseUser: null, // Placeholder –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      environmentVars: checkEnvironment(),
      databaseTables: await checkDatabaseTables(),
      authUsers: await checkAuthUsers()
    };

    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', results);
    setDebugInfo(results);
  };

  const testLogin = async () => {
    if (!testEmail || !testPassword) {
      setTestResults({ error: '–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
      return;
    }

    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê:', { email: testEmail });
    
    try {
      // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
      const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      });

      if (loginError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginError);
        
        setTestResults({
          loginError: loginError.message,
          loginSuccess: false,
          errorCode: loginError.status,
          suggestion: loginError.message === 'Invalid login credentials' 
            ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
            : '–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
        });
      } else {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', loginData);
        setTestResults({
          loginSuccess: true,
          user: loginData.user,
          session: loginData.session
        });
      }
    } catch (e) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
      setTestResults({
        criticalError: e.message
      });
    }
  };

  const testRegistration = async () => {
    if (!testEmail || !testPassword) {
      setTestResults({ error: '–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
      return;
    }

    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:', { email: testEmail });
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword,
        options: {
          emailRedirectTo: `${window.location.origin}/`,
          data: {
            first_name: 'Test',
            last_name: 'User',
            user_role: 'patient'
          }
        }
      });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        setTestResults({
          registrationError: error.message,
          registrationSuccess: false
        });
      } else {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', data);
        setTestResults({
          registrationSuccess: true,
          user: data.user,
          session: data.session,
          needsEmailConfirmation: !data.session
        });
      }
    } catch (e) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', e);
      setTestResults({
        criticalError: e.message
      });
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 max-w-4xl w-full max-h-full overflow-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
          <button 
            onClick={() => window.location.reload()}
            className="text-gray-500 hover:text-gray-700 text-2xl"
          >
            ‚úï
          </button>
        </div>

        {/* –ë–ª–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="mb-6 p-4 bg-blue-50 rounded-lg">
          <h3 className="font-semibold mb-2">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h3>
          <div className="flex gap-2 mb-2">
            <input
              type="email"
              placeholder="test@example.com"
              value={testEmail}
              onChange={(e) => setTestEmail(e.target.value)}
              className="flex-1 p-2 border rounded"
            />
            <input
              type="password"
              placeholder="password123"
              value={testPassword}
              onChange={(e) => setTestPassword(e.target.value)}
              className="flex-1 p-2 border rounded"
            />
          </div>
          <div className="flex gap-2">
            <button onClick={testLogin} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
              –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
            </button>
            <button onClick={testRegistration} className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
              –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            </button>
          </div>
          {testResults && (
            <div className="mt-2">
              <h4 className="font-semibold text-sm mb-1">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>
              <pre className="p-2 bg-gray-100 rounded text-xs overflow-auto max-h-32">
                {JSON.stringify(testResults, null, 2)}
              </pre>
            </div>
          )}
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
        <div className="space-y-4">
          {Object.entries(debugInfo).map(([key, value]) => (
            <div key={key} className="border rounded p-3">
              <h3 className="font-semibold mb-2 capitalize">
                {key.replace(/([A-Z])/g, ' $1').trim()}
              </h3>
              <pre className="text-xs bg-gray-100 p-2 rounded overflow-auto max-h-40">
                {JSON.stringify(value, null, 2)}
              </pre>
            </div>
          ))}
        </div>

        <div className="mt-6 flex justify-between">
          <button
            onClick={runDiagnostics}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
          </button>
          <button
            onClick={() => {
              console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', debugInfo);
              console.log('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', testResults);
              alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)');
            }}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
          >
            üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
          </button>
        </div>
      </div>
    </div>
  );
};

export default AuthDebug;