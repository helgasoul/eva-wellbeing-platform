import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { Brain, Play, CheckCircle, AlertCircle, Loader2 } from 'lucide-react';
import { toast } from 'sonner';

export const TestEvaRecommendations: React.FC = () => {
  const { user } = useAuth();
  const [isTestingClaudeAnalysis, setIsTestingClaudeAnalysis] = useState(false);
  const [isTestingRecommendations, setIsTestingRecommendations] = useState(false);
  const [testResults, setTestResults] = useState<any>(null);
  const [recommendations, setRecommendations] = useState<any[]>([]);

  const runClaudeAnalysis = async () => {
    if (!user?.id) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    setIsTestingClaudeAnalysis(true);
    try {
      console.log('üß† –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Claude...');
      
      const { data, error } = await supabase.functions.invoke('daily-health-analysis', {
        body: {
          userId: user.id,
          analysisDate: new Date().toISOString().split('T')[0]
        }
      });

      if (error) {
        throw error;
      }

      setTestResults(data);
      toast.success('‚úÖ –ê–Ω–∞–ª–∏–∑ Claude –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('Claude analysis result:', data);
      
    } catch (error) {
      console.error('Error running Claude analysis:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: ' + (error as Error).message);
    } finally {
      setIsTestingClaudeAnalysis(false);
    }
  };

  const testRecommendationsUpdate = async () => {
    if (!user?.id) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    setIsTestingRecommendations(true);
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π Eva...');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ PatientDashboard
      const { evaRecommendationEngine } = await import('@/services/evaRecommendationEngine');
      const updatedRecommendations = await evaRecommendationEngine.analyzePatientData(user.id);
      
      setRecommendations(updatedRecommendations);
      toast.success('‚úÖ –í–∏–¥–∂–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!');
      console.log('Updated recommendations:', updatedRecommendations);
      
    } catch (error) {
      console.error('Error updating recommendations:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ' + (error as Error).message);
    } finally {
      setIsTestingRecommendations(false);
    }
  };

  const runFullTest = async () => {
    toast.info('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    
    // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ Claude
    await runClaudeAnalysis();
    
    // –®–∞–≥ 2: –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await testRecommendationsUpdate();
    
    toast.success('üéâ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  };

  return (
    <Card className="bg-card/90 backdrop-blur-sm border-primary/20">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-5 w-5 text-primary" />
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Eva"
        </CardTitle>
        <CardDescription>
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º Claude –∏ –≤–∏–¥–∂–µ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        
        {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <Button 
            onClick={runClaudeAnalysis}
            disabled={isTestingClaudeAnalysis}
            variant="outline"
            className="flex items-center gap-2"
          >
            {isTestingClaudeAnalysis ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Play className="h-4 w-4" />
            )}
            1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ Claude
          </Button>
          
          <Button 
            onClick={testRecommendationsUpdate}
            disabled={isTestingRecommendations}
            variant="outline"
            className="flex items-center gap-2"
          >
            {isTestingRecommendations ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Play className="h-4 w-4" />
            )}
            2. –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </Button>
          
          <Button 
            onClick={runFullTest}
            disabled={isTestingClaudeAnalysis || isTestingRecommendations}
            className="flex items-center gap-2"
          >
            <Play className="h-4 w-4" />
            –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
          </Button>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ Claude */}
        {testResults && (
          <div className="space-y-3">
            <h4 className="font-medium flex items-center gap-2">
              <CheckCircle className="h-4 w-4 text-green-500" />
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ Claude:
            </h4>
            <div className="bg-muted/50 p-3 rounded-lg">
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div>
                  <span className="font-medium">Session ID:</span> {testResults.sessionId}
                </div>
                <div>
                  <span className="font-medium">–°—Ç–∞—Ç—É—Å:</span> 
                  <Badge variant="default" className="ml-1">
                    {testResults.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}
                  </Badge>
                </div>
                <div className="col-span-2">
                  <span className="font-medium">–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</span>
                  <p className="text-muted-foreground mt-1">
                    {testResults.summary || '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'}
                  </p>
                </div>
                {testResults.hasNutritionPlan && (
                  <div className="col-span-2">
                    <Badge variant="secondary">–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω ‚úÖ</Badge>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */}
        {recommendations.length > 0 && (
          <div className="space-y-3">
            <h4 className="font-medium flex items-center gap-2">
              <CheckCircle className="h-4 w-4 text-green-500" />
              –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Eva ({recommendations.length}):
            </h4>
            <div className="space-y-2">
              {recommendations.slice(0, 3).map((rec, index) => (
                <div key={rec.id} className="bg-muted/50 p-3 rounded-lg border-l-4 border-primary">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h5 className="font-medium text-sm">{rec.title}</h5>
                      <p className="text-xs text-muted-foreground mt-1">
                        {rec.description}
                      </p>
                      <div className="flex items-center gap-2 mt-2">
                        <Badge 
                          variant={rec.priority === 'high' ? 'destructive' : 'secondary'}
                          className="text-xs"
                        >
                          {rec.priority}
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          {rec.category}
                        </Badge>
                        <span className="text-xs text-muted-foreground">
                          –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence}%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              {recommendations.length > 3 && (
                <p className="text-xs text-muted-foreground text-center">
                  ... –∏ –µ—â–µ {recommendations.length - 3} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                </p>
              )}
            </div>
          </div>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <div className="bg-blue-50 dark:bg-blue-950/20 p-3 rounded-lg border border-blue-200 dark:border-blue-800">
          <h4 className="font-medium text-blue-900 dark:text-blue-100 flex items-center gap-2 mb-2">
            <AlertCircle className="h-4 w-4" />
            –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç:
          </h4>
          <ol className="text-sm text-blue-800 dark:text-blue-200 space-y-1 list-decimal list-inside">
            <li>Claude –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase</li>
            <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ã ai_insights –∏ correlation_analysis</li>
            <li>Eva –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ–∂–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ Claude</li>
            <li>–í–∏–¥–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  );
};