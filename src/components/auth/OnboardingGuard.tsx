import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { LoadingSpinner } from '@/components/ui/loading-spinner';

interface OnboardingGuardProps {
  children: React.ReactNode;
}

/**
 * OnboardingGuard - –∑–∞—â–∏—â–∞–µ—Ç —Ä–æ—É—Ç—ã –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 * 
 * –õ–æ–≥–∏–∫–∞:
 * - –ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /patient/onboarding
 * - –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * - –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π (doctor, admin) ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
 * 
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
export const OnboardingGuard: React.FC<OnboardingGuardProps> = ({ children }) => {
  const { user, isLoading } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (isLoading || !user) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫
    if (user.role === 'patient') {
      // ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      const hasCompletedOnboarding = Boolean(user.onboardingCompleted);
      const hasOnboardingData = Boolean(user.onboardingData);
      
      if (!hasCompletedOnboarding) {
        console.log('üîí OnboardingGuard: Redirecting to onboarding', {
          userId: user.id,
          hasCompletedOnboarding,
          hasOnboardingData,
          registrationCompleted: user.registrationCompleted
        });
        navigate('/patient/onboarding', { replace: true });
        return;
      }
      
      console.log('‚úÖ OnboardingGuard: Onboarding completed, allowing access', {
        userId: user.id,
        onboardingCompletedAt: user.onboardingData?.completedAt
      });
    }
  }, [user, isLoading, navigate]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner />
          <p className="mt-4 text-muted-foreground">–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à —Å—Ç–∞—Ç—É—Å...</p>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  if (!user) {
    return null;
  }

  // –î–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  if (user.role === 'patient' && !user.onboardingCompleted) {
    // –†–µ–¥–∏—Ä–µ–∫—Ç —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤ useEffect, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner />
          <p className="mt-4 text-muted-foreground">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥...</p>
        </div>
      </div>
    );
  }

  // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  return <>{children}</>;
};