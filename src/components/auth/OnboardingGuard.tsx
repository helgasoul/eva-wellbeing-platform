
import React, { useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { logger } from '@/utils/logger';
import { UserRole } from '@/types/roles';

interface OnboardingGuardProps {
  children: React.ReactNode;
}

/**
 * OnboardingGuard - –∑–∞—â–∏—â–∞–µ—Ç —Ä–æ—É—Ç—ã –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 * 
 * –õ–æ–≥–∏–∫–∞:
 * - –ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /patient/onboarding
 * - –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * - –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π (doctor, admin) ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
 * 
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
export const OnboardingGuard: React.FC<OnboardingGuardProps> = ({ children }) => {
  const { user, isLoading } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (isLoading) {
      logger.debug('OnboardingGuard: Still loading user');
      return;
    }

    if (!user) {
      logger.debug('OnboardingGuard: No user found');
      return;
    }

    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É OnboardingGuard –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.group('üîç ONBOARDING GUARD DEBUG');
    console.log('1. User:', user);
    console.log('2. User role:', user.role);
    console.log('3. User role type:', typeof user.role);
    console.log('4. Is patient?', user.role === UserRole.PATIENT);
    console.log('5. Onboarding completed?', user.onboardingCompleted);
    console.log('6. Current path:', location.pathname);
    console.log('7. Should redirect to onboarding?', 
      user.role === UserRole.PATIENT && !user.onboardingCompleted);
    console.groupEnd();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫
    if (user.role === UserRole.PATIENT) {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç - –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –µ—Å–ª–∏ —É–∂–µ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
      if (location.pathname === '/patient/onboarding') {
        logger.debug('OnboardingGuard: Already on onboarding page, allowing access');
        return;
      }

      const hasCompletedOnboarding = Boolean(user.onboardingCompleted);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ recovery-—Å—Å—ã–ª–∫–æ–π (—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è)
      const urlParams = new URLSearchParams(window.location.search);
      const isPasswordRecovery = urlParams.get('type') === 'recovery';
      
      // Check for forced onboarding state from session storage
      const forcedOnboarding = sessionStorage.getItem('forcedOnboarding') === 'true';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hasEssentialData = user.registrationCompleted || 
                              user.onboardingData || 
                              Boolean(user.menopausePhase) ||
                              (user.firstName && user.lastName);
      
      logger.debug('OnboardingGuard: Authentication check', {
        userId: user.id,
        email: user.email,
        hasCompletedOnboarding,
        hasEssentialData,
        registrationCompleted: user.registrationCompleted,
        firstName: user.firstName,
        lastName: user.lastName,
        menopausePhase: user.menopausePhase,
        onboardingData: !!user.onboardingData,
        currentPath: location.pathname,
        isPasswordRecovery,
        forcedOnboarding
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ,
      // —Å—á–∏—Ç–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏ –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
      if (isPasswordRecovery && hasEssentialData) {
        logger.debug('OnboardingGuard: Password recovery for registered user, allowing access');
        return;
      }
      
      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É
      if (forcedOnboarding) {
        logger.debug('OnboardingGuard: Forced onboarding mode active, allowing access');
        return;
      }
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      if (!hasCompletedOnboarding && !hasEssentialData) {
        logger.info('OnboardingGuard: Redirecting to onboarding', {
          userId: user.id,
          currentPath: location.pathname,
          hasCompletedOnboarding,
          hasEssentialData,
          registrationCompleted: user.registrationCompleted,
          isPasswordRecovery
        });
        console.log('üîÑ Redirecting to onboarding...');
        navigate('/patient/onboarding', { replace: true });
        return;
      }
      
      logger.debug('OnboardingGuard: Onboarding completed or has essential data, allowing access', {
        userId: user.id,
        currentPath: location.pathname,
        hasCompletedOnboarding,
        hasEssentialData
      });
    }
  }, [user, isLoading, navigate, location.pathname]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner />
          <p className="mt-4 text-muted-foreground">–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à —Å—Ç–∞—Ç—É—Å...</p>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  if (!user) {
    return null;
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–≤–∞–ª–∞ –ø–µ—Ç–ª—é
  // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  if (location.pathname === '/patient/onboarding') {
    return <>{children}</>;
  }

  // –î–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const hasEssentialData = user.registrationCompleted || 
                          user.onboardingData || 
                          Boolean(user.menopausePhase);
                          
  if (user.role === UserRole.PATIENT && !user.onboardingCompleted && !hasEssentialData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner />
          <p className="mt-4 text-muted-foreground">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥...</p>
        </div>
      </div>
    );
  }

  // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  return <>{children}</>;
};
