import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { useRegistration } from '@/context/RegistrationContext';
import { useAuth } from '@/context/AuthContext';
import { CheckCircle, Sparkles, Heart, Shield, ArrowRight, Clock } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { dataBridge } from '@/services/dataBridge';

const menopausePersonas = {
  first_signs: {
    title: '–ü–µ—Ä–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏',
    icon: <Sparkles className="h-8 w-8" />,
    color: 'text-green-600',
    bgColor: 'bg-green-50'
  },
  active_phase: {
    title: '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞',
    icon: <Heart className="h-8 w-8" />,
    color: 'text-orange-600',
    bgColor: 'bg-orange-50'
  },
  postmenopause: {
    title: '–ü–æ—Å—Ç–º–µ–Ω–æ–ø–∞—É–∑–∞',
    icon: <Shield className="h-8 w-8" />,
    color: 'text-purple-600',
    bgColor: 'bg-purple-50'
  }
};

export const RegistrationComplete: React.FC = () => {
  const { state, resetRegistration } = useRegistration();
  const { completeRegistration } = useAuth();
  const navigate = useNavigate();
  const [isDataTransferred, setIsDataTransferred] = useState(false);
  const [newUser, setNewUser] = useState(null);
  const [transferResult, setTransferResult] = useState(null);
  
  const selectedPersona = state.step3Data.selectedPersona 
    ? menopausePersonas[state.step3Data.selectedPersona]
    : null;

  useEffect(() => {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ü–ï–†–ï–î –æ—á–∏—Å—Ç–∫–æ–π
    const completeAuthRegistration = async () => {
      if (!state.isCompleted || isDataTransferred) return;

      try {
        const registrationData = {
          step1: state.step1Data,
          step2: state.step2Data,
          step3: {
            personaId: state.step3Data.selectedPersona!,
            additionalData: state.step3Data.additionalAnswers
          },
          password: state.step4Data.password,
          firstName: state.step4Data.firstName,
          lastName: state.step4Data.lastName
        };

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const createdUser = await completeRegistration(registrationData);
        setNewUser(createdUser);
        
        // ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º DataBridge –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        const result = dataBridge.transferRegistrationToOnboarding(createdUser, {
          step1: state.step1Data,
          step2: state.step2Data,
          step3: state.step3Data
        });
        
        setTransferResult(result);
        
        if (result.success) {
          setIsDataTransferred(true);
          
          // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
          const analytics = dataBridge.getTransferAnalytics();
          console.log('‚úÖ DataBridge analytics:', analytics);
        } else {
          console.error('‚ùå DataBridge transfer failed:', result.errors);
          // Fallback to old method
          const onboardingPresets = {
            fromRegistration: true,
            personaId: state.step3Data.selectedPersona,
            registrationTimestamp: new Date().toISOString(),
            basicInfo: {
              firstName: state.step4Data.firstName,
              lastName: state.step4Data.lastName,
              email: state.step1Data.email,
              phone: state.step1Data.phone
            },
            consents: {
              ...state.step2Data,
              timestamp: new Date().toISOString()
            },
            expectedOnboardingPath: getOnboardingPathByPersona(state.step3Data.selectedPersona)
          };
          
          localStorage.setItem('eva_onboarding_presets', JSON.stringify(onboardingPresets));
          setIsDataTransferred(true);
        }
        
        toast({
          title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
          description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${createdUser.firstName}!`,
        });

        console.log('‚úÖ Registration data successfully transferred and saved');
        
      } catch (error) {
        console.error('‚ùå Error completing registration:', error);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          variant: 'destructive',
        });
      }
    };

    completeAuthRegistration();
  }, [state, completeRegistration, isDataTransferred]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  const handleContinueManually = () => {
    if (!isDataTransferred) {
      toast({
        title: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ',
        description: '–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...',
        variant: 'default',
      });
      return;
    }

    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    resetRegistration();
    navigate('/patient/onboarding');
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (isDataTransferred) {
      const timer = setTimeout(() => {
        handleContinueManually();
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, [isDataTransferred]);

  return (
    <div className="min-h-screen bloom-gradient flex items-center justify-center p-4">
      <div className="max-w-md mx-auto text-center">
        <div className="bloom-card p-8">
          {/* –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞ */}
          <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <CheckCircle className="w-10 h-10 text-green-600" />
          </div>
          
          <h1 className="text-2xl font-playfair font-bold text-foreground mb-4">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva! 
          </h1>
          
          <p className="text-muted-foreground mb-6">
            –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –°–µ–π—á–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É 
            —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —ç—Ç–∞–ø–∞.
          </p>

          {/* ‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å DataBridge */}
          <div className="bg-card rounded-lg p-4 mb-6 border border-muted">
            <h3 className="font-semibold text-foreground mb-3 flex items-center gap-2">
              <Clock className="h-4 w-4" />
              –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            </h3>
            <div className="space-y-2 text-sm">
              <div className="flex items-center justify-between">
                <span className="text-muted-foreground">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</span>
                <span className={newUser ? "text-green-600" : "text-yellow-600"}>
                  {newUser ? "‚úÖ" : "‚è≥"}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-muted-foreground">–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö</span>
                <span className={transferResult?.success ? "text-green-600" : "text-yellow-600"}>
                  {transferResult?.success ? "‚úÖ" : "‚è≥"}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-muted-foreground">–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏</span>
                <span className={isDataTransferred ? "text-green-600" : "text-yellow-600"}>
                  {isDataTransferred ? "‚úÖ" : "‚è≥"}
                </span>
              </div>
              {transferResult?.transferredKeys && (
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">–ö–ª—é—á–µ–π —Å–æ–∑–¥–∞–Ω–æ: {transferResult.transferredKeys.length}</span>
                  <span className="text-green-600">‚úÖ</span>
                </div>
              )}
            </div>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–µ */}
          {selectedPersona && (
            <div className={`${selectedPersona.bgColor} rounded-lg p-4 mb-6 border border-muted`}>
              <div className="flex items-center justify-center gap-3 mb-2">
                <div className={selectedPersona.color}>
                  {selectedPersona.icon}
                </div>
                <h3 className="font-semibold text-foreground">
                  –ü—Ä–æ—Ñ–∏–ª—å: {selectedPersona.title}
                </h3>
              </div>
              <p className="text-sm text-muted-foreground">
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
              </p>
            </div>
          )}
          
          {/* –ß—Ç–æ –¥–∞–ª—å—à–µ */}
          <div className="bg-card rounded-lg p-4 mb-6 border border-muted">
            <h3 className="font-semibold text-foreground mb-3 flex items-center gap-2">
              <ArrowRight className="h-4 w-4" />
              –ß—Ç–æ –¥–∞–ª—å—à–µ?
            </h3>
            <ul className="text-sm text-muted-foreground text-left space-y-2">
              <li className="flex items-start gap-2">
                <span className="text-primary">üìã</span>
                <span>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–Ω–∫–µ—Ç–∞ (5-7 –º–∏–Ω—É—Ç)</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-primary">üéØ</span>
                <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-primary">üìä</span>
                <span>–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-primary">üí¨</span>
                <span>–î–æ—Å—Ç—É–ø –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É</span>
              </li>
            </ul>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
          <Button
            onClick={handleContinueManually}
            disabled={!isDataTransferred}
            className={`w-full mb-4 ${
              isDataTransferred 
                ? 'bloom-button' 
                : 'bg-muted text-muted-foreground cursor-not-allowed'
            }`}
          >
            {isDataTransferred ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∫–µ—Ç–µ' : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'}
          </Button>
          
          {isDataTransferred ? (
            <p className="text-xs text-muted-foreground">
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...
            </p>
          ) : (
            <p className="text-xs text-muted-foreground">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏...
            </p>
          )}
        </div>

        {/* –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        <div className="mt-6 p-4 bg-white/50 backdrop-blur-sm rounded-lg border border-white/20">
          <p className="text-sm text-foreground">
            <strong>üåü –í—ã —Å–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω—ã–π —à–∞–≥!</strong> <br />
            {selectedPersona && `–ê–Ω–∫–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–∞–ø–∞ "${selectedPersona.title}". `}
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∂–µ –∂–¥—É—Ç –≤–∞—Å!
          </p>
        </div>
      </div>
    </div>
  );
};

// ‚úÖ –ù–û–í–û–ï: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
const getOnboardingPathByPersona = (personaId: string | null) => {
  if (!personaId) return { focus: ['general'], priorityQuestions: ['basic_info'] };
  
  const paths = {
    'first_signs': {
      focus: ['cycle_tracking', 'education', 'prevention'],
      priorityQuestions: ['menstrual_history', 'family_history', 'lifestyle'],
      recommendedLength: 'standard'
    },
    'active_phase': {
      focus: ['symptom_management', 'quality_of_life', 'treatment_options'],
      priorityQuestions: ['current_symptoms', 'impact_assessment', 'treatment_preferences'],
      recommendedLength: 'detailed'
    },
    'postmenopause': {
      focus: ['long_term_health', 'prevention', 'wellness'],
      priorityQuestions: ['health_screening', 'bone_health', 'cardiovascular_health'],
      recommendedLength: 'comprehensive'
    }
  };
  return paths[personaId as keyof typeof paths] || paths['active_phase'];
};