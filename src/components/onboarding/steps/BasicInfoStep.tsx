
import React from 'react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { BasicInfo } from '@/types/onboarding';

interface BasicInfoStepProps {
  data?: BasicInfo;
  onChange: (data: BasicInfo) => void;
}

export const BasicInfoStep: React.FC<BasicInfoStepProps> = ({ data, onChange }) => {
  const updateField = (field: keyof BasicInfo, value: any) => {
    onChange({
      ...data,
      [field]: value
    } as BasicInfo);
  };

  return (
    <div className="space-y-6">
      {/* Age */}
      <div className="space-y-2">
        <Label htmlFor="age">–í–æ–∑—Ä–∞—Å—Ç *</Label>
        <Input
          id="age"
          type="number"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 45"
          value={data?.age || ''}
          onChange={(e) => updateField('age', parseInt(e.target.value))}
          min="18"
          max="100"
        />
      </div>

      {/* Height and Weight */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="height">–†–æ—Å—Ç (—Å–º) *</Label>
          <Input
            id="height"
            type="number"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 165"
            value={data?.height || ''}
            onChange={(e) => updateField('height', parseInt(e.target.value))}
            min="100"
            max="250"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="weight">–í–µ—Å (–∫–≥) *</Label>
          <Input
            id="weight"
            type="number"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 65"
            value={data?.weight || ''}
            onChange={(e) => updateField('weight', parseInt(e.target.value))}
            min="30"
            max="200"
          />
        </div>
      </div>

      {/* Location */}
      <div className="space-y-2">
        <Label htmlFor="location">–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</Label>
        <Input
          id="location"
          type="text"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞"
          value={data?.location || ''}
          onChange={(e) => updateField('location', e.target.value)}
        />
      </div>

      {/* Occupation */}
      <div className="space-y-2">
        <Label htmlFor="occupation">–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</Label>
        <Input
          id="occupation"
          type="text"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω–µ–¥–∂–µ—Ä"
          value={data?.occupation || ''}
          onChange={(e) => updateField('occupation', e.target.value)}
        />
      </div>

      {/* Children */}
      <div className="space-y-4">
        <div className="flex items-center space-x-2">
          <Checkbox
            id="hasChildren"
            checked={data?.hasChildren || false}
            onCheckedChange={(checked) => updateField('hasChildren', checked)}
          />
          <Label htmlFor="hasChildren">–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–µ—Ç–∏</Label>
        </div>

        {data?.hasChildren && (
          <div className="ml-6 space-y-2">
            <Label htmlFor="childrenCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π</Label>
            <Input
              id="childrenCount"
              type="number"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 2"
              value={data?.childrenCount || ''}
              onChange={(e) => updateField('childrenCount', parseInt(e.target.value))}
              min="1"
              max="10"
            />
          </div>
        )}
      </div>

      <div className="text-sm text-muted-foreground bg-eva-soft-pink/20 rounded-lg p-3">
        <p>
          üí° <strong>–ü–æ—á–µ–º—É –º—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º:</strong> –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è 
          –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.
        </p>
      </div>
    </div>
  );
};
