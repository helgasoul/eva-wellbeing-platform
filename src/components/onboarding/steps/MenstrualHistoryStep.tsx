
import React from 'react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { MenstrualHistory } from '@/types/onboarding';

interface MenstrualHistoryStepProps {
  data?: MenstrualHistory;
  onChange: (data: MenstrualHistory) => void;
}

export const MenstrualHistoryStep: React.FC<MenstrualHistoryStepProps> = ({ data, onChange }) => {
  const updateField = (field: keyof MenstrualHistory, value: any) => {
    onChange({
      ...data,
      [field]: value
    } as MenstrualHistory);
  };

  return (
    <div className="space-y-6">
      {/* Age of first period */}
      <div className="space-y-2">
        <Label htmlFor="ageOfFirstPeriod">–í–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ *</Label>
        <Input
          id="ageOfFirstPeriod"
          type="number"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 13"
          value={data?.ageOfFirstPeriod || ''}
          onChange={(e) => updateField('ageOfFirstPeriod', parseInt(e.target.value))}
          min="8"
          max="20"
        />
      </div>

      {/* Average cycle length */}
      <div className="space-y-2">
        <Label htmlFor="averageCycleLength">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–¥–Ω–∏)</Label>
        <Input
          id="averageCycleLength"
          type="number"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 28"
          value={data?.averageCycleLength || ''}
          onChange={(e) => updateField('averageCycleLength', parseInt(e.target.value))}
          min="20"
          max="45"
        />
        <p className="text-sm text-muted-foreground">
          –û—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –æ–¥–Ω–æ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Å–ª–µ–¥—É—é—â–µ–π
        </p>
      </div>

      {/* Last period date */}
      <div className="space-y-2">
        <Label htmlFor="lastPeriodDate">–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏</Label>
        <Input
          id="lastPeriodDate"
          type="date"
          value={data?.lastPeriodDate || ''}
          onChange={(e) => updateField('lastPeriodDate', e.target.value)}
        />
      </div>

      {/* Regular periods */}
      <div className="flex items-center space-x-2">
        <Checkbox
          id="isPeriodsRegular"
          checked={data?.isPeriodsRegular || false}
          onCheckedChange={(checked) => updateField('isPeriodsRegular', checked)}
        />
        <Label htmlFor="isPeriodsRegular">–ú–æ–∏ —Ü–∏–∫–ª—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ</Label>
      </div>

      {/* Stopped completely */}
      <div className="space-y-4">
        <div className="flex items-center space-x-2">
          <Checkbox
            id="hasStoppedCompletely"
            checked={data?.hasStoppedCompletely || false}
            onCheckedChange={(checked) => updateField('hasStoppedCompletely', checked)}
          />
          <Label htmlFor="hasStoppedCompletely">–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏—Å—å</Label>
        </div>

        {data?.hasStoppedCompletely && (
          <div className="ml-6 space-y-2">
            <Label htmlFor="whenStoppedCompletely">–ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?</Label>
            <Input
              id="whenStoppedCompletely"
              type="month"
              value={data?.whenStoppedCompletely || ''}
              onChange={(e) => updateField('whenStoppedCompletely', e.target.value)}
            />
          </div>
        )}
      </div>

      {/* Pregnancies */}
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="pregnanciesCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–µ–π</Label>
          <Input
            id="pregnanciesCount"
            type="number"
            placeholder="0"
            value={data?.pregnanciesCount ?? ''}
            onChange={(e) => updateField('pregnanciesCount', parseInt(e.target.value) || 0)}
            min="0"
            max="15"
          />
        </div>

        {(data?.pregnanciesCount ?? 0) > 0 && (
          <div className="space-y-2">
            <Label htmlFor="lastPregnancyYear">–ì–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏</Label>
            <Input
              id="lastPregnancyYear"
              type="number"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 2010"
              value={data?.lastPregnancyYear || ''}
              onChange={(e) => updateField('lastPregnancyYear', parseInt(e.target.value))}
              min="1950"
              max={new Date().getFullYear()}
            />
          </div>
        )}
      </div>

      <div className="text-sm text-muted-foreground bg-muted/50 rounded-lg p-3">
        <p>
          üí° <strong>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ:</strong> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ 
          –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–π —Ñ–∞–∑—ã –º–µ–Ω–æ–ø–∞—É–∑—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
        </p>
      </div>
    </div>
  );
};
