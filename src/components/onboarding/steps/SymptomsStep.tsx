
import React from 'react';
import { SymptomFrequencySelector } from '@/components/onboarding/SymptomFrequencySelector';
import { SeverityScale } from '@/components/onboarding/SeverityScale';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { MenopauseSymptoms } from '@/types/onboarding';

interface SymptomsStepProps {
  data?: MenopauseSymptoms;
  onChange: (data: MenopauseSymptoms) => void;
}

const defaultSymptoms: MenopauseSymptoms = {
  hotFlashes: { frequency: 'never', severity: 1, triggers: [] },
  nightSweats: { frequency: 'never', severity: 1 },
  sleepProblems: { frequency: 'never', types: [], sleepQuality: 7 },
  moodChanges: { frequency: 'never', types: [] },
  physicalSymptoms: [],
  cognitiveSymptoms: []
};

export const SymptomsStep: React.FC<SymptomsStepProps> = ({ data = defaultSymptoms, onChange }) => {
  const updateField = (field: keyof MenopauseSymptoms, value: any) => {
    onChange({
      ...data,
      [field]: value
    });
  };

  const updateSymptomFrequency = (symptom: 'hotFlashes' | 'nightSweats', frequency: any) => {
    updateField(symptom, { ...data[symptom], frequency });
  };

  const updateSymptomSeverity = (symptom: 'hotFlashes' | 'nightSweats', severity: number) => {
    updateField(symptom, { ...data[symptom], severity });
  };

  const updateHotFlashTriggers = (triggers: string[]) => {
    updateField('hotFlashes', { ...data.hotFlashes, triggers });
  };

  const updateComplexSymptom = (symptom: 'sleepProblems' | 'moodChanges', field: string, value: any) => {
    updateField(symptom, { ...data[symptom], [field]: value });
  };

  const toggleArrayItem = (array: string[], item: string) => {
    return array.includes(item) 
      ? array.filter(i => i !== item)
      : [...array, item];
  };

  return (
    <div className="space-y-8">
      <div className="text-sm text-muted-foreground bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-4 mb-6">
        <div className="flex items-start space-x-3">
          <div className="text-blue-500 text-lg">üí°</div>
          <div>
            <p className="font-medium text-blue-900 mb-1">–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</p>
            <p className="text-blue-800">
              –ï—Å–ª–∏ –≤—ã –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∫–∞–∫–æ–π-—Ç–æ —Å–∏–º–ø—Ç–æ–º, —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. 
              –í—ã–±–∏—Ä–∞–π—Ç–µ "–ù–∏–∫–æ–≥–¥–∞" –∏–ª–∏ "–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ" - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            </p>
          </div>
        </div>
      </div>
      {/* Hot Flashes */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-foreground">–ü—Ä–∏–ª–∏–≤—ã</h3>
        <SymptomFrequencySelector
          label="–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ø—Ä–∏–ª–∏–≤—ã?"
          value={data.hotFlashes.frequency}
          onChange={(frequency) => updateSymptomFrequency('hotFlashes', frequency)}
        />
        {data.hotFlashes.frequency !== 'never' && (
          <div className="space-y-4">
            <SeverityScale
              label="–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–∏–≤—ã?"
              value={data.hotFlashes.severity}
              onChange={(severity) => updateSymptomSeverity('hotFlashes', severity)}
            />
            
            {/* Hot Flash Triggers */}
            <div className="space-y-3">
              <Label>–ß—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–∏–≤—ã? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</Label>
              <div className="grid grid-cols-2 gap-2">
                {[
                  { value: 'stress', label: '–°—Ç—Ä–µ—Å—Å' },
                  { value: 'heat', label: '–ñ–∞—Ä–∞' },
                  { value: 'alcohol', label: '–ê–ª–∫–æ–≥–æ–ª—å' },
                  { value: 'caffeine', label: '–ö–æ—Ñ–µ–∏–Ω' },
                  { value: 'spicy_food', label: '–û—Å—Ç—Ä–∞—è –ø–∏—â–∞' }
                ].map((trigger) => (
                  <div key={trigger.value} className="flex items-center space-x-2">
                    <Checkbox
                      id={trigger.value}
                      checked={data.hotFlashes.triggers?.includes(trigger.value) || false}
                      onCheckedChange={(checked) => {
                        const currentTriggers = data.hotFlashes.triggers || [];
                        const newTriggers = checked
                          ? [...currentTriggers, trigger.value]
                          : currentTriggers.filter(t => t !== trigger.value);
                        updateHotFlashTriggers(newTriggers);
                      }}
                    />
                    <Label htmlFor={trigger.value}>{trigger.label}</Label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Night Sweats */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-foreground">–ù–æ—á–Ω–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å</h3>
        <SymptomFrequencySelector
          label="–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –æ—Ç –ø–æ—Ç–ª–∏–≤–æ—Å—Ç–∏?"
          value={data.nightSweats.frequency}
          onChange={(frequency) => updateSymptomFrequency('nightSweats', frequency)}
        />
        {data.nightSweats.frequency !== 'never' && (
          <SeverityScale
            label="–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–∞—è –Ω–æ—á–Ω–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å?"
            value={data.nightSweats.severity}
            onChange={(severity) => updateSymptomSeverity('nightSweats', severity)}
          />
        )}
      </div>

      {/* Sleep Problems */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-foreground">–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º</h3>
        <SymptomFrequencySelector
          label="–ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º?"
          value={data.sleepProblems.frequency}
          onChange={(frequency) => updateComplexSymptom('sleepProblems', 'frequency', frequency)}
        />
        {data.sleepProblems.frequency !== 'never' && (
          <div className="space-y-4">
            <div className="space-y-3">
              <Label>–ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</Label>
              <div className="space-y-2">
                {[
                  { value: 'difficulty_falling_asleep', label: '–¢—Ä—É–¥–Ω–æ –∑–∞—Å–Ω—É—Ç—å' },
                  { value: 'frequent_waking', label: '–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è' },
                  { value: 'early_waking', label: '–†–∞–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ' }
                ].map((option) => (
                  <div key={option.value} className="flex items-center space-x-2">
                    <Checkbox
                      id={option.value}
                      checked={data.sleepProblems.types.includes(option.value)}
                      onCheckedChange={(checked) => {
                        const newTypes = checked
                          ? [...data.sleepProblems.types, option.value]
                          : data.sleepProblems.types.filter(t => t !== option.value);
                        updateComplexSymptom('sleepProblems', 'types', newTypes);
                      }}
                    />
                    <Label htmlFor={option.value}>{option.label}</Label>
                  </div>
                ))}
              </div>
            </div>

            {/* Sleep Quality Scale */}
            <SeverityScale
              label="–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–Ω–∞?"
              value={data.sleepProblems.sleepQuality || 7}
              onChange={(quality) => updateComplexSymptom('sleepProblems', 'sleepQuality', quality)}
            />
          </div>
        )}
      </div>

      {/* Mood Changes */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-foreground">–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</h3>
        <SymptomFrequencySelector
          label="–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ –ø–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è?"
          value={data.moodChanges.frequency}
          onChange={(frequency) => updateComplexSymptom('moodChanges', 'frequency', frequency)}
        />
        {data.moodChanges.frequency !== 'never' && (
          <div className="space-y-3">
            <Label>–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</Label>
            <div className="grid grid-cols-2 gap-2">
              {[
                { value: 'irritability', label: '–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
                { value: 'anxiety', label: '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å' },
                { value: 'depression', label: '–ü–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å' },
                { value: 'mood_swings', label: '–†–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã' }
              ].map((option) => (
                <div key={option.value} className="flex items-center space-x-2">
                  <Checkbox
                    id={option.value}
                    checked={data.moodChanges.types.includes(option.value)}
                    onCheckedChange={(checked) => {
                      const newTypes = checked
                        ? [...data.moodChanges.types, option.value]
                        : data.moodChanges.types.filter(t => t !== option.value);
                      updateComplexSymptom('moodChanges', 'types', newTypes);
                    }}
                  />
                  <Label htmlFor={option.value}>{option.label}</Label>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Physical Symptoms */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-foreground">–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã</h3>
        <Label>–ö–∞–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</Label>
        <div className="grid grid-cols-2 gap-2">
          {[
            { value: 'joint_pain', label: '–ë–æ–ª–∏ –≤ —Å—É—Å—Ç–∞–≤–∞—Ö' },
            { value: 'headaches', label: '–ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏' },
            { value: 'fatigue', label: '–£—Å—Ç–∞–ª–æ—Å—Ç—å' },
            { value: 'weight_gain', label: '–ù–∞–±–æ—Ä –≤–µ—Å–∞' },
            { value: 'dry_skin', label: '–°—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏' }
          ].map((option) => (
            <div key={option.value} className="flex items-center space-x-2">
              <Checkbox
                id={option.value}
                checked={data.physicalSymptoms.includes(option.value)}
                disabled={data.physicalSymptoms.includes('none_of_the_above')}
                onCheckedChange={(checked) => {
                  const newSymptoms = toggleArrayItem(data.physicalSymptoms, option.value);
                  updateField('physicalSymptoms', newSymptoms);
                }}
              />
              <Label htmlFor={option.value}>{option.label}</Label>
            </div>
          ))}
        </div>
        <div className="border-t pt-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="physical_none"
              checked={data.physicalSymptoms.includes('none_of_the_above')}
              onCheckedChange={(checked) => {
                if (checked) {
                  updateField('physicalSymptoms', ['none_of_the_above']);
                } else {
                  updateField('physicalSymptoms', []);
                }
              }}
            />
            <Label htmlFor="physical_none" className="text-muted-foreground">
              –ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ
            </Label>
          </div>
        </div>
      </div>

      {/* Cognitive Symptoms */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-foreground">–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã</h3>
        <Label>–ó–∞–º–µ—á–∞–µ—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º—ã—à–ª–µ–Ω–∏–∏? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</Label>
        <div className="space-y-2">
          {[
            { value: 'memory_issues', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é' },
            { value: 'concentration_problems', label: '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π' },
            { value: 'brain_fog', label: '–¢—É–º–∞–Ω –≤ –≥–æ–ª–æ–≤–µ' }
          ].map((option) => (
            <div key={option.value} className="flex items-center space-x-2">
              <Checkbox
                id={option.value}
                checked={data.cognitiveSymptoms.includes(option.value)}
                disabled={data.cognitiveSymptoms.includes('none_of_the_above')}
                onCheckedChange={(checked) => {
                  const newSymptoms = toggleArrayItem(data.cognitiveSymptoms, option.value);
                  updateField('cognitiveSymptoms', newSymptoms);
                }}
              />
              <Label htmlFor={option.value}>{option.label}</Label>
            </div>
          ))}
        </div>
        <div className="border-t pt-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="cognitive_none"
              checked={data.cognitiveSymptoms.includes('none_of_the_above')}
              onCheckedChange={(checked) => {
                if (checked) {
                  updateField('cognitiveSymptoms', ['none_of_the_above']);
                } else {
                  updateField('cognitiveSymptoms', []);
                }
              }}
            />
            <Label htmlFor="cognitive_none" className="text-muted-foreground">
              –ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ
            </Label>
          </div>
        </div>
      </div>

      <div className="text-sm text-muted-foreground bg-muted/50 rounded-lg p-3">
        <p>
          ‚úÖ <strong>–ì–æ—Ç–æ–≤–æ!</strong> –í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö. 
          –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.
        </p>
      </div>
    </div>
  );
};
