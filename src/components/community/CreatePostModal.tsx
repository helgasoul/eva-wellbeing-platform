import React, { useState } from 'react';
import { useAuth } from '@/context/AuthContext';
import { cn } from '@/lib/utils';
import { X, ArrowLeft, ArrowRight, Edit } from 'lucide-react';

interface CommunityPost {
  id: string;
  author_id: string;
  author_name: string;
  author_avatar?: string;
  author_age_group: '35-40' | '40-45' | '45-50' | '50-55' | '55-60' | '60+';
  author_menopause_phase: 'premenopause' | 'perimenopause' | 'menopause' | 'postmenopause';
  title: string;
  content: string;
  category: 'general' | 'symptoms' | 'treatment' | 'lifestyle' | 'success_stories' | 'questions' | 'support';
  tags: string[];
  is_anonymous: boolean;
  created_at: string;
  updated_at?: string;
  likes_count: number;
  comments_count: number;
  is_pinned: boolean;
  is_verified: boolean;
  sensitivity_level: 'public' | 'sensitive' | 'private';
}

interface CreatePostModalProps {
  onClose: () => void;
  onPostCreated: (post: CommunityPost) => void;
}

export const CreatePostModal: React.FC<CreatePostModalProps> = ({
  onClose,
  onPostCreated
}) => {
  const { user } = useAuth();
  const [step, setStep] = useState<'type' | 'content' | 'settings'>('type');
  const [postData, setPostData] = useState({
    title: '',
    content: '',
    category: 'general' as CommunityPost['category'],
    tags: [] as string[],
    is_anonymous: false,
    sensitivity_level: 'public' as CommunityPost['sensitivity_level']
  });

  const postTypes = [
    {
      category: 'questions' as const,
      title: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –∂–µ–Ω—â–∏–Ω',
      icon: '‚ùì',
      example: '–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏ –±–µ–∑ –≥–æ—Ä–º–æ–Ω–æ–≤?'
    },
    {
      category: 'support' as const,
      title: '–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É',
      description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ',
      icon: 'ü§ó',
      example: '–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π –≤ –Ω–∞—á–∞–ª–µ –º–µ–Ω–æ–ø–∞—É–∑—ã...'
    },
    {
      category: 'success_stories' as const,
      title: '–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞',
      description: '–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏—Ö —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º',
      icon: 'üåü',
      example: '–ö–∞–∫ —è —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π –≤ –º–µ–Ω–æ–ø–∞—É–∑–µ'
    },
    {
      category: 'symptoms' as const,
      title: '–û–±—Å—É–¥–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã',
      description: '–°—Ä–∞–≤–Ω–∏—Ç–µ –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∂–µ–Ω—â–∏–Ω–∞–º–∏',
      icon: 'üî•',
      example: '–£ –∫–æ–≥–æ –µ—â–µ –±—ã–≤–∞—é—Ç –Ω–æ—á–Ω—ã–µ –ø–æ—Ç—ã?'
    },
    {
      category: 'treatment' as const,
      title: '–õ–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã',
      description: '–û–±–º–µ–Ω—è–π—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Ç–µ—Ä–∞–ø–∏–∏',
      icon: 'üíä',
      example: '–ú–æ–π –æ–ø—ã—Ç –ø—Ä–∏–µ–º–∞ –ó–ì–¢'
    },
    {
      category: 'lifestyle' as const,
      title: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
      description: '–°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —Å–ø–æ—Ä—Ç—É, —É—Ö–æ–¥—É',
      icon: 'üèÉ‚Äç‚ôÄÔ∏è',
      example: '–ô–æ–≥–∞ –ø–æ–º–æ–≥–ª–∞ –º–Ω–µ —Å –ø—Ä–∏–ª–∏–≤–∞–º–∏'
    }
  ];

  const handleCreatePost = async () => {
    const newPost: CommunityPost = {
      id: Date.now().toString(),
      author_id: user?.id || '',
      author_name: postData.is_anonymous ? '–ê–Ω–æ–Ω–∏–º–Ω–æ' : (user?.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
      author_age_group: calculateAgeGroup(45), // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      author_menopause_phase: 'perimenopause', // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      title: postData.title,
      content: postData.content,
      category: postData.category,
      tags: postData.tags,
      is_anonymous: postData.is_anonymous,
      created_at: new Date().toISOString(),
      likes_count: 0,
      comments_count: 0,
      is_pinned: false,
      is_verified: false,
      sensitivity_level: postData.sensitivity_level
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)
    const existingPosts = JSON.parse(localStorage.getItem('community_posts') || '[]');
    existingPosts.unshift(newPost);
    localStorage.setItem('community_posts', JSON.stringify(existingPosts));

    onPostCreated(newPost);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-2xl font-bold gentle-text">
            {step === 'type' ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞' :
             step === 'content' ? '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ—Å—Ç' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞'}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <div className="p-6">
          
          {step === 'type' && (
            <div className="space-y-4">
              <p className="soft-text mb-6">
                –ö–∞–∫–æ–π —Ç–∏–ø –ø–æ—Å—Ç–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ, —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {postTypes.map(type => (
                  <button
                    key={type.category}
                    onClick={() => {
                      setPostData(prev => ({ ...prev, category: type.category }));
                      setStep('content');
                    }}
                    className="text-left p-4 gentle-border rounded-xl hover:border-primary hover:bg-primary/5 transition-colors interactive-hover"
                  >
                    <div className="flex items-center mb-2">
                      <span className="text-2xl mr-3">{type.icon}</span>
                      <div>
                        <div className="font-semibold gentle-text">{type.title}</div>
                      </div>
                    </div>
                    <div className="text-sm soft-text mb-2">{type.description}</div>
                    <div className="text-xs text-gray-500 italic">
                      –ü—Ä–∏–º–µ—Ä: "{type.example}"
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {step === 'content' && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium gentle-text mb-2">
                  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ *
                </label>
                <input
                  type="text"
                  value={postData.title}
                  onChange={(e) => setPostData(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞..."
                  className="w-full p-3 gentle-border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium gentle-text mb-2">
                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ *
                </label>
                <textarea
                  value={postData.content}
                  onChange={(e) => setPostData(prev => ({ ...prev, content: e.target.value }))}
                  placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é..."
                  rows={8}
                  className="w-full p-3 gentle-border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium gentle-text mb-2">
                  –¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
                </label>
                <input
                  type="text"
                  placeholder="–ø—Ä–∏–ª–∏–≤—ã, —Å–æ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ..."
                  onChange={(e) => {
                    const tags = e.target.value.split(',').map(tag => tag.trim()).filter(Boolean);
                    setPostData(prev => ({ ...prev, tags }));
                  }}
                  className="w-full p-3 gentle-border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={() => setStep('type')}
                  className="flex-1 bg-gray-200 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center"
                >
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={() => setStep('settings')}
                  disabled={!postData.title || !postData.content}
                  className="flex-1 bg-primary text-white py-3 px-4 rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 flex items-center justify-center"
                >
                  –î–∞–ª–µ–µ
                  <ArrowRight className="h-4 w-4 ml-2" />
                </button>
              </div>
            </div>
          )}

          {step === 'settings' && (
            <div className="space-y-6">
              <div>
                <h3 className="font-semibold gentle-text mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</h3>
                
                <div className="space-y-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={postData.is_anonymous}
                      onChange={(e) => setPostData(prev => ({ ...prev, is_anonymous: e.target.checked }))}
                      className="mr-3"
                    />
                    <div>
                      <div className="font-medium">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ</div>
                      <div className="text-sm soft-text">–í–∞—à–µ –∏–º—è –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ</div>
                    </div>
                  </label>

                  <div>
                    <label className="block text-sm font-medium gentle-text mb-2">
                      –£—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    </label>
                    <select
                      value={postData.sensitivity_level}
                      onChange={(e) => setPostData(prev => ({ 
                        ...prev, 
                        sensitivity_level: e.target.value as CommunityPost['sensitivity_level']
                      }))}
                      className="w-full gentle-border rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary"
                    >
                      <option value="public">–ü—É–±–ª–∏—á–Ω—ã–π - –≤–∏–¥—è—Ç –≤—Å–µ</option>
                      <option value="sensitive">–î–µ–ª–∏–∫–∞—Ç–Ω—ã–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
                      <option value="private">–ü—Ä–∏–≤–∞—Ç–Ω—ã–π - —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –≥—Ä—É–ø–ø</option>
                    </select>
                  </div>
                </div>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start">
                  <span className="text-blue-600 mr-3">‚ÑπÔ∏è</span>
                  <div className="text-sm text-blue-800">
                    <strong>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:</strong>
                    <ul className="mt-2 space-y-1 list-disc list-inside">
                      <li>–ë—É–¥—å—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏—Ü–∞–º</li>
                      <li>–ù–µ –¥–∞–≤–∞–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –±–µ–∑ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
                      <li>–î–µ–ª–∏—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</li>
                      <li>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={() => setStep('content')}
                  className="flex-1 bg-gray-200 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center"
                >
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={handleCreatePost}
                  className="flex-1 bg-primary text-white py-3 px-4 rounded-lg hover:bg-primary/90 transition-colors flex items-center justify-center"
                >
                  <Edit className="h-4 w-4 mr-2" />
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
const calculateAgeGroup = (age?: number): CommunityPost['author_age_group'] => {
  if (!age) return '45-50';
  if (age < 40) return '35-40';
  if (age < 45) return '40-45';
  if (age < 50) return '45-50';
  if (age < 55) return '50-55';
  if (age < 60) return '55-60';
  return '60+';
};