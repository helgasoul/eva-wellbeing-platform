import React, { useState } from 'react';
import { WearableDevice } from '@/pages/patient/WearableDevices';
import { AddDeviceModal } from './AddDeviceModal';

interface WearableDevicesContentProps {
  devices: WearableDevice[];
  onDevicesUpdate: (devices: WearableDevice[]) => void;
  isConnecting: boolean;
  onConnectingChange: (connecting: boolean) => void;
}

export const WearableDevicesContent: React.FC<WearableDevicesContentProps> = ({
  devices,
  onDevicesUpdate,
  isConnecting,
  onConnectingChange
}) => {
  const [showAddDevice, setShowAddDevice] = useState(false);

  return (
    <div className="space-y-6">
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
          <div className="flex items-center">
            <div className="bg-primary/10 p-3 rounded-full mr-4">
              <span className="text-2xl">üì±</span>
            </div>
            <div>
              <div className="text-2xl font-bold text-primary">{devices.length}</div>
              <div className="text-sm soft-text">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</div>
            </div>
          </div>
        </div>

        <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
          <div className="flex items-center">
            <div className="bg-green-100 p-3 rounded-full mr-4">
              <span className="text-2xl">üîó</span>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">
                {devices.filter(d => d.connected).length}
              </div>
              <div className="text-sm soft-text">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
          </div>
        </div>

        <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
          <div className="flex items-center">
            <div className="bg-blue-100 p-3 rounded-full mr-4">
              <span className="text-2xl">üìä</span>
            </div>
            <div>
              <div className="text-2xl font-bold text-blue-600">
                {devices.reduce((acc, d) => acc + d.data_types.length, 0)}
              </div>
              <div className="text-sm soft-text">–¢–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö</div>
            </div>
          </div>
        </div>

        <div className="bloom-card bg-white/90 backdrop-blur-sm p-4">
          <div className="flex items-center">
            <div className="bg-yellow-100 p-3 rounded-full mr-4">
              <span className="text-2xl">üîÑ</span>
            </div>
            <div>
              <div className="text-2xl font-bold text-yellow-600">
                {devices.filter(d => d.last_sync && 
                  new Date(d.last_sync) > new Date(Date.now() - 24*60*60*1000)
                ).length}
              </div>
              <div className="text-sm soft-text">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è</div>
            </div>
          </div>
        </div>
      </div>

      {/* –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
      <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-playfair font-bold gentle-text">–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
          <button
            onClick={() => setShowAddDevice(true)}
            className="bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors flex items-center space-x-2 interactive-hover"
          >
            <span>‚ûï</span>
            <span>–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</span>
          </button>
        </div>

        {devices.length === 0 ? (
          <NoDevicesState onAddDevice={() => setShowAddDevice(true)} />
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {devices.map(device => (
              <DeviceCard 
                key={device.id}
                device={device}
                onDeviceUpdate={(updatedDevice) => {
                  const updated = devices.map(d => 
                    d.id === updatedDevice.id ? updatedDevice : d
                  );
                  onDevicesUpdate(updated);
                }}
                onDeviceRemove={(deviceId) => {
                  const updated = devices.filter(d => d.id !== deviceId);
                  onDevicesUpdate(updated);
                }}
              />
            ))}
          </div>
        )}
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
      <RecommendedDevicesSection />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
      {showAddDevice && (
        <AddDeviceModal
          onClose={() => setShowAddDevice(false)}
          onDeviceAdd={(newDevice) => {
            onDevicesUpdate([...devices, newDevice]);
            setShowAddDevice(false);
          }}
          isConnecting={isConnecting}
          onConnectingChange={onConnectingChange}
        />
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è "–Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
const NoDevicesState = ({ onAddDevice }: { onAddDevice: () => void }) => (
  <div className="text-center py-12">
    <div className="text-6xl mb-4 animate-gentle-float">‚åö</div>
    <h3 className="text-xl font-playfair font-semibold gentle-text mb-2">
      –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    </h3>
    <p className="soft-text mb-6 max-w-md mx-auto">
      –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä –∏–ª–∏ —Å–º–∞—Ä—Ç-—á–∞—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ 
      –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è
    </p>
    <button
      onClick={onAddDevice}
      className="bg-primary text-primary-foreground px-6 py-3 rounded-lg hover:bg-primary/90 transition-colors interactive-hover"
    >
      üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    </button>
  </div>
);

// –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const DeviceCard = ({ 
  device, 
  onDeviceUpdate, 
  onDeviceRemove 
}: { 
  device: WearableDevice;
  onDeviceUpdate: (device: WearableDevice) => void;
  onDeviceRemove: (deviceId: string) => void;
}) => {
  const [isSyncing, setIsSyncing] = useState(false);

  const getDeviceIcon = (brand: string) => {
    switch (brand) {
      case 'apple': return '‚åö';
      case 'fitbit': return 'üì±';
      case 'garmin': return 'üèÉ';
      case 'samsung': return 'üì±';
      case 'xiaomi': return '‚åö';
      case 'polar': return '‚ù§Ô∏è';
      case 'oura': return 'üíç';
      default: return 'üì±';
    }
  };

  const getBrandColor = (brand: string) => {
    switch (brand) {
      case 'apple': return 'from-gray-600 to-gray-800';
      case 'fitbit': return 'from-green-500 to-green-700';
      case 'garmin': return 'from-blue-500 to-blue-700';
      case 'samsung': return 'from-blue-600 to-purple-600';
      case 'xiaomi': return 'from-orange-500 to-red-500';
      case 'polar': return 'from-red-500 to-pink-500';
      case 'oura': return 'from-purple-600 to-indigo-600';
      default: return 'from-gray-500 to-gray-700';
    }
  };

  const syncDevice = async () => {
    setIsSyncing(true);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const updatedDevice = {
        ...device,
        last_sync: new Date().toISOString(),
        connected: true
      };
      onDeviceUpdate(updatedDevice);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    } finally {
      setIsSyncing(false);
    }
  };

  const getLastSyncText = () => {
    if (!device.last_sync) return '–ù–∏–∫–æ–≥–¥–∞';
    
    const lastSync = new Date(device.last_sync);
    const now = new Date();
    const diffHours = (now.getTime() - lastSync.getTime()) / (1000 * 60 * 60);
    
    if (diffHours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffHours < 24) return `${Math.floor(diffHours)} —á –Ω–∞–∑–∞–¥`;
    return `${Math.floor(diffHours / 24)} –¥–Ω –Ω–∞–∑–∞–¥`;
  };

  return (
    <div className="bloom-card bg-white/90 backdrop-blur-sm p-4 hover:shadow-md transition-shadow">
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <div className={`bg-gradient-to-br ${getBrandColor(device.brand)} p-2 rounded-lg mr-3`}>
            <span className="text-white text-lg">{getDeviceIcon(device.brand)}</span>
          </div>
          <div>
            <div className="font-semibold gentle-text">{device.name}</div>
            <div className="text-sm soft-text capitalize">{device.brand} {device.model}</div>
          </div>
        </div>
        
        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div className={`w-3 h-3 rounded-full ${
          device.connected ? 'bg-green-500' : 'bg-red-500'
        }`} />
      </div>

      {/* –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö */}
      <div className="mb-4">
        <div className="text-sm font-medium gentle-text mb-2">–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:</div>
        <div className="flex flex-wrap gap-1">
          {device.data_types.map(type => (
            <span 
              key={type}
              className="bg-primary/10 text-primary px-2 py-1 rounded text-xs"
            >
              {getDataTypeIcon(type)} {getDataTypeLabel(type)}
            </span>
          ))}
        </div>
      </div>

      {/* –ë–∞—Ç–∞—Ä–µ—è */}
      {device.battery_level && (
        <div className="mb-4">
          <div className="flex items-center justify-between text-sm">
            <span className="soft-text">üîã –ë–∞—Ç–∞—Ä–µ—è</span>
            <span className={`font-medium ${
              device.battery_level > 20 ? 'text-green-600' : 'text-red-600'
            }`}>
              {device.battery_level}%
            </span>
          </div>
          <div className="w-full bg-bloom-vanilla rounded-full h-2 mt-1">
            <div 
              className={`h-2 rounded-full ${
                device.battery_level > 20 ? 'bg-green-500' : 'bg-red-500'
              }`}
              style={{ width: `${device.battery_level}%` }}
            />
          </div>
        </div>
      )}

      {/* –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è */}
      <div className="mb-4">
        <div className="flex items-center justify-between text-sm">
          <span className="soft-text">üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</span>
          <span className="gentle-text">{getLastSyncText()}</span>
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex space-x-2">
        <button
          onClick={syncDevice}
          disabled={isSyncing}
          className="flex-1 bg-primary text-primary-foreground py-2 px-3 rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 text-sm interactive-hover"
        >
          {isSyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
        </button>
        
        <button
          onClick={() => onDeviceRemove(device.id)}
          className="bg-destructive text-destructive-foreground p-2 rounded-lg hover:bg-destructive/90 transition-colors interactive-hover"
        >
          üóëÔ∏è
        </button>
      </div>
    </div>
  );
};

// –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const RecommendedDevicesSection = () => (
  <div className="bloom-card bg-white/90 backdrop-blur-sm p-6">
    <h3 className="text-lg font-playfair font-semibold gentle-text mb-4">
      üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –º–µ–Ω–æ–ø–∞—É–∑—ã
    </h3>
    
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {[
        {
          name: 'Oura Ring',
          description: '–¢–æ—á–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ –∏ —Ñ–∞–∑ —Å–Ω–∞',
          price: '–æ—Ç $299',
          rating: 4.8,
          specialFeatures: ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞', 'HRV', '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞']
        },
        {
          name: 'Apple Watch Series 9',
          description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∂–µ–Ω—â–∏–Ω',
          price: '–æ—Ç $399',
          rating: 4.7,
          specialFeatures: ['–¶–∏–∫–ª –æ–≤—É–ª—è—Ü–∏–∏', '–≠–ö–ì', '–£—Ä–æ–≤–µ–Ω—å –∫–∏—Å–ª–æ—Ä–æ–¥–∞']
        },
        {
          name: 'Fitbit Sense 2',
          description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
          price: '–æ—Ç $249',
          rating: 4.5,
          specialFeatures: ['–°—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', 'GPS', '–ú—É–∑—ã–∫–∞']
        }
      ].map((device, index) => (
        <div key={index} className="border border-bloom-caramel/20 rounded-lg p-4">
          <div className="flex justify-between items-start mb-2">
            <div>
              <div className="font-semibold gentle-text">{device.name}</div>
              <div className="text-sm text-primary font-medium">{device.price}</div>
            </div>
            <div className="flex items-center text-sm">
              <span className="text-yellow-500">‚≠ê</span>
              <span className="ml-1 soft-text">{device.rating}</span>
            </div>
          </div>
          
          <p className="text-sm soft-text mb-3">{device.description}</p>
          
          <div className="space-y-1">
            {device.specialFeatures.map((feature, featureIndex) => (
              <div key={featureIndex} className="text-xs text-primary bg-primary/10 px-2 py-1 rounded inline-block mr-1">
                {feature}
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getDataTypeIcon = (type: string) => {
  switch (type) {
    case 'heart_rate': return '‚ù§Ô∏è';
    case 'sleep': return 'üò¥';
    case 'steps': return 'üë£';
    case 'temperature': return 'üå°Ô∏è';
    case 'stress': return 'üò∞';
    case 'calories': return 'üî•';
    default: return 'üìä';
  }
};

const getDataTypeLabel = (type: string) => {
  switch (type) {
    case 'heart_rate': return '–ü—É–ª—å—Å';
    case 'sleep': return '–°–æ–Ω';
    case 'steps': return '–®–∞–≥–∏';
    case 'temperature': return '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    case 'stress': return '–°—Ç—Ä–µ—Å—Å';
    case 'calories': return '–ö–∞–ª–æ—Ä–∏–∏';
    default: return type;
  }
};