// ‚úÖ –≠–¢–ê–ü 2: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { UserRole } from '@/types/roles';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
interface AdminConfig {
  email: string;
  password: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface TestUserConfig {
  patient: {
    email: string;
    name: { first: string; last: string };
  };
  doctor: {
    email: string;
    name: { first: string; last: string };
  };
  admin: {
    email: string;
    name: { first: string; last: string };
  };
}

// ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö credentials
const getAdminCredentials = (): AdminConfig | null => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤ production)
  const envEmail = import.meta.env.VITE_ADMIN_EMAIL;
  const envPassword = import.meta.env.VITE_ADMIN_PASSWORD;
  
  if (envEmail && envPassword) {
    return {
      email: envEmail,
      password: envPassword
    };
  }
  
  // ‚úÖ Fallback –¥–ª—è development/demo —Ä–µ–∂–∏–º–∞
  if (import.meta.env.DEV || window.location.hostname === 'localhost') {
    return {
      email: 'admin@eva-platform.com',
      password: 'EvaAdmin2025!'
    };
  }
  
  // –í production –±–µ–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - –æ—Ç–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –≤—Ö–æ–¥
  return null;
};

// ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
const getTestUsersConfig = (): TestUserConfig => {
  const baseConfig: TestUserConfig = {
    patient: {
      email: 'test-patient@eva.com',
      name: { first: '–¢–µ—Å—Ç', last: '–ü–∞—Ü–∏–µ–Ω—Ç' }
    },
    doctor: {
      email: 'test-doctor@eva.com', 
      name: { first: '–¢–µ—Å—Ç', last: '–í—Ä–∞—á' }
    },
    admin: {
      email: 'test-admin@eva.com',
      name: { first: '–¢–µ—Å—Ç', last: '–ê–¥–º–∏–Ω' }
    }
  };
  
  // –í production –º–æ–∂–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (import.meta.env.PROD) {
    return {
      patient: {
        email: import.meta.env.VITE_TEST_PATIENT_EMAIL || baseConfig.patient.email,
        name: baseConfig.patient.name
      },
      doctor: {
        email: import.meta.env.VITE_TEST_DOCTOR_EMAIL || baseConfig.doctor.email,
        name: baseConfig.doctor.name
      },
      admin: {
        email: import.meta.env.VITE_TEST_ADMIN_EMAIL || baseConfig.admin.email,
        name: baseConfig.admin.name
      }
    };
  }
  
  return baseConfig;
};

// ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID
export const generateSecureId = (prefix: string = 'user'): string => {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 15);
  return `${prefix}_${timestamp}_${random}`;
};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—ã
export const isSecureEnvironment = (): boolean => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS –≤ production
  if (import.meta.env.PROD && window.location.protocol !== 'https:') {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API
  if (typeof crypto === 'undefined' || typeof crypto.randomUUID !== 'function') {
    return false;
  }
  
  return true;
};

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export const authConfig = {
  // –ê–¥–º–∏–Ω—Å–∫–∏–µ credentials (–º–æ–≥—É—Ç –±—ã—Ç—å null –≤ production)
  adminCredentials: getAdminCredentials(),
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  testUsers: getTestUsersConfig(),
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security: {
    isSecureEnvironment: isSecureEnvironment(),
    requireHttps: import.meta.env.PROD,
    maxLoginAttempts: 5,
    lockoutDuration: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
  session: {
    maxAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
    autoBackupInterval: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
    emergencyRecoveryWindow: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  }
};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
export const isAdminLoginAvailable = (): boolean => {
  return authConfig.adminCredentials !== null;
};

// ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev)
if (import.meta.env.DEV) {
  console.log('üîß Auth Configuration:', {
    adminLoginAvailable: isAdminLoginAvailable(),
    isSecureEnvironment: authConfig.security.isSecureEnvironment,
    testUsersCount: Object.keys(authConfig.testUsers).length,
    environment: import.meta.env.MODE
  });
}