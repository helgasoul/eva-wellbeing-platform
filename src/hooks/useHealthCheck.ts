
import { useEffect, useState } from 'react';
import { HealthCheckService, HealthStatus } from '@/services/healthCheck';
import { toast } from '@/hooks/use-toast';

export const useHealthCheck = (options?: {
  runOnMount?: boolean;
  monitoringInterval?: number;
  showToasts?: boolean;
}) => {
  const [healthStatus, setHealthStatus] = useState<HealthStatus | null>(null);
  const [isChecking, setIsChecking] = useState(false);
  const [lastCheckTime, setLastCheckTime] = useState<Date | null>(null);

  const {
    runOnMount = true,
    monitoringInterval = 300000, // 5 –º–∏–Ω—É—Ç
    showToasts = true
  } = options || {};

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
  const performHealthCheck = async () => {
    try {
      setIsChecking(true);
      console.log('üîç Performing health check...');
      
      const status = await HealthCheckService.performHealthCheck();
      setHealthStatus(status);
      setLastCheckTime(new Date());
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
      if (showToasts) {
        if (status.overall === 'critical') {
          toast({
            title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π. –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.',
            variant: 'destructive',
          });
          
          // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          const recovered = await HealthCheckService.attemptAutoRecovery(status);
          if (recovered) {
            toast({
              title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
              description: '–ü—Ä–æ–±–ª–µ–º—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã.',
            });
          }
        } else if (status.overall === 'warning') {
          toast({
            title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ.',
            variant: 'destructive',
          });
        }
      }
      
      return status;
    } catch (error) {
      console.error('Health check failed:', error);
      return null;
    } finally {
      setIsChecking(false);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (runOnMount) {
      performHealthCheck();
    }
  }, [runOnMount]);

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (monitoringInterval > 0) {
      const stopMonitoring = HealthCheckService.startHealthMonitoring(monitoringInterval);
      return stopMonitoring;
    }
  }, [monitoringInterval]);

  return {
    healthStatus,
    isChecking,
    lastCheckTime,
    performHealthCheck,
    
    // –£–¥–æ–±–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
    isHealthy: healthStatus?.overall === 'healthy',
    hasWarnings: healthStatus?.overall === 'warning',
    isCritical: healthStatus?.overall === 'critical',
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    supabaseConnected: healthStatus?.supabaseConnection || false,
    userSessionValid: healthStatus?.userSession || false,
    dataIntegrityOk: healthStatus?.dataIntegrity || false,
    localStorageWorking: healthStatus?.localStorage || false
  };
};
